{"version":3,"file":"25465.1d66cee6.iframe.bundle.js","mappings":";;;AAUA;ACDA;AACA;;;;;AAKA;;;;;;;;ACsBA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;AAEA;;;AAGA;;;;;;;;;;;;AAYA;;AAEA;;AAQA;AACA;;;;AAIA;;;;;;;;;;;;;;AAcA;AC5FA;AACA;;;;;;AAMA;;AAEA;;;;AAIA;;;;AAIA;AAEA;;;AAGA;AAEA;;AAEA;;;;;;;;;AC7BA;;AAGA;AC4BA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;;;AAIA;;AAGA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;;;AAKA;AAEA;AACA;;;;AAIA;AAEA;;;;AAIA;;;;AAMA;AACA;AACA;AACA;;;;;;;AAOA;;;;;;AAOA;AAGA;AACA;AACA;;;;;AAKA;AAEA;AACA;;;AAGA;AAIA;;;AAGA;;AAIA;AAEA;AACA;;AAEA;AACA;AAEA;;;;;;;AAOA;;;;;;;AAOA;;;AAGA;AAIA;;;;;;AAMA;AAEA;AACA;;;AAGA;;;;AAIA;;;;AAIA;;;;;;;ACxLA;;;AAMA;;;;AAIA;;AAGA;AAEA;AACA;AACA;;;;;;AAMA;;AAEA;;AAEA;;;;AAIA;ACvCA;;;;;;;AA8CA;;;;AAIA;;AAGA;;;;;;;;;;;;;AAaA;;;;AAIA;;;;;;;AAOA;AACA;;;;AAIA;;;;;;;;;;;;;;;;;;;;AAzEA;;AAWA;;;;;;;;;;;;AAgGA;;ACpGA;AAIA;;AAEA;;AAGA;;;;;AAOA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;;AAGA;AACA;AACA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAGA;AAIA;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAKA;AAUA;AACA;;AAEA;AAEA;AACA;AACA;;;AAGA;;ACvHA;AAEA;;AAEA;;AAGA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAEA;AAOA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAEA;AAYA;AACA;;AAEA;AAEA;AACA;AACA;;;AAGA;;;;;;ACrJA;ACjBA;;;AAKA;;;ACOA;;;;AAIA;;AAEA;;;;ACbA;;;AAMA;;;;AAKA;;AAIA;;;;;;;;;;AAwBA;AC1CA;;;;;;AAOA;AAGA;;;;AAMA;;;;AAIA;AAEA;;AAIA;AAGA;;;AAKA;;;AAKA;;AAGA;AChCA;AACA;AACA;;AAEA;;;;AAIA;AAEA;;AAEA;;;AAIA;AC5BA;AACA;AACA;AAGA;;ACKA;AAKA;;;;AAIA;AACA;;;AAGA;AACA;;;;AAIA;;;;;AAKA;;AAEA;;;;;AAKA;;;;AAIA;AACA;;;AAGA;AACA;;AAEA;;;;AAIA;;;AAGA;AACA;AACA;AACA;;;AAGA;AAOA;;;AAGA;;;;AAIA;;;;AAIA;;;;;;;AAOA;;;;AAIA;AAEA;;;;;;AAMA;AACA;AACA;;;AAGA;AAIA;;;;;AAKA;;;;;AAMA;AACA;AAEA;;AAGA;AACA;AAGA;AAGA;AACA;;AAIA;AAGA;AACA;AACA;;;AAGA;;AAIA;;AAMA;;;;;;;;;;;;;AAaA;AACA;;;;AAIA;;;AAGA;AACA;;AAEA;;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;;;;;AAUA;AACA;;;;AAIA;AACA;;AAGA;AAGA;AAlNA;;;AAwNA;;AAIA;;;;AAKA;;;AAGA;AApOA;;;;;;;;;;;;;;;AAqPA;;;;;;;;;;;;AAgBA;;;AAGA;AACA;;;;;;;;AAQA;;;;AAIA;;;;AAIA;;AAEA;ACnRA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AAEA;;AAEA;ACrBA;;;;AAIA;AACA;;AAIA;;AA2CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaA;;;;AAxBA;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;AAqDA;;AAEA;;;;;;;;;AASA;;;AAKA;ACnJA;AACA;;AAIA;ACJA;;AAEA;;;AAGA;;;;AAMA;ACVA;AACA;;AAEA;;;;;AAKA;;;AAKA;;ACPA;AACA;AACA;AAGA;;;;AAMA;;;;;;;AAOA;;;AAKA;AC1BA;AACA;;AAGA;;;ACMA;;;AAKA;;AAKA;AACA;;AAEA;AAGA;;AAEA;AAOA;AAEA;;;;;;;AAOA;AACA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;;;AAKA;AAUA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;AAIA;;;;;;AAMA;AC/FA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;AACA;;;;;AAKA;AACA;AACA;AAEA;;;;;AAKA;AAEA;;;;;AAKA;AAEA;;AAEA;AAEA;AACA;;;;AAIA;;;;;AAMA;AACA;;;;;AAKA;;AAEA;;;ACpEA;;;;;AAKA;;;;;;;;;AASA;;;;;;;;;;;AAYA;;AAIA;AACA;AACA;;;;;;AAMA;;AAIA;;AChCA;AACA;AACA;AACA;ACOA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;AAUA;AC7BA;AACA;AAEA;;AAGA;;;;;AASA;;;AAGA;AACA;;;;;;;;;;;;;;AAcA;AACA;;;;;;;;;AASA;AACA;;AAEA;;;;;;;AAWA;;;;;AAKA;;;;;;;AAOA;AACA;AACA;AACA;;;;AAIA;;;AAKA;;AC1FA;;;;;AAOA;;;;;;;;;;;ACDA;;;;;AAOA;;;;;;AAOA;AACA;AACA;AACA;;;;;;;;AAQA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;AAOA;;AC5GA;AACA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;;;AAIA;AACA;;;AAGA;AAEA;;;;;AAKA;;;AAKA;;;AAKA;;AChDA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;AASA;;AAEA;;AAEA;;;;;AAMA;;;;;AAMA;;;;AAKA;;;;;;;;AAQA;;;AAKA;;ACrDA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACIA;;;;;;;;;AASA;AACA;AACA;;AAEA;AAEA;;;;;;AAMA;;;AAKA;;;;AAMA;ACrCA;AACA;AACA;AACA;;;;;;;;;;;ACCA;;AAGA;;;;;;AAQA;AACA;AAGA;;;;;AAOA;AACA;AACA;AACA;;;;AAIA;AACA;AAGA;;AAGA;;;;;AAOA;AC3DA;AACA;AACA;;AAEA;;;;AAIA;AACA","sources":["webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Image/Image.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Badges/Alert.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Avatar/Avatar.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Backdrop/Backdrop.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Button/BareButton.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Button/Button.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Card/Card.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/styles/GlobalStyle.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Flex/Flex.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Grid/Grid.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Icon/Icon.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/VisuallyHiddenText/VisuallyHiddenText.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/EmptyState/EmptyState.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/MetaList/MetaList.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/SummaryItem/SummaryItem.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Badges/Count.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Mark/Mark.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Menu/Menu.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Drawer/Drawer.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/MenuButton/MenuButton.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/HTML/HTML.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Card/CardFooter.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Card/CardContent.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Card/CardHeader.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Dialog/Dialog.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/AdditionalInfo/AdditionalInfo.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/FormField/FormField.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/FormControl/FormControl.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Input/Input.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Label/Label.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Badges/Keyboard.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Link/Link.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Modal/DockedModals.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Popover/Popover.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Progress/Bar.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Progress/Ellipsis.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Progress/Progress.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Progress/Ring.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Text/Text.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Toaster/Toaster.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Tooltip/Tooltip.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled from 'styled-components';\nexport const StyledImage = styled.img `\n  max-width: 100%;\n`;\nconst Image = forwardRef((props, ref) => {\n    const { alt, ...restProps } = props;\n    return _jsx(StyledImage, { ...restProps, alt: alt, ref: ref });\n});\nexport default Image;\n//# sourceMappingURL=Image.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledAlert = styled.div(props => {\n    const alerts = props.theme.components.badges.alert;\n    const { background } = alerts[props.variant];\n    const { 'border-color': borderColor } = alerts.base;\n    return css `\n    background: ${background};\n    border: 0.0625rem solid ${borderColor};\n    border-radius: 100%;\n    display: inline-block;\n    height: 0.625rem;\n    width: 0.625rem;\n  `;\n});\nStyledAlert.defaultProps = defaultThemeProp;\nconst Alert = forwardRef((props, ref) => {\n    const { variant, ...restProps } = props;\n    return _jsx(StyledAlert, { ...restProps, variant: variant, ref: ref });\n});\nexport default Alert;\n//# sourceMappingURL=Alert.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { readableColor, rgba } from 'polished';\nimport Image from '../Image';\nimport { defaultThemeProp } from '../../theme';\nimport Icon, { StyledIcon } from '../Icon';\nimport { Alert } from '../Badges';\nimport { useI18n } from '../../hooks';\nimport { tryCatch } from '../../utils';\nconst sizeToRem = {\n    s: 1,\n    m: 2,\n    l: 2.5,\n    xl: 4\n};\nconst fontSizeToRem = {\n    s: 0.5625,\n    m: 0.8125,\n    l: 1,\n    xl: 1.5\n};\nconst sizeToBorderRadius = {\n    s: 0.25,\n    m: 0.5,\n    l: 1,\n    xl: 1\n};\nexport const StyledAvatarImage = styled(Image) `\n  min-height: 100%;\n  min-width: 100%;\n  aspect-ratio: 1 / 1;\n  object-fit: cover;\n  border-radius: inherit;\n  height: fit-content;\n  width: fit-content;\n`;\nexport const StyledAvatar = styled.div(({ hasBrokenImage, hasSrc, size, shape, color, backgroundColor, theme: { base: { palette: { 'foreground-color': foregroundColor, 'primary-background': primaryBackground } }, components: { avatar } } }) => {\n    const sizeRem = sizeToRem[size];\n    const fontSize = fontSizeToRem[size];\n    let bgColor = hasSrc && !hasBrokenImage ? primaryBackground : backgroundColor || avatar['background-color'];\n    if (color && !backgroundColor && !(hasSrc && !hasBrokenImage))\n        bgColor = tryCatch(() => readableColor(color), () => avatar['background-color']);\n    const shadowColor = tryCatch(() => rgba(foregroundColor, 0.1));\n    const iconColor = color || tryCatch(() => readableColor(bgColor));\n    return css `\n      position: relative;\n      background-color: ${bgColor};\n      color: ${iconColor};\n      width: ${sizeRem}rem;\n      height: ${sizeRem}rem;\n      min-width: ${sizeRem}rem;\n      min-height: ${sizeRem}rem;\n      font-size: ${fontSize}rem;\n      text-transform: uppercase;\n      line-height: ${sizeRem}rem;\n      text-align: center;\n      vertical-align: top;\n      display: inline-block;\n      border-radius: 100%;\n      user-select: none;\n      -webkit-user-select: none;\n\n      ${shape === 'squircle' &&\n        css `\n        border-radius: calc(${sizeToBorderRadius[size]} * ${avatar['border-radius']});\n      `}\n\n      ${StyledIcon} {\n        width: 50%;\n        height: 100%;\n        vertical-align: initial;\n      }\n\n      ::after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        border-radius: inherit;\n        pointer-events: none;\n        box-shadow: inset 0 0 0 0.0625rem ${shadowColor};\n      }\n    `;\n});\nStyledAvatar.defaultProps = defaultThemeProp;\nexport const StyledStatus = styled.div(({ size, theme }) => {\n    /** Scales alert badge dimensions based on size of avatar */\n    const sizeDimensions = (0.625 * sizeToRem[size]) / sizeToRem.m;\n    return css `\n    position: absolute;\n    height: ${sizeDimensions}rem;\n    width: ${sizeDimensions}rem;\n    inset-block-end: 0;\n    inset-inline-end: 0;\n    z-index: 1;\n    animation: pop calc(${theme.base.animation.speed} * 2) cubic-bezier(1, 1.65, 0.3, 1.24);\n\n    @keyframes pop {\n      0% {\n        opacity: 0;\n        transform: scale(0);\n      }\n      50% {\n        opacity: 1;\n      }\n      100% {\n        transform: scale(1);\n      }\n    }\n  `;\n});\nStyledStatus.defaultProps = defaultThemeProp;\n/**\n * Helper function to construct a two or one letter initial from the title prop.\n * This text will be displayed if no valid image source is provided.\n * @param name\n * @param size\n */\nconst getInitials = (name, size) => {\n    const words = name.split(' ');\n    const firstInitial = words[0][0];\n    return words.length === 1 || size === 's' ? firstInitial : `${firstInitial}${words[1][0]}`;\n};\n/**\n * Generally, avatars are used to distinguish between different operators and\n * objects when they are shown in a list or in a small space. Users of applications\n * can upload a custom avatar of their choice.\n */\nconst Avatar = forwardRef((props, ref) => {\n    const { shape = 'circle', size = 'm', imageSrc, icon, name, status, onImageError, ...restProps } = props;\n    const [hasBrokenImage, setHasBrokenImage] = useState();\n    const t = useI18n();\n    useEffect(() => {\n        setHasBrokenImage(undefined);\n    }, [imageSrc]);\n    const content = useMemo(() => {\n        if (icon) {\n            return _jsx(Icon, { name: icon });\n        }\n        if (imageSrc && !hasBrokenImage) {\n            return (_jsx(StyledAvatarImage, { src: imageSrc, alt: name, onError: (e) => {\n                    setHasBrokenImage(true);\n                    onImageError?.(e);\n                }, onLoad: () => {\n                    setHasBrokenImage(false);\n                } }));\n        }\n        return getInitials(name, size);\n    }, [imageSrc, name, size, icon, hasBrokenImage, onImageError]);\n    return (_jsxs(StyledAvatar, { role: 'img', hasSrc: !!imageSrc, hasBrokenImage: hasBrokenImage, shape: shape, size: size, ref: ref, \"aria-label\": `${name}${status ? ` ${t('status')} ${status}` : ''}`, ...restProps, children: [content, status === 'active' && _jsx(Alert, { as: StyledStatus, size: size, variant: 'success' })] }));\n});\nexport default Avatar;\n//# sourceMappingURL=Avatar.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState, useCallback, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { reflow } from '../../utils';\nimport Flex from '../Flex';\nconst transitionSpeedToTheme = {\n    slow: 2,\n    medium: 1,\n    fast: 0.5,\n    none: 0\n};\nexport const StyledBackdrop = styled.div(props => {\n    const { theme: { base } } = props;\n    const { opacity, alpha, variant, position } = props;\n    const transitionDuration = `max(calc(${transitionSpeedToTheme[props.transitionSpeed]} * ${base.animation.speed}), 1ms)`;\n    return css `\n    position: ${position};\n    z-index: ${position === 'fixed' ? base['z-index'].backdrop : base['z-index'].popover + 1};\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    border-radius: inherit;\n    opacity: ${opacity};\n    transition-property: opacity;\n    transition-timing-function: ${props.theme.base.animation.timing.ease};\n\n    /* stylelint-disable declaration-block-no-duplicate-properties */\n    transition-duration: 1ms;\n    transition-duration: ${transitionDuration};\n\n    /* stylelint-enable declaration-block-no-duplicate-properties */\n\n    ${variant === 'dark' &&\n        css `\n      background: rgba(0, 0, 0, ${alpha});\n    `}\n\n    ${variant === 'light' &&\n        css `\n      background: rgba(255, 255, 255, ${alpha});\n    `}\n  `;\n});\nStyledBackdrop.defaultProps = defaultThemeProp;\nconst Backdrop = forwardRef((props, ref) => {\n    const { children, container, open = false, variant = 'dark', transitionSpeed = 'medium', alpha = 0.6, position = 'fixed', onBeforeTransitionIn, onAfterTransitionIn, onBeforeTransitionOut, onAfterTransitionOut, ...restProps } = props;\n    const [state, setState] = useState('closed');\n    const onTransitionEnd = useCallback((e) => {\n        if (e.propertyName !== 'opacity' || e.target !== e.currentTarget)\n            return;\n        let nextState;\n        if (state === 'closing') {\n            nextState = 'closed';\n            onAfterTransitionOut?.();\n        }\n        else {\n            nextState = 'open';\n            onAfterTransitionIn?.();\n        }\n        setState(nextState);\n    }, [state, onAfterTransitionOut, onAfterTransitionIn]);\n    useEffect(() => {\n        if (open) {\n            if (state === 'closed' || state === 'closing') {\n                onBeforeTransitionIn?.();\n                reflow();\n                setState('opening');\n            }\n        }\n        else if (state === 'open' || state === 'opening') {\n            onBeforeTransitionOut?.();\n            setState('closing');\n        }\n    }, [open, onBeforeTransitionIn, onBeforeTransitionOut]);\n    return !open && state === 'closed' ? null : (_jsx(Flex, { container: { justify: 'center', alignItems: 'center', ...container }, as: StyledBackdrop, transitionSpeed: transitionSpeed, opacity: state === 'opening' || state === 'open' ? 1 : 0, alpha: alpha, variant: variant, position: position, onTransitionEnd: onTransitionEnd, ref: ref, ...restProps, children: children }));\n});\nexport default Backdrop;\n//# sourceMappingURL=Backdrop.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { useConsolidatedRef } from '../../hooks';\nexport const StyledBareButton = styled.button `\n  background: none;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  user-select: none;\n  color: inherit;\n\n  & + & {\n    margin-inline-start: ${props => props.theme.base.spacing};\n  }\n`;\nStyledBareButton.defaultProps = defaultThemeProp;\nconst BareButton = forwardRef(({ type = 'button', disabled = false, href, ...restProps }, ref) => {\n    const mouseDownEvent = useRef();\n    const buttonRef = useConsolidatedRef(ref);\n    useEffect(() => {\n        return () => {\n            mouseDownEvent.current = undefined;\n        };\n    }, []);\n    return (_jsx(StyledBareButton, { ref: buttonRef, as: href ? 'a' : undefined, type: href ? undefined : type, disabled: disabled, ...restProps, href: href, onMouseDown: (e) => {\n            restProps.onMouseDown?.(e);\n            e.persist();\n            mouseDownEvent.current = e;\n        }, onMouseUp: (e) => {\n            const shouldFocus = mouseDownEvent.current && !mouseDownEvent.current.defaultPrevented;\n            mouseDownEvent.current = undefined;\n            if (shouldFocus && buttonRef.current !== document.activeElement) {\n                buttonRef.current?.focus();\n            }\n            return restProps.onMouseUp?.(e);\n        } }));\n});\nexport default BareButton;\n//# sourceMappingURL=BareButton.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useRef, useEffect, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { mix, readableColor } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { getHoverColors, omitProps } from '../../styles';\nimport { useElement, useConsolidatedRef } from '../../hooks';\nimport Tooltip from '../Tooltip';\nimport Progress, { StyledProgressRing } from '../Progress';\nimport { StyledBackdrop } from '../Backdrop';\nimport { StyledIcon } from '../Icon';\nimport { StyledPopover } from '../Popover';\nexport const StyledButton = styled.button.withConfig(omitProps('loading'))(({ variant, icon, loading, compact, theme: { base: { spacing, 'border-radius': baseBorderRadius, palette: { 'primary-background': backgroundColor, 'foreground-color': textColor }, 'hit-area': { 'mouse-min': hitAreaMouse, 'finger-min': hitAreaFinger, 'compact-min': hitAreaCompact }, animation: { speed, timing: { ease } }, 'disabled-opacity': disabledOpacity }, components: { button: { color, 'secondary-color': secondaryColor, padding, 'border-radius': borderRadius, 'border-width': borderWidth, 'focus-shadow': focusShadow, touch: { padding: touchPadding } }, link: { color: linkColor } } } }) => {\n    const borderColor = variant === 'secondary' ? color : 'transparent';\n    const contrastColor = tryCatch(() => readableColor(color));\n    const hoverColors = getHoverColors(color);\n    const hoverPrimaryColor = hoverColors.background;\n    const hoverContrastColor = hoverColors.foreground;\n    const secondaryHoverColor = tryCatch(() => mix(0.85, secondaryColor, color));\n    let buttonColor = contrastColor;\n    let buttonBackgroundColor = color;\n    if (variant === 'secondary') {\n        buttonColor = color;\n        buttonBackgroundColor = secondaryColor;\n    }\n    else if (variant === 'simple') {\n        if (icon) {\n            buttonColor = 'currentColor';\n            buttonBackgroundColor = 'transparent';\n        }\n        else {\n            buttonColor = color;\n            buttonBackgroundColor = backgroundColor;\n        }\n    }\n    else if (variant === 'link') {\n        buttonColor = linkColor;\n        buttonBackgroundColor = 'transparent';\n    }\n    else if (variant === 'text') {\n        buttonColor = textColor;\n        buttonBackgroundColor = 'transparent';\n    }\n    return css `\n      color: ${buttonColor};\n      background-color: ${buttonBackgroundColor};\n      display: ${variant === 'link' || variant === 'text' ? 'inline' : 'inline-flex'};\n      align-items: center;\n      outline: none;\n      text-decoration: none;\n      transition-property: background-color, color, box-shadow;\n      transition-duration: calc(0.5 * ${speed});\n      transition-timing-function: ${ease};\n      cursor: pointer;\n\n      ${variant !== 'link' && variant !== 'text'\n        ? css `\n            justify-content: center;\n            line-height: 1;\n            border: ${borderWidth} solid ${borderColor};\n            position: relative;\n          `\n        : css `\n            text-align: start;\n            border: none;\n\n            > ${StyledIcon} {\n              vertical-align: bottom;\n            }\n          `}\n\n      & + & {\n        margin-inline-start: ${spacing};\n      }\n\n      /* Not able to combine with selector above. Stylis bug? */\n      & + ${StyledPopover} + & {\n        margin-inline-start: ${spacing};\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          ${variant === 'primary' &&\n        css `\n            background-color: ${hoverPrimaryColor};\n            color: ${hoverContrastColor};\n            text-decoration: none;\n          `}\n\n          ${(variant === 'secondary' || (variant === 'simple' && !icon)) &&\n        css `\n            background-color: ${secondaryHoverColor};\n            text-decoration: none;\n          `}\n\n          ${variant === 'simple' &&\n        icon &&\n        css `\n            ::before {\n              content: '';\n              position: absolute;\n              top: calc(${borderWidth} * -1);\n              bottom: calc(${borderWidth} * -1);\n              left: calc(${borderWidth} * -1);\n              right: calc(${borderWidth} * -1);\n              border-radius: inherit;\n              background-color: currentColor;\n              opacity: 0.15;\n            }\n          `}\n\n          ${(variant === 'link' || variant === 'text') &&\n        css `\n            text-decoration: underline;\n          `}\n        }\n      }\n\n      ${variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        min-height: ${hitAreaMouse};\n        min-width: ${hitAreaMouse};\n        border-radius: calc(${baseBorderRadius} * ${borderRadius});\n        -webkit-user-select: none;\n        user-select: none;\n      `}\n\n      ${compact &&\n        css `\n        min-height: ${hitAreaCompact};\n        min-width: ${hitAreaCompact};\n      `}\n\n      ${!icon &&\n        variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        padding: ${padding};\n      `}\n\n      ${variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        @media (pointer: coarse) {\n          ${!compact &&\n            css `\n            min-height: ${hitAreaFinger};\n            min-width: ${hitAreaFinger};\n          `}\n          border-radius: calc(${baseBorderRadius} * ${borderRadius});\n          ${!icon &&\n            css `\n            padding: ${touchPadding};\n          `}\n        }\n      `}\n\n      &:disabled,\n      &[disabled] {\n        opacity: ${disabledOpacity};\n        cursor: not-allowed;\n        pointer-events: none;\n      }\n\n      &:enabled:focus,\n      &:not([disabled]):focus {\n        box-shadow: ${focusShadow};\n      }\n\n      ${icon &&\n        variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        border-radius: calc(${baseBorderRadius} * ${borderRadius});\n        > svg {\n          display: block;\n        }\n      `}\n\n      ${loading &&\n        css `\n        ${StyledBackdrop} {\n          background-color: ${buttonBackgroundColor};\n          border-radius: inherit;\n        }\n        ${StyledProgressRing} {\n          width: 1em;\n          height: 1em;\n          circle:nth-child(2) {\n            animation-duration: calc(${speed} * 2);\n          }\n        }\n      `}\n    `;\n});\nStyledButton.defaultProps = defaultThemeProp;\nconst Button = forwardRef(({ variant = 'secondary', type = 'button', disabled = false, icon = false, compact = false, href, as, forwardedAs, label, 'aria-label': ariaLabel, loading = false, children, ...restProps }, ref) => {\n    const [buttonEl, setButtonEl] = useElement();\n    const mouseDownEvent = useRef();\n    const buttonRef = useConsolidatedRef(ref, setButtonEl);\n    const showProgress = loading && variant !== 'link' && variant !== 'text';\n    useEffect(() => {\n        return () => {\n            mouseDownEvent.current = undefined;\n        };\n    }, []);\n    return (_jsxs(_Fragment, { children: [_jsxs(StyledButton, { ...restProps, ref: buttonRef, as: as || (href ? 'a' : 'button'), forwardedAs: forwardedAs || (href ? 'a' : 'button'), variant: variant, icon: icon, compact: compact, type: href ? undefined : type, href: href, disabled: disabled && !href, loading: showProgress, \"aria-label\": ariaLabel || label, onMouseDown: (e) => {\n                    restProps.onMouseDown?.(e);\n                    e.persist();\n                    mouseDownEvent.current = e;\n                }, onMouseUp: (e) => {\n                    const shouldFocus = mouseDownEvent.current && !mouseDownEvent.current.defaultPrevented;\n                    mouseDownEvent.current = undefined;\n                    if (shouldFocus && buttonRef.current !== document.activeElement) {\n                        buttonRef.current?.focus();\n                    }\n                    return restProps.onMouseUp?.(e);\n                }, children: [showProgress && _jsx(Progress, { variant: 'ring', placement: 'local' }), children] }), buttonEl && label && (_jsx(Tooltip, { target: buttonEl, showDelay: 'none', hideDelay: 'none', describeTarget: false, children: label }))] }));\n});\nexport default Button;\n//# sourceMappingURL=Button.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCardMedia } from './CardMedia';\nconst defaultProps = {\n    interactive: false,\n    role: 'region'\n};\nexport const StyledCard = styled.article(props => {\n    const { 'border-radius': borderRadius, 'border-color': borderColor, background } = props.theme.components.card;\n    const interactive = props.interactive\n        ? css `\n        &:hover {\n          border: 0;\n          box-shadow: 0 0 0 0.0625rem ${borderColor};\n        }\n        &:focus {\n          border: 0;\n          box-shadow: 0 0 0 0.125rem ${borderColor};\n        }\n      `\n        : undefined;\n    return css `\n    ${StyledPopover} &, &:not(& &) {\n      background-color: ${background};\n      border-radius: ${borderRadius};\n\n      &:focus {\n        outline: none;\n      }\n\n      ${interactive}\n\n      ${StyledCardMedia} {\n        &:first-child img {\n          border-radius: ${borderRadius} ${borderRadius} 0 0;\n        }\n      }\n    }\n  `;\n});\nStyledCard.defaultProps = defaultThemeProp;\nconst Card = forwardRef((props, ref) => {\n    const { children, as, onClick, interactive, role, ...restProps } = props;\n    const interactiveProps = {\n        ...(onClick && {\n            onClick,\n            tabIndex: 0,\n            role: 'button'\n        }),\n        ...(interactive && {\n            tabIndex: 0\n        }),\n        ...(role && { role }),\n        interactive\n    };\n    return (_jsx(Flex, { container: { direction: 'column' }, as: StyledCard, forwardedAs: as, ref: ref, ...interactiveProps, ...restProps, children: children }));\n});\nCard.defaultProps = defaultProps;\nexport default Card;\n//# sourceMappingURL=Card.js.map","import { mix } from 'polished';\nimport { createGlobalStyle, css } from 'styled-components';\nimport { calculateFontSize } from './utils';\nexport const globalSpacingStyles = `\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n`;\nexport const createGlobalRootStyles = ({ base: { scale } }) => {\n    return `\n    :root,\n    :host {\n      height: 100%;\n      -webkit-text-size-adjust: 100%;\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n      font-size: calc(${scale} * 1rem);\n    }\n  `;\n};\nexport const createGlobalBodyStyles = ({ base: { 'font-size': baseFontSize, 'font-scale': baseFontScale, 'font-family': fontFamily, palette: { 'foreground-color': foregroundColor }, 'line-height': lineHeight }, components: { text } }) => {\n    // Can't call a hook here\n    const fontSize = calculateFontSize(baseFontSize, baseFontScale);\n    return `\n    body,\n    :host {\n      min-height: 100%;\n      margin: 0;\n      padding: 0;\n      font-size: ${fontSize[text.primary['font-size']]};\n      font-family: ${fontFamily};\n      color: ${foregroundColor};\n      line-height: ${lineHeight};\n    }\n  `;\n};\nexport default createGlobalStyle(({ theme }) => {\n    const { base: { 'custom-scrollbar': customScrollbar, 'border-radius': borderRadius, palette: { 'foreground-color': foreground, 'scrollbar-track': scrollbarTrack, 'scrollbar-thumb': scrollbarThumb, 'scrollbar-thumb-hover': scrollbarThumbHover }, transparency: { 'transparent-3': transparent } }, components: { 'form-control': { 'background-color': backgroundColor } } } = theme;\n    return css `\n    ${globalSpacingStyles}\n\n    body {\n      overscroll-behavior: none;\n    }\n\n    ::placeholder {\n      color: ${mix(transparent, foreground, backgroundColor)};\n      opacity: unset;\n    }\n\n    ${customScrollbar &&\n        css `\n      * {\n        scrollbar-color: ${scrollbarThumb} ${scrollbarTrack};\n        scrollbar-width: thin;\n      }\n\n      @supports not ((scrollbar-width: thin) or (scrollbar-color: black white)) {\n        /* stylelint-disable unit-allowed-list */\n\n        *::-webkit-scrollbar {\n          width: 12px;\n          height: 12px;\n        }\n\n        *::-webkit-scrollbar-track {\n          background-color: ${scrollbarTrack};\n        }\n\n        *::-webkit-scrollbar-corner {\n          background-color: ${scrollbarTrack};\n          border-bottom-right-radius: inherit;\n        }\n\n        *::-webkit-scrollbar-thumb {\n          background-color: transparent;\n          border: 3px solid transparent;\n          border-radius: calc(1.125 * ${borderRadius});\n          box-shadow: inset 0 0 2px 4px ${scrollbarThumb};\n        }\n\n        *::-webkit-scrollbar-thumb:hover {\n          box-shadow: inset 0 0 2px 4px ${scrollbarThumbHover};\n        }\n\n        *::-webkit-scrollbar-track:horizontal {\n          border-bottom-left-radius: inherit;\n        }\n\n        *::-webkit-scrollbar-track:vertical {\n          border-top-right-radius: inherit;\n        }\n\n        /* stylelint-disable-next-line selector-pseudo-class-no-unknown */\n        *::-webkit-scrollbar-track:not(:corner-present) {\n          border-bottom-right-radius: inherit;\n        }\n\n        /* stylelint-enable unit-allowed-list */\n      }\n    `}\n\n    ${createGlobalRootStyles(theme)}\n\n      ${createGlobalBodyStyles(theme)}\n\n      input,\n      button,\n      select,\n      optgroup,\n      textarea {\n      margin: 0;\n      font-family: inherit;\n      font-size: inherit;\n      line-height: inherit;\n    }\n  `;\n});\n//# sourceMappingURL=GlobalStyle.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nconst prefix = (value) => {\n    if (['between', 'around', 'evenly'].includes(value))\n        return `space-${value}`;\n    if (['start', 'end'].includes(value))\n        return `flex-${value}`;\n    return value;\n};\nconst getContainerStyles = (container) => {\n    if (!container)\n        return '';\n    if (container === true) {\n        return css `\n      display: flex;\n    `;\n    }\n    if (container && typeof container === 'object') {\n        const isRow = !container.direction || container.direction.includes('row');\n        const isReverse = container.direction && container.direction.includes('reverse');\n        return css `\n      display: ${container.inline ? 'inline-flex' : 'flex'};\n\n      ${container.pad !== undefined &&\n            css `\n        /* stylelint-disable function-name-case, function-whitespace-after */\n        padding: ${({ theme: { base: { spacing } } }) => (Array.isArray(container.pad) ? container.pad : [container.pad])\n                .map(p => `calc(${p} * ${spacing})`)\n                .join(' ')};\n\n        /* stylelint-enable function-name-case, function-whitespace-after */\n      `}\n\n      ${container.direction &&\n            css `\n        flex-direction: ${container.direction};\n      `}\n\n      ${container.justify &&\n            css `\n        justify-content: ${prefix(container.justify)};\n      `}\n\n      ${container.wrap &&\n            css `\n        flex-wrap: ${container.wrap};\n      `}\n\n      ${container.alignItems &&\n            css `\n        align-items: ${prefix(container.alignItems)};\n      `}\n\n      ${container.alignContent &&\n            css `\n        align-content: ${prefix(container.alignContent)};\n      `}\n\n      ${container.itemGap &&\n            css `\n          > * {\n            margin-${isRow ? 'inline-start' : 'block-start'}: calc(${container.itemGap} * ${props => props.theme.base.spacing});\n            ${isReverse ? ':last-child' : ':first-child'} {\n              margin-${isRow ? 'inline-start' : 'block-start'}: 0;\n            }\n          }\n        `}\n\n      ${container.gap !== undefined &&\n            css `\n        gap: calc(${container.gap} * ${props => props.theme.base.spacing});\n      `}\n\n      ${container.colGap !== undefined &&\n            css `\n        column-gap: calc(${container.colGap} * ${props => props.theme.base.spacing});\n      `}\n\n      ${container.rowGap !== undefined &&\n            css `\n        row-gap: calc(${container.rowGap} * ${props => props.theme.base.spacing});\n      `}\n    `;\n    }\n};\nconst getItemStyles = (item) => {\n    return css `\n    ${item &&\n        css `\n      max-width: 100%;\n      min-width: 0;\n\n      ${item.grow !== undefined &&\n            css `\n        flex-grow: ${item.grow};\n      `}\n\n      ${item.shrink !== undefined &&\n            css `\n        flex-shrink: ${item.shrink};\n      `}\n\n      ${item.alignSelf &&\n            css `\n        align-self: ${prefix(item.alignSelf)};\n      `}\n\n      ${item.basis &&\n            css `\n        flex-basis: ${item.basis};\n      `}\n    `}\n  `;\n};\nconst breakpointOrder = ['xs', 'sm', 'md', 'lg', 'xl'];\nexport const StyledFlex = styled.div(({ container, item, theme: { base: { breakpoints: themeBreakpoints } }, xs, sm, md, lg, xl }) => {\n    const breakpoints = {\n        xs,\n        sm,\n        md,\n        lg,\n        xl\n    };\n    return css `\n      ${getContainerStyles(container)}\n      ${getItemStyles(item)}\n\n    ${breakpointOrder.map(breakpoint => breakpoints[breakpoint] &&\n        css `\n            @media screen and (min-width: ${themeBreakpoints[breakpoint]}) {\n              ${getContainerStyles(breakpoints[breakpoint]?.container)}\n              ${getItemStyles(breakpoints[breakpoint]?.item)}\n            }\n          `)}\n    `;\n});\nStyledFlex.defaultProps = defaultThemeProp;\nconst Flex = forwardRef((props, ref) => {\n    return _jsx(StyledFlex, { ...props, ref: ref });\n});\nexport default Flex;\n//# sourceMappingURL=Flex.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nconst prefix = (value) => {\n    if (['between', 'around', 'evenly'].includes(value))\n        return `space-${value}`;\n    return value;\n};\nconst getContainerStyles = (gridProps) => {\n    if (!gridProps)\n        return;\n    if (gridProps === true) {\n        return css `\n      display: grid;\n    `;\n    }\n    const { inline, pad, cols, autoCols, rows, autoRows, autoFlow, areas, template, colGap, rowGap, gap, justifyItems, justifyContent, alignItems, alignContent } = gridProps;\n    return css `\n    display: ${inline ? 'inline-grid' : 'grid'};\n\n    ${pad !== undefined &&\n        css `\n      /* stylelint-disable function-name-case, function-whitespace-after */\n      padding: ${({ theme: { base: { spacing } } }) => (Array.isArray(pad) ? pad : [pad]).map(p => `calc(${p} * ${spacing})`).join(' ')};\n\n      /* stylelint-enable function-name-case, function-whitespace-after */\n    `}\n\n    ${cols &&\n        css `\n      grid-template-columns: ${cols};\n    `}\n\n    ${autoCols &&\n        css `\n      grid-auto-columns: ${autoCols};\n    `}\n\n    ${rows &&\n        css `\n      grid-template-rows: ${rows};\n    `}\n\n    ${autoRows &&\n        css `\n      grid-auto-rows: ${autoRows};\n    `}\n\n    ${autoFlow &&\n        css `\n      grid-auto-flow: ${autoFlow};\n    `}\n\n    ${areas &&\n        css `\n      grid-template-areas: ${areas};\n    `}\n\n    ${template &&\n        css `\n      grid-template: ${template};\n    `}\n\n    ${gap !== undefined &&\n        css `\n      gap: calc(${gap} * ${props => props.theme.base.spacing});\n    `}\n\n    ${colGap !== undefined &&\n        css `\n      column-gap: calc(${colGap} * ${props => props.theme.base.spacing});\n    `}\n\n    ${rowGap !== undefined &&\n        css `\n      row-gap: calc(${rowGap} * ${props => props.theme.base.spacing});\n    `}\n\n    ${justifyItems &&\n        css `\n      justify-items: ${justifyItems};\n    `}\n\n    ${justifyContent &&\n        css `\n      justify-content: ${prefix(justifyContent)};\n    `}\n\n    ${alignItems &&\n        css `\n      align-items: ${alignItems};\n    `}\n\n    ${alignContent &&\n        css `\n      align-content: ${prefix(alignContent)};\n    `}\n  `;\n};\nconst getItemStyles = (props) => {\n    if (!props)\n        return;\n    const { colStart, colEnd, colStartEnd, rowStart, rowEnd, rowStartEnd, area, justifySelf, alignSelf } = props;\n    return css `\n    ${colStart &&\n        css `\n      grid-column-start: ${colStart};\n    `}\n\n    ${colEnd &&\n        css `\n      grid-column-end: ${colEnd};\n    `}\n\n    ${colStartEnd &&\n        css `\n      grid-column: ${colStartEnd};\n    `}\n\n    ${rowStart &&\n        css `\n      grid-row-start: ${rowStart};\n    `}\n\n    ${rowEnd &&\n        css `\n      grid-row-end: ${rowEnd};\n    `}\n\n    ${rowStartEnd &&\n        css `\n      grid-row: ${rowStartEnd};\n    `}\n\n    ${area &&\n        css `\n      grid-area: ${area};\n    `}\n\n    ${justifySelf &&\n        css `\n      justify-self: ${justifySelf};\n    `}\n\n    ${alignSelf &&\n        css `\n      align-self: ${alignSelf};\n    `}\n  `;\n};\nconst breakpointOrder = ['xs', 'sm', 'md', 'lg', 'xl'];\nexport const StyledGrid = styled.div(({ container, item, theme: { base: { breakpoints: themeBreakpoints } }, xs, sm, md, lg, xl }) => {\n    const breakpoints = {\n        xs,\n        sm,\n        md,\n        lg,\n        xl\n    };\n    return css `\n      ${getContainerStyles(container)}\n      ${getItemStyles(item)}\n\n    ${breakpointOrder.map(breakpoint => breakpoints[breakpoint] &&\n        css `\n            @media screen and (min-width: ${themeBreakpoints[breakpoint]}) {\n              ${getContainerStyles(breakpoints[breakpoint]?.container)}\n              ${getItemStyles(breakpoints[breakpoint]?.item)}\n            }\n          `)}\n    `;\n});\nStyledGrid.defaultProps = defaultThemeProp;\nconst Grid = forwardRef((props, ref) => {\n    return _jsx(StyledGrid, { ...props, ref: ref });\n});\nexport default Grid;\n//# sourceMappingURL=Grid.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect } from 'react';\nimport styled from 'styled-components';\nconst iconRegistry = new Map();\nexport const registerIcon = (...icons) => {\n    icons.forEach(({ name, ...iconDef }) => {\n        if (!iconRegistry.has(name))\n            iconRegistry.set(name, iconDef);\n    });\n};\nexport const forceRegisterIcon = (...icons) => {\n    icons.forEach(({ name, ...iconDef }) => {\n        iconRegistry.set(name, iconDef);\n    });\n};\nexport const StyledIcon = styled.svg `\n  display: inline-block;\n  fill: currentColor;\n  height: 1.125rem;\n  width: 1.125rem;\n  vertical-align: middle;\n`;\nconst emptyIconDefinition = Object.freeze({ Component: () => null });\nconst Icon = forwardRef(({ name, ...restProps }, ref) => {\n    const [iconDef, setIconDef] = useState(iconRegistry.get(name) ?? emptyIconDefinition);\n    useEffect(() => {\n        if (iconRegistry.has(name)) {\n            setIconDef(iconRegistry.get(name));\n            return;\n        }\n        const controller = new AbortController();\n        (async () => {\n            try {\n                const module = await import(`./icons/${encodeURIComponent(name)}.icon`);\n                if (module.name !== name || !module.Component)\n                    throw new Error('Malformed icon definition');\n                registerIcon(module);\n            }\n            catch {\n                registerIcon({ name, ...emptyIconDefinition });\n            }\n            if (!controller.signal.aborted)\n                setIconDef(iconRegistry.get(name) ?? emptyIconDefinition);\n        })();\n        return () => controller.abort();\n    }, [name]);\n    return (_jsx(StyledIcon, { role: 'presentation', ...restProps, viewBox: iconDef.viewBox, ref: ref, children: _jsx(iconDef.Component, {}) }));\n});\nexport default Icon;\n//# sourceMappingURL=Icon.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { hideVisually } from 'polished';\nexport const StyledVisuallyHiddenText = styled.span `\n  ${hideVisually}\n  -webkit-user-select: none;\n  user-select: none;\n`;\nconst VisuallyHiddenText = forwardRef((props, ref) => (_jsx(StyledVisuallyHiddenText, { ...props, ref: ref })));\nexport default VisuallyHiddenText;\n//# sourceMappingURL=VisuallyHiddenText.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rgba } from 'polished';\nimport Flex from '../Flex';\nimport Icon, { StyledIcon, registerIcon } from '../Icon';\nimport * as galaxyIcon from '../Icon/icons/galaxy.icon';\nimport Text from '../Text';\nimport { tryCatch } from '../../utils';\nimport { useI18n } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nregisterIcon(galaxyIcon);\nexport const StyledEmptyState = styled.div(({ theme }) => {\n    const color = tryCatch(() => rgba(theme.base.palette['foreground-color'], theme.base.transparency['transparent-2']));\n    return css `\n    height: 100%;\n\n    ${StyledIcon} {\n      font-size: 1.5rem;\n      height: 1.5rem;\n      width: 1.5rem;\n      color: ${color};\n    }\n  `;\n});\nStyledEmptyState.defaultProps = defaultThemeProp;\nconst EmptyState = forwardRef((props, ref) => {\n    const t = useI18n();\n    const { message = t('no_items'), ...restProps } = props;\n    return (_jsxs(Flex, { ...restProps, as: StyledEmptyState, ref: ref, container: { direction: 'column', alignItems: 'center', justify: 'center', gap: 1 }, children: [_jsx(Icon, { name: 'galaxy' }), _jsx(Text, { variant: 'secondary', children: message })] }));\n});\nexport default EmptyState;\n//# sourceMappingURL=EmptyState.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Text from '../Text';\nimport Flex from '../Flex';\nexport const StyledMetaList = styled.ul(({ wrapItems }) => {\n    return css `\n    list-style: none;\n    overflow: hidden;\n\n    ${!wrapItems &&\n        css `\n      white-space: nowrap;\n    `}\n  `;\n});\nexport const StyledMetaListItem = styled.li(({ wrapItems }) => {\n    return css `\n    min-width: 0;\n    display: inline-block;\n\n    ${wrapItems\n        ? css `\n          overflow-wrap: break-word;\n        `\n        : css `\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        `}\n\n    &[role='separator'] {\n      -webkit-user-select: none;\n      user-select: none;\n    }\n  `;\n});\nconst MetaList = forwardRef((props, ref) => {\n    const { items, wrapItems = true, ...restProps } = props;\n    return (_jsx(Flex, { as: StyledMetaList, container: { colGap: 0.5, alignItems: 'center', wrap: wrapItems ? 'wrap' : 'nowrap' }, wrapItems: wrapItems, ref: ref, ...restProps, children: items.flatMap((item, i, arr) => item\n            ? [\n                _jsx(Text, { as: StyledMetaListItem, variant: 'secondary', wrapItems: wrapItems, children: item }, `${i + 0}`)\n            ].concat(i !== arr.length - 1\n                ? [\n                    _jsx(Text, { as: StyledMetaListItem, role: 'separator', variant: 'secondary', children: \"\\u2022\" }, `${i + 0}-sep`)\n                ]\n                : [])\n            : []) }));\n});\nexport default MetaList;\n//# sourceMappingURL=MetaList.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Grid from '../Grid';\nimport { defaultThemeProp } from '../../theme';\nimport { StyledProgressRing } from '../Progress';\nexport const StyledVisual = styled.div `\n  > ${StyledProgressRing}, img {\n    display: block;\n    object-fit: cover;\n    width: 2rem;\n    height: 2rem;\n  }\n`;\nStyledVisual.defaultProps = defaultThemeProp;\nexport const StyledPrimary = styled(Grid)(({ theme, isString, overflowStrategy }) => {\n    return css `\n    ${overflowStrategy === 'ellipsis'\n        ? css `\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        `\n        : css `\n          word-break: break-word;\n        `}\n\n    ${isString &&\n        css `\n      font-weight: ${theme.base['font-weight']['semi-bold']};\n    `}\n  `;\n});\nStyledPrimary.defaultProps = defaultThemeProp;\nexport const StyledSecondary = styled(Grid)(({ overflowStrategy }) => {\n    return css `\n    ${overflowStrategy === 'ellipsis'\n        ? css `\n          overflow: hidden;\n          text-overflow: ellipsis;\n        `\n        : css `\n          word-break: break-word;\n        `}\n  `;\n});\nexport const StyledSummaryItemActions = styled.div `\n  white-space: nowrap;\n`;\nexport const StyledSummaryItem = styled.div ``;\nconst getColumns = ({ visual, actions }) => {\n    return `${visual ? 'auto ' : ''}minmax(0, 1fr)${actions ? ' auto' : ''}`;\n};\nconst getAreas = ({ secondary, visual, actions }) => {\n    return `\"${visual ? 'visual ' : ''}primary${actions ? ' actions' : ''}\"${secondary ? `\\n\"${visual ? 'visual ' : ''}secondary${actions ? ' actions' : ''}\"` : ''}`;\n};\nconst SummaryItem = forwardRef(({ visual, primary, secondary, actions, container, overflowStrategy = 'wrap', as, ...restProps }, ref) => {\n    return (_jsxs(Grid, { ...restProps, ref: ref, container: {\n            cols: getColumns({ visual, actions }),\n            colGap: 2,\n            areas: getAreas({ secondary, visual, actions }),\n            ...container\n        }, as: StyledSummaryItem, forwardedAs: as, children: [visual && (_jsx(Grid, { as: StyledVisual, item: { area: 'visual', alignSelf: 'center' }, children: visual })), _jsx(StyledPrimary, { item: { area: 'primary', alignSelf: secondary ? 'end' : 'center' }, isString: typeof primary === 'string', overflowStrategy: overflowStrategy, children: primary }), secondary && (_jsx(StyledSecondary, { item: { area: 'secondary', alignSelf: 'start' }, overflowStrategy: overflowStrategy, children: secondary })), actions && (_jsx(Grid, { as: StyledSummaryItemActions, item: { area: 'actions', alignSelf: 'center' }, children: actions }))] }));\n});\nexport default SummaryItem;\n//# sourceMappingURL=SummaryItem.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { mix, transparentize } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils/utils';\nimport { calculateFontSize } from '../../styles';\nexport const StyledCount = styled.span(props => {\n    const { foreground, background } = props.variant === 'default'\n        ? props.theme.components.badges.count.base\n        : props.theme.components.badges.count[props.variant];\n    const invertedBackground = tryCatch(() => transparentize(0.5, mix(0.2, background, '#ffffff')));\n    const displayBackground = props.variant === 'inverted' ? invertedBackground : background;\n    const borderRadius = props.theme.base['border-radius'];\n    const { spacing } = props.theme.base;\n    const fontSize = calculateFontSize(props.theme.base['font-size'], props.theme.base['font-scale']);\n    return css `\n    background: ${displayBackground};\n    border-radius: calc(1.125 * ${borderRadius});\n    color: ${foreground};\n    display: inline-block;\n    font-size: ${fontSize.xxs};\n    font-weight: bold;\n    line-height: normal;\n    text-align: center;\n    ${props.children.length > 1 &&\n        css `\n      padding: 0 ${spacing};\n    `}\n    ${props.children.length === 1 &&\n        css `\n      width: 1.125rem;\n    `}\n  `;\n});\nStyledCount.defaultProps = defaultThemeProp;\n// Replace this with Intl.NumberDisplay when roundingMode is supported.\n/* eslint-disable yoda */\nconst getLabel = (val) => {\n    if (val < 1000)\n        return '';\n    if (1000 <= val && val < 1000000)\n        return 'K';\n    if (1000000 <= val && val < 1000000000)\n        return 'M';\n    if (1000000000 <= val && val < 1000000000000)\n        return 'B';\n    if (1000000000000 <= val && val < 1000000000000000)\n        return 'T';\n    return '';\n};\n/* eslint-enable yoda */\nconst truncateValue = (val) => {\n    for (let magnitude = 3; magnitude < 15; magnitude += 3) {\n        if (val < 10 ** (magnitude + 1)) {\n            return `${`${val}`.slice(0, 1)}.${`${val}`.slice(1, 2)}${getLabel(val)}`;\n        }\n        if (val < 10 ** (magnitude + 2)) {\n            return `${`${val}`.slice(0, 2)}${getLabel(val)}`;\n        }\n        if (val < 10 ** (magnitude + 3)) {\n            return `${`${val}`.slice(0, 3)}${getLabel(val)}`;\n        }\n    }\n    return '999T+';\n};\nconst formatValue = (val) => {\n    const absVal = Math.abs(val);\n    if (absVal < 1000)\n        return `${val}`;\n    return `${val < 0 ? '-' : ''}${truncateValue(absVal)}`;\n};\nconst Count = forwardRef((props, ref) => {\n    const { variant = 'default', children, ...restProps } = props;\n    return Number.isInteger(children) ? (_jsx(StyledCount, { variant: variant, ...restProps, ref: ref, children: formatValue(children) })) : null;\n});\nexport default Count;\n//# sourceMappingURL=Count.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledMark = styled.mark(({ theme }) => {\n    return css `\n    color: ${theme.base.colors.black};\n    background-color: ${theme.components.mark['background-color']};\n    font-weight: ${theme.components.mark['font-weight']};\n  `;\n});\nStyledMark.defaultProps = defaultThemeProp;\nconst Mark = props => {\n    return _jsx(StyledMark, { ...props });\n};\nexport default Mark;\n//# sourceMappingURL=Mark.js.map","import { hideVisually, mix, readableColor, rgba } from 'polished';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { StyledEmptyState } from '../EmptyState';\nimport { StyledIcon } from '../Icon';\nimport { StyledGrid } from '../Grid';\nimport { StyledBareButton } from '../Button/BareButton';\nimport { tryCatch } from '../../utils';\nimport { StyledText } from '../Text';\nimport { StyledVisuallyHiddenText } from '../VisuallyHiddenText/VisuallyHiddenText';\nimport Button from '../Button';\nconst listMaxHeight = '50vh';\nexport const StyledExpandButton = styled(Button) `\n  align-self: center;\n`;\nexport const StyledItemLabel = styled.label(({ theme }) => {\n    const hoverCheckColor = tryCatch(() => rgba(theme.components['radio-check'][':checked']['background-color'], theme.base.transparency['transparent-5']));\n    const checkedBackground = theme.components['radio-check'][':checked']['background-color'];\n    const checkedForeground = tryCatch(() => readableColor(checkedBackground));\n    return css `\n    padding: calc(0.5 * ${theme.base.spacing}) ${theme.base.spacing};\n    cursor: pointer;\n\n    &:hover {\n      & > input[type='radio']:not(:checked) + ${StyledIcon} {\n        color: ${hoverCheckColor};\n      }\n\n      & > input[type='checkbox'] + ${StyledIcon} {\n        border-color: ${theme.components['form-control'][':hover']['border-color']};\n      }\n    }\n\n    > ${StyledGrid} {\n      flex-grow: 1;\n    }\n\n    > input {\n      ${hideVisually}\n\n      & + ${StyledIcon} {\n        margin-inline-start: 0;\n        flex-shrink: 0;\n      }\n\n      &[type='radio'] + ${StyledIcon} {\n        color: transparent;\n      }\n\n      &[type='radio']:checked + ${StyledIcon} {\n        color: ${checkedBackground};\n      }\n\n      &[type='checkbox'] + ${StyledIcon} {\n        border: 0.0625rem solid ${theme.components['radio-check']['border-color']};\n        border-radius: min(\n          calc(${theme.base['border-radius']} * ${theme.components.checkbox['border-radius']}),\n          0.25rem\n        );\n        color: transparent;\n        background-color: ${theme.components['radio-check']['background-color']};\n      }\n\n      &[type='checkbox']:checked + ${StyledIcon} {\n        background-color: ${checkedBackground};\n        border-color: ${theme.components['radio-check'][':checked']['border-color']};\n        color: ${checkedForeground};\n      }\n    }\n  `;\n});\nStyledItemLabel.defaultProps = defaultThemeProp;\nexport const StyledMenuItem = styled.li(({ theme: { base, components }, isParentItem }) => {\n    const activeColor = tryCatch(() => mix(0.85, base.palette['primary-background'], base.palette.interactive));\n    const hoverColor = tryCatch(() => mix(0.95, base.palette['primary-background'], base.palette.interactive));\n    return css `\n      min-height: ${base['hit-area']['mouse-min']};\n\n      @media (pointer: coarse) {\n        min-height: ${base['hit-area']['finger-min']};\n      }\n\n      &:focus-within {\n        background-color: ${activeColor};\n      }\n\n      &:hover:not([aria-disabled='true']) {\n        background-color: ${hoverColor};\n      }\n\n      > button:first-child,\n      > a:first-child {\n        display: block;\n        width: 100%;\n        padding: calc(0.5 * ${base.spacing}) ${base.spacing};\n        text-align: start;\n        text-decoration: none;\n        color: inherit;\n        ${isParentItem &&\n        css `\n          padding-inline-start: calc(1.125rem + 2 * ${base.spacing});\n        `}\n      }\n\n      &[aria-disabled='true'] {\n        label,\n        ${StyledBareButton} {\n          background-color: ${components['form-control'][':disabled']['background-color']};\n          opacity: ${base['disabled-opacity']};\n        }\n      }\n    `;\n});\nStyledMenuItem.defaultProps = defaultThemeProp;\nexport const StyledAncestors = styled.div `\n  ${StyledIcon} {\n    width: 1em;\n    height: 1em;\n  }\n\n  & > ${StyledText} {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\nexport const StyledVisibilityHidden = styled.p `\n  ${hideVisually}\n`;\nexport const StyledSeparator = styled.li(({ theme }) => {\n    return css `\n    height: 0.0625rem;\n    background-color: ${theme.base.palette['border-line']};\n    margin: ${theme.base.spacing} 0;\n  `;\n});\nStyledSeparator.defaultProps = defaultThemeProp;\nexport const StyledMenuGroupList = styled.ul(({ theme }) => {\n    return css `\n    ${StyledMenuItem} button {\n      padding-inline-start: calc(1.5 * ${theme.base.spacing});\n    }\n  `;\n});\nStyledMenuGroupList.defaultProps = defaultThemeProp;\nexport const StyledMenuGroupHeader = styled.div(({ theme }) => {\n    return css `\n    min-height: ${theme.base['hit-area']['mouse-min']};\n    font-weight: ${theme.base['font-weight']['semi-bold']};\n    background-color: ${theme.base.palette['secondary-background']};\n\n    @media (pointer: coarse) {\n      min-height: ${theme.base['hit-area']['finger-min']};\n    }\n  `;\n});\nStyledMenuGroupHeader.defaultProps = defaultThemeProp;\nexport const StyledMenuListHeader = styled.legend(({ theme: { base } }) => {\n    const hoverColor = tryCatch(() => mix(0.95, base.palette['primary-background'], base.palette.interactive));\n    const activeColor = tryCatch(() => mix(0.85, base.palette['primary-background'], base.palette.interactive));\n    return css `\n    width: 100%;\n    background-color: ${base.palette['primary-background']};\n\n    &:first-child {\n      border-top-left-radius: inherit;\n      border-top-right-radius: inherit;\n    }\n\n    &:last-child {\n      border-bottom-left-radius: inherit;\n      border-bottom-right-radius: inherit;\n    }\n\n    &:focus-within {\n      box-shadow: inset ${base.shadow.focus};\n      background-color: ${activeColor};\n    }\n\n    &:hover:not([aria-disabled='true']):not([data-current='true']) {\n      background-color: ${hoverColor};\n    }\n\n    & > ${StyledBareButton}, & > button {\n      color: ${base.palette['foreground-color']};\n      width: 100%;\n      padding: calc(0.5 * ${base.spacing}) ${base.spacing};\n      text-align: start;\n      border-radius: inherit;\n\n      > ${StyledGrid} {\n        grid-column-gap: ${base.spacing};\n      }\n\n      ${StyledIcon} {\n        /* Fixes vertical align issue increasing box size beyond square */\n        display: block;\n      }\n    }\n  `;\n});\nStyledMenuListHeader.defaultProps = defaultThemeProp;\nexport const StyledMenuList = styled.ul(({ theme }) => css `\n    overflow-x: hidden;\n    overflow-y: auto;\n    list-style: none;\n    height: 100%;\n    border-radius: inherit;\n\n    ${StyledEmptyState} {\n      padding: ${theme.base.spacing};\n      height: auto;\n    }\n\n    li:not(:first-child):not([role='presentation']) > ${StyledMenuGroupHeader} {\n      margin-block-start: ${theme.base.spacing};\n    }\n  `);\nStyledMenuList.defaultProps = defaultThemeProp;\nexport const StyledMenuListContainer = styled.fieldset(({ theme }) => {\n    return css `\n    background-color: ${theme.base.palette['primary-background']};\n    max-height: ${listMaxHeight};\n    border: 0;\n    border-radius: inherit;\n  `;\n});\nStyledMenuListContainer.defaultProps = defaultThemeProp;\nexport const StyledFlyoutMenuListContainer = styled(StyledMenuListContainer) `\n  min-width: 10rem;\n`;\nexport const StyledLoadingItem = styled.li `\n  display: block;\n  position: relative;\n  height: 2.8rem;\n`;\nexport const StyledMenuListWrapper = styled.div(({ theme }) => css `\n    position: relative;\n    overflow: hidden;\n    transition: height ${theme.base.animation.speed} ${theme.base.animation.timing.ease};\n    max-height: ${listMaxHeight};\n\n    & > fieldset:first-child {\n      position: relative;\n    }\n\n    &:first-child {\n      border-top-left-radius: inherit;\n      border-top-right-radius: inherit;\n    }\n\n    &:last-child {\n      border-bottom-left-radius: inherit;\n      border-bottom-right-radius: inherit;\n    }\n  `);\nStyledMenuListWrapper.defaultProps = defaultThemeProp;\nexport const StyledMenu = styled.div(({ theme }) => {\n    const borderStyle = `0.0625rem solid ${theme.base.palette['border-line']}`;\n    const activeColor = tryCatch(() => mix(0.85, theme.base.palette['primary-background'], theme.base.palette.interactive));\n    return css `\n    &:first-child {\n      border-top-left-radius: inherit;\n      border-top-right-radius: inherit;\n    }\n\n    &:last-child {\n      border-bottom-left-radius: inherit;\n      border-bottom-right-radius: inherit;\n    }\n\n    &[data-active-scope='true'] [data-current='true'] {\n      background-color: ${activeColor};\n    }\n\n    ${StyledVisuallyHiddenText}:first-child {\n      + ${StyledMenuListWrapper}, + header {\n        border-top-left-radius: inherit;\n        border-top-right-radius: inherit;\n      }\n    }\n\n    > header,\n    > footer {\n      padding: ${theme.base.spacing};\n    }\n\n    > header {\n      border-bottom: ${borderStyle};\n    }\n\n    > footer {\n      border-top: ${borderStyle};\n    }\n  `;\n});\nStyledMenu.defaultProps = defaultThemeProp;\n//# sourceMappingURL=Menu.styles.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useCallback, forwardRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useOuterEvent, useConsolidatedRef, usePrevious } from '../../hooks';\nimport { reflow } from '../../utils';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledDrawer = styled.div(props => {\n    const { state, shadow, position, placement, transitionSpeed, size, theme } = props;\n    let dimension = 'horizontal';\n    let axis = 'X';\n    let anchor = 'top';\n    if (placement === 'top' || placement === 'bottom') {\n        dimension = 'vertical';\n        axis = 'Y';\n        anchor = 'left';\n    }\n    const translate = state === 'open' || state === 'opening' ? 0 : '100%';\n    const speed = transitionSpeed || theme.base.animation.speed;\n    return css `\n    z-index: ${theme.base['z-index'].drawer};\n    position: ${position};\n    ${placement}: 0;\n    ${anchor}: 0;\n    height: ${dimension === 'vertical' ? size : '100%'};\n    width: ${dimension === 'horizontal' ? size : '100%'};\n    transition-property: transform, box-shadow, opacity;\n    transition-duration: max(${speed}, 0.0001s);\n    transition-timing-function: ${theme.base.animation.timing.ease};\n    transform: ${state === 'open'\n        ? 'none'\n        : `translate${axis}(${placement === 'top' || placement === 'left' ? '-' : ''}${translate})`};\n\n    ${shadow &&\n        css `\n      box-shadow: ${theme.base.shadow.high};\n    `}\n  `;\n});\nStyledDrawer.defaultProps = defaultThemeProp;\nconst Drawer = forwardRef((props, ref) => {\n    const { open = false, shadow = false, position = 'absolute', children, placement = 'right', transitionSpeed, size = '100%', onAfterOpen, onAfterClose, onBeforeOpen, onBeforeClose, onOuterClick, nullWhenClosed = false, ...restProps } = props;\n    const drawerRef = useConsolidatedRef(ref);\n    const [state, setState] = useState(open ? 'open' : 'closed');\n    let prevState = usePrevious(state);\n    if (!prevState)\n        prevState = state;\n    useOuterEvent('mousedown', [drawerRef.current], useCallback(() => {\n        if (open)\n            onOuterClick?.();\n    }, [open, onOuterClick]));\n    useEffect(() => {\n        if (open && (state === 'closed' || state === 'closing')) {\n            onBeforeOpen?.();\n            reflow(drawerRef.current);\n            setState('opening');\n        }\n        else if (!open && (state === 'open' || state === 'opening')) {\n            onBeforeClose?.();\n            setState('closing');\n        }\n        else if (open && state === 'open' && prevState !== 'open') {\n            onAfterOpen?.();\n        }\n        else if (!open && state === 'closed' && prevState !== 'closed') {\n            onAfterClose?.();\n        }\n    }, [open, state, prevState, onBeforeOpen, onBeforeClose, onAfterOpen, onAfterClose]);\n    const onTransitionEnd = useCallback((e) => {\n        if (e.target !== drawerRef.current || e.propertyName !== 'transform')\n            return;\n        setState(open ? 'open' : 'closed');\n    }, [open]);\n    return state === 'closed' && !open && nullWhenClosed ? null : (_jsx(StyledDrawer, { ref: drawerRef, position: position, shadow: shadow && open, transitionSpeed: transitionSpeed, placement: placement, size: size, open: open, state: state, onTransitionEnd: onTransitionEnd, ...restProps, children: children }));\n});\nexport default Drawer;\n//# sourceMappingURL=Drawer.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { useConsolidatedRef, useUID, useFocusWithin, useDirection } from '../../hooks';\nimport Button, { StyledButton } from '../Button';\nimport Popover, { StyledPopover } from '../Popover';\nimport Menu from '../Menu';\nimport Icon, { registerIcon } from '../Icon';\nimport * as arrowMicroDownIcon from '../Icon/icons/arrow-micro-down.icon';\nimport Text from '../Text';\nimport { Count } from '../Badges';\nregisterIcon(arrowMicroDownIcon);\nconst StyledMenuButton = styled.button(({ theme: { base: { spacing } } }) => {\n    return css `\n      gap: ${spacing};\n      flex-shrink: 0;\n      white-space: nowrap;\n\n      & + ${StyledPopover} + ${StyledButton} {\n        margin-inline-start: ${spacing};\n      }\n    `;\n});\nStyledMenuButton.defaultProps = defaultThemeProp;\nconst StyledMenuButtonPopover = styled(Popover) `\n  min-width: 20ch;\n`;\nconst MenuButton = forwardRef((props, ref) => {\n    const uid = useUID();\n    const { id = uid, text, menu, popover, onClick, onKeyDown, icon, count, iconOnly = false, ...restProps } = props;\n    const [isOpen, setIsOpen] = useState(false);\n    const buttonRef = useConsolidatedRef(ref);\n    const popoverRef = useConsolidatedRef(popover?.ref);\n    const menuRef = useConsolidatedRef(menu?.ref);\n    // FIXME: Type assertion required for issue in useFocusWithin generic\n    useFocusWithin([popoverRef, buttonRef], useCallback(isFocused => {\n        if (!isFocused)\n            setIsOpen(false);\n    }, []));\n    const { rtl } = useDirection();\n    return (_jsxs(_Fragment, { children: [_jsxs(Button, { as: StyledMenuButton, ...restProps, id: id, ref: buttonRef, \"aria-expanded\": isOpen, \"aria-haspopup\": 'menu', \"aria-controls\": `${id}-popover`, \"aria-label\": text, label: iconOnly && !isOpen ? text : undefined, onClick: (e) => {\n                    // clickCount is 0 when triggered by keyboard.\n                    const clickCount = e.detail;\n                    // Close the menu if it is open and either:\n                    //   It is a *mouse* click on the button.\n                    //   Or, the menu mode is not multiselect.\n                    if (isOpen && (clickCount > 0 || menu?.mode !== 'multi-select')) {\n                        setIsOpen(false);\n                    }\n                    else {\n                        setIsOpen(true);\n                    }\n                    onClick?.(e);\n                }, onKeyDown: (e) => {\n                    if (e.key === 'Escape')\n                        setIsOpen(false);\n                    onKeyDown?.(e);\n                }, icon: iconOnly, children: [icon && _jsx(Icon, { name: icon }), !iconOnly && (_jsxs(Text, { children: [text, \" \", count !== undefined && _jsx(Count, { children: count }), text && _jsx(Icon, { name: 'arrow-micro-down' })] }))] }), _jsx(StyledMenuButtonPopover, { placement: rtl ? 'bottom-end' : 'bottom-start', id: `${id}-popover`, ...popover, hideOnTargetHidden: true, show: !!menu && isOpen, target: buttonRef.current, ref: popoverRef, children: menu && (_jsx(Menu, { ...menu, ref: menuRef, items: menu.items, onItemClick: (itemId, e) => {\n                        if (menu.mode !== 'multi-select' &&\n                            e\n                                .detail > 0) {\n                            setIsOpen(false);\n                        }\n                        menu.onItemClick?.(itemId, e);\n                    }, focusControlEl: buttonRef.current || undefined })) })] }));\n});\nexport default MenuButton;\n//# sourceMappingURL=MenuButton.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport dompurify from 'dompurify';\nimport { StyledPopover } from '../Popover';\nimport { defaultThemeProp } from '../../theme';\nimport { calculateFontSize } from '../../styles';\nimport { sameOrigin } from '../../utils';\nexport const listStyles = css `\n  ul,\n  ol {\n    padding-inline-start: 2.5rem;\n  }\n\n  li {\n    margin: 0.5rem 0;\n  }\n\n  ul li {\n    ul {\n      margin-inline-start: 1rem;\n      list-style-type: circle;\n    }\n\n    ul ul {\n      margin-inline-start: 2rem;\n      list-style-type: square;\n    }\n\n    ul ul ul {\n      margin-inline-start: 3rem;\n      list-style-type: disc;\n    }\n  }\n\n  ol li {\n    ol {\n      margin-inline-start: 1rem;\n      list-style-type: lower-alpha;\n    }\n\n    ol ol {\n      margin-inline-start: 2rem;\n      list-style-type: lower-roman;\n    }\n\n    ol ol ol {\n      margin-inline-start: 3rem;\n      list-style-type: decimal;\n    }\n  }\n`;\nexport const getTableStyles = (theme) => css `\n  border-collapse: collapse;\n\n  td {\n    border: 0.0625rem solid ${theme.base.palette['border-line']};\n    min-width: 6.25rem;\n  }\n\n  tr:first-child {\n    td:first-child {\n      border-top-left-radius: 0.125rem;\n    }\n\n    td:last-child {\n      border-top-right-radius: 0.125rem;\n    }\n  }\n\n  tr:last-child {\n    td:first-child {\n      border-bottom-left-radius: 0.125rem;\n    }\n\n    td:last-child {\n      border-bottom-right-radius: 0.125rem;\n    }\n  }\n`;\nexport const getHtmlStyles = (theme) => {\n    const { base: { 'font-size': baseFontSize, 'font-scale': baseFontScale, palette }, components: { text } } = theme;\n    const fontSize = calculateFontSize(baseFontSize, baseFontScale);\n    return `\n    ${listStyles}\n    table {\n      ${getTableStyles(theme)}\n    }\n    img {\n      max-width: 100%;\n      height: auto;\n      border-radius: 0.25rem;\n    }\n    a {\n      color: ${palette.interactive};\n    }\n    pre {\n      white-space: break-spaces;\n    }\n    p {\n      min-height: ${fontSize[text.primary['font-size']]};\n    }\n    h1 {\n      font-size: ${fontSize[text.h1['font-size']]};\n      font-weight: ${text.h1['font-weight']};\n      min-height: ${fontSize[text.h1['font-size']]};\n    }\n    h2 {\n      font-size: ${fontSize[text.h2['font-size']]};\n      font-weight: ${text.h2['font-weight']};\n      min-height: ${fontSize[text.h2['font-size']]};\n    }\n    h3 {\n      font-size: ${fontSize[text.h3['font-size']]};\n      font-weight: ${text.h3['font-weight']};\n      min-height: ${fontSize[text.h3['font-size']]};\n    }\n    h4 {\n      font-size: ${fontSize[text.h4['font-size']]};\n      font-weight: ${text.h4['font-weight']};\n      min-height: ${fontSize[text.h4['font-size']]};\n    }\n    h5 {\n      font-size: ${fontSize[text.h5['font-size']]};\n      font-weight: ${text.h5['font-weight']};\n      min-height: ${fontSize[text.h5['font-size']]};\n    }\n    h6 {\n      font-size: ${fontSize[text.h6['font-size']]};\n      font-weight: ${text.h6['font-weight']};\n      min-height: ${fontSize[text.h6['font-size']]};\n    }\n  `;\n};\nexport const StyledHTML = styled.div(({ theme }) => {\n    return css `\n    width: 100%;\n    overflow-x: auto;\n    overflow-wrap: break-word;\n    ${getHtmlStyles(theme)}\n\n    ${StyledPopover} ul {\n      ul {\n        padding-inline-start: 0;\n      }\n      ol {\n        padding-inline-start: 0;\n      }\n    }\n\n    ${StyledPopover} li {\n      margin: 0;\n    }\n  `;\n});\nStyledHTML.defaultProps = defaultThemeProp;\nconst targetBlankSet = new WeakSet();\ndompurify.addHook('beforeSanitizeAttributes', node => {\n    // Can be passed text nodes\n    if (!(node instanceof HTMLElement || node instanceof SVGElement))\n        return;\n    node.removeAttribute('class');\n    if (node.tagName === 'A' &&\n        node.hasAttribute('href') &&\n        node.getAttribute('target') === '_blank') {\n        targetBlankSet.add(node);\n    }\n});\ndompurify.addHook('afterSanitizeAttributes', node => {\n    if (node.tagName === 'A' && node.hasAttribute('href')) {\n        const href = node.getAttribute('href');\n        let fullURL;\n        try {\n            fullURL = new URL(href, window.location.href);\n        }\n        catch (e) {\n            return;\n        }\n        if (!sameOrigin(window.location, fullURL)) {\n            node.setAttribute('target', '_blank');\n            node.setAttribute('rel', 'noopener');\n        }\n        else if (targetBlankSet.has(node)) {\n            node.setAttribute('target', '_blank');\n            targetBlankSet.delete(node);\n        }\n    }\n});\nconst HTML = forwardRef(({ content, customTags, ...restProps }, ref) => {\n    const [mounted, setMounted] = useState(false);\n    const sanitizedHtml = useMemo(() => {\n        // Don't render content on the server at all.\n        return mounted\n            ? dompurify.sanitize(content, {\n                CUSTOM_ELEMENT_HANDLING: {\n                    tagNameCheck: customTags ? tagName => customTags.includes(tagName) : null\n                }\n            })\n            : '';\n    }, [content, customTags, mounted]);\n    useEffect(() => {\n        setMounted(true);\n    }, []);\n    return (_jsx(StyledHTML, { ...restProps, dangerouslySetInnerHTML: { __html: sanitizedHtml }, ref: ref }));\n});\nexport default HTML;\n//# sourceMappingURL=HTML.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCard } from './Card';\nexport const StyledCardFooter = styled.footer(({ theme }) => {\n    return css `\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n    }\n  `;\n});\nStyledCardFooter.defaultProps = defaultThemeProp;\nconst CardFooter = (props) => {\n    const { children, justify, ...restProps } = props;\n    return (_jsx(Flex, { as: StyledCardFooter, container: {\n            wrap: 'wrap',\n            alignItems: 'center',\n            justify\n        }, ...restProps, children: children }));\n};\nexport default CardFooter;\n//# sourceMappingURL=CardFooter.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCard } from './Card';\nimport { StyledCardFooter } from './CardFooter';\nexport const StyledCardContent = styled.div(({ theme }) => {\n    return css `\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      position: relative;\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      & + &,\n      & + ${StyledCardFooter} {\n        padding-block-start: 0;\n      }\n    }\n  `;\n});\nStyledCardContent.defaultProps = defaultThemeProp;\nconst CardContent = ({ children, container, ...restProps }) => {\n    return (_jsx(Flex, { ...restProps, container: { direction: 'column', ...container }, as: StyledCardContent, children: children }));\n};\nexport default CardContent;\n//# sourceMappingURL=CardContent.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCard } from './Card';\nimport { StyledCardContent } from './CardContent';\nexport const StyledCardHeader = styled.header(({ theme, onClick }) => {\n    return css `\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      + ${StyledCardContent} {\n        padding-block-start: 0;\n      }\n\n      &:hover {\n        ${onClick ? 'cursor: pointer;' : undefined}\n      }\n    }\n  `;\n});\nStyledCardHeader.defaultProps = defaultThemeProp;\nconst CardHeader = forwardRef(({ children, actions, ...restProps }, ref) => {\n    return (_jsx(Flex, { container: { alignItems: 'center', justify: 'between' }, as: StyledCardHeader, ...restProps, ref: ref, children: actions ? (_jsxs(_Fragment, { children: [_jsx(Flex, { container: { alignItems: 'center' }, item: { grow: 1 }, children: children }), _jsx(\"div\", { children: actions })] })) : (children) }));\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;\n//# sourceMappingURL=CardHeader.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useConsolidatedRef, useElement, useEscape, useFocusTrap, useI18n, useOuterEvent, usePrevious, useUID } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport { getFocusables } from '../../utils';\nimport Button from '../Button';\nimport { CardContent, CardFooter, CardHeader } from '../Card';\nimport Icon from '../Icon';\nimport Popover from '../Popover';\nimport Progress from '../Progress';\nimport Text from '../Text';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\nexport const StyledDialog = styled.dialog(({ theme: { base: { 'content-width': contentWidth, palette: { 'foreground-color': foregroundColor } } } }) => {\n    return css `\n      border: none;\n      min-width: ${contentWidth.sm};\n      max-width: ${contentWidth.lg};\n      color: ${foregroundColor};\n    `;\n});\nStyledDialog.defaultProps = defaultThemeProp;\nexport const StyledDialogTitle = styled(Text)(({ theme: { base: { shadow, 'border-radius': borderRadius } } }) => {\n    return css `\n      position: relative;\n      ::after {\n        content: '';\n        border-radius: ${borderRadius};\n        position: absolute;\n        inset: -0.25rem;\n      }\n      :focus-visible {\n        outline: none;\n        ::after {\n          box-shadow: ${shadow.focus}, inset ${shadow['focus-solid']};\n        }\n      }\n    `;\n});\nStyledDialogTitle.defaultProps = defaultThemeProp;\nexport const useDialog = () => {\n    const [target, setTarget] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const setTargetWithEvent = (e) => {\n        if (e.target instanceof HTMLElement) {\n            setTarget(e.target);\n        }\n    };\n    return {\n        target,\n        loading,\n        setLoading,\n        events: {\n            onMouseDown: (e) => {\n                setTargetWithEvent(e);\n            },\n            onKeyDown: (e) => {\n                if (e.key === 'Enter') {\n                    setTargetWithEvent(e);\n                }\n            }\n        },\n        setTargetWithEvent\n    };\n};\nconst Dialog = forwardRef(({ target, placement, heading, headingHidden = false, onSubmit, onClose, onOpen, loading, children, ...restProps }, ref) => {\n    const t = useI18n();\n    const headingId = useUID();\n    const [popoverEl, setPopoverEl] = useElement();\n    const popoverRef = useConsolidatedRef(ref, setPopoverEl);\n    const headingRef = useRef(null);\n    const [currentTarget, setCurrentTarget] = useState(() => target);\n    const [show, setShow] = useState(false);\n    const skipChangeShow = useRef(false);\n    const prevTarget = usePrevious(target);\n    useEscape(() => {\n        if (show) {\n            setShow(false);\n        }\n    }, undefined, [show, setShow]);\n    useOuterEvent('mousedown', [target, popoverEl], () => {\n        if (target && popoverEl && show) {\n            setShow(false);\n            onClose?.();\n        }\n    });\n    useFocusTrap(popoverRef);\n    useEffect(() => {\n        if (!show) {\n            currentTarget?.focus();\n        }\n    }, [show]);\n    useEffect(() => {\n        if (show && popoverEl) {\n            if (headingRef.current) {\n                headingRef.current.focus();\n            }\n            else {\n                const focusables = getFocusables(popoverRef);\n                focusables[0]?.focus();\n            }\n        }\n    }, [show, popoverEl]);\n    useLayoutEffect(() => {\n        const onTargetClick = (e) => {\n            setCurrentTarget(prev => (e.target ? e.target : prev));\n            if (!skipChangeShow.current) {\n                setShow(prev => !prev);\n            }\n            else {\n                skipChangeShow.current = false;\n            }\n        };\n        if (target instanceof HTMLElement) {\n            target.addEventListener('click', onTargetClick);\n        }\n        return () => {\n            if (target instanceof HTMLElement) {\n                target.removeEventListener('click', onTargetClick);\n            }\n        };\n    }, [target]);\n    useEffect(() => {\n        if (show) {\n            onOpen?.();\n        }\n        else {\n            onClose?.();\n        }\n    }, [show]);\n    useEffect(() => {\n        /* If our target is changing and the popover is already open we will want\n        to skip the next change. The next show change would come from a click on the new button,\n        the popover should stay open. */\n        if (target !== prevTarget && show) {\n            skipChangeShow.current = true;\n        }\n    }, [target, show]);\n    const onTitleKeyDown = (e) => {\n        const focusables = getFocusables(popoverRef);\n        if (e.shiftKey && e.key === 'Tab') {\n            e.preventDefault();\n            focusables[focusables.length - 1].focus();\n        }\n    };\n    const progress = loading ? _jsx(Progress, { placement: 'local' }) : null;\n    return (_jsxs(Popover, { ...restProps, as: StyledDialog, ref: popoverRef, target: currentTarget, placement: placement, show: show, open: show, \"aria-labelledby\": headingId, children: [_jsx(CardHeader, { actions: !onSubmit ? (_jsx(Button, { icon: true, variant: 'simple', onClick: () => setShow(false), \"aria-label\": t('close'), children: _jsx(Icon, { name: 'times' }) })) : undefined, children: headingHidden ? (_jsx(VisuallyHiddenText, { id: headingId, children: heading })) : (_jsx(StyledDialogTitle, { variant: 'h2', tabIndex: -1, ref: headingRef, onKeyDown: onTitleKeyDown, id: headingId, children: heading })) }), _jsxs(CardContent, { children: [children, progress] }), onSubmit && (_jsxs(CardFooter, { justify: 'between', children: [_jsx(Button, { variant: 'secondary', onClick: () => setShow(false), children: t('cancel') }), _jsx(Button, { variant: 'primary', onClick: () => onSubmit({ close: () => setShow(false) }), disabled: loading, children: t('submit') })] }))] }));\n});\nexport default Dialog;\n//# sourceMappingURL=Dialog.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Icon, { registerIcon } from '../Icon';\nimport { defaultThemeProp } from '../../theme';\nimport HTML from '../HTML';\nimport Button from '../Button';\nimport Dialog, { useDialog } from '../Dialog';\nimport * as informationIcon from '../Icon/icons/information.icon';\nimport { useI18n } from '../../hooks';\nimport { StyledDialog } from '../Dialog/Dialog';\nregisterIcon(informationIcon);\nexport const StyledAdditionalInfo = styled.div(({ theme }) => css `\n    & > ${StyledDialog} {\n      max-width: ${theme.base['content-width'].md};\n    }\n  `);\nStyledAdditionalInfo.defaultProps = defaultThemeProp;\nconst AdditionalInfo = forwardRef(({ heading, children, ...restProps }, ref) => {\n    const { target, events } = useDialog();\n    const t = useI18n();\n    return (_jsxs(StyledAdditionalInfo, { ref: ref, ...restProps, children: [_jsx(Button, { variant: 'simple', label: t('additional_info'), compact: true, icon: true, ...events, children: _jsx(Icon, { name: 'information' }) }), _jsx(Dialog, { heading: heading, target: target, children: typeof children === 'string' ? _jsx(HTML, { content: children }) : children })] }));\n});\nexport default AdditionalInfo;\n//# sourceMappingURL=AdditionalInfo.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { cloneElement, useEffect, useState, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { readableColor, rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport Actions from '../Actions';\nimport { useConsolidatedRef, useI18n, useUID } from '../../hooks';\nimport Label, { StyledLabel } from '../Label';\nimport { calculateFontSize, getHoverColors } from '../../styles';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\nimport { getFocusables, tryCatch } from '../../utils';\nimport Button from '../Button';\nimport Icon, { registerIcon } from '../Icon';\nimport * as warnSolidIcon from '../Icon/icons/warn-solid.icon';\nimport * as flagWaveSolidIcon from '../Icon/icons/flag-wave-solid.icon';\nimport * as checkIcon from '../Icon/icons/check.icon';\nimport AdditionalInfo from '../AdditionalInfo';\nregisterIcon(warnSolidIcon, flagWaveSolidIcon, checkIcon);\nconst StyledStatusIcon = styled(Icon)(({ theme, status }) => {\n    return css `\n      height: 1em;\n      width: 1em;\n      color: ${theme.components['form-field'][status]['status-color']};\n      vertical-align: baseline;\n      margin-inline-end: 0.5ch;\n    `;\n});\nStyledStatusIcon.defaultProps = defaultThemeProp;\nexport const StyledFormFieldInfo = styled.div(({ status, theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, spacing }, components: { 'form-field': formField } } }) => {\n    const { xxs: infoFontSize } = calculateFontSize(fontSize, fontScale);\n    return css `\n      max-width: max-content;\n      margin-top: calc(0.25 * ${spacing});\n      font-size: ${infoFontSize};\n      word-break: break-word;\n      ${status &&\n        formField[status] &&\n        css `\n        color: ${formField[status]['status-color']};\n      `}\n    `;\n});\nStyledFormFieldInfo.defaultProps = defaultThemeProp;\nconst StyledLabelRow = styled.div ``;\nexport const StyledFormField = styled.div(props => {\n    const { disabled, required, theme: { base: { palette: { urgent }, 'disabled-opacity': disabledOpacity, spacing } } } = props;\n    return css `\n    ${disabled &&\n        css `\n      opacity: ${disabledOpacity};\n      -webkit-user-select: none;\n      user-select: none;\n    `}\n    position: relative;\n    border: 0;\n\n    > ${StyledLabel}, > ${StyledLabelRow} {\n      margin-bottom: calc(0.25 * ${spacing});\n    }\n\n    > ${StyledLabel}, > ${StyledLabelRow} > ${StyledLabel} {\n      &::after {\n        display: ${required ? 'inline' : 'none'};\n        content: '\\\\00a0*';\n        vertical-align: top;\n        color: ${urgent};\n      }\n\n      ${disabled &&\n        css `\n        cursor: not-allowed;\n      `}\n    }\n  `;\n});\nStyledFormField.defaultProps = defaultThemeProp;\nconst StyledSuggestionButton = styled(Button)(({ theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, 'border-radius': baseRadius, spacing }, components: { 'form-control': { 'border-radius': radius, 'border-width': borderWidth }, 'form-field': formField } } }) => {\n    const { xxs: buttonFontSize } = calculateFontSize(fontSize, fontScale);\n    const backgroundColor = formField.pending['status-color'];\n    const hoverColors = getHoverColors(backgroundColor);\n    const color = tryCatch(() => readableColor(backgroundColor));\n    const borderColor = color ? rgba(color, 0.4) : color;\n    return css `\n      background-color: ${backgroundColor};\n      color: ${color};\n      font-size: ${buttonFontSize};\n      min-width: calc(3 * ${spacing});\n      min-height: calc(3 * ${spacing});\n      padding: 0 ${spacing};\n      border-radius: 0;\n      border: none;\n      &:first-child {\n        border-inline-end: ${borderWidth} solid ${borderColor};\n        border-end-start-radius: calc(${baseRadius} * ${radius});\n        margin-inline-start: calc(2 * ${spacing});\n      }\n      &:last-child {\n        border-end-end-radius: calc(${baseRadius} * ${radius});\n        margin-inline-start: 0;\n      }\n      &:hover {\n        background-color: ${hoverColors.background};\n      }\n\n      @media (pointer: coarse) {\n        min-height: 2rem;\n      }\n    `;\n});\nStyledSuggestionButton.defaultProps = defaultThemeProp;\nconst statusIconMap = { error: 'warn-solid', warning: 'flag-wave-solid', success: 'check' };\nconst FormField = forwardRef((props, ref) => {\n    const uid = useUID();\n    const { children: controlElement, id = uid, as = 'div', label, labelAs = 'label', labelFor = id, labelId, labelHidden = false, labelAfter = false, info, status, isRadioCheck, charLimitDisplay, required = false, disabled = false, readOnly = false, inline = false, actions, container, additionalInfo, onResolveSuggestion, ...restProps } = props;\n    const t = useI18n();\n    const labelAsLegend = labelAs === 'legend';\n    const hasSuggestion = status === 'pending' && !!onResolveSuggestion;\n    const consolidatedRef = useConsolidatedRef(ref);\n    const showAdditionalInfo = !!additionalInfo && !disabled && !labelHidden;\n    const labelAndInfo = (_jsxs(_Fragment, { children: [_jsxs(Label, { id: labelId, as: labelAs, htmlFor: labelAs === 'label' ? labelFor : undefined, labelHidden: labelHidden, onClick: (e) => {\n                    if (readOnly)\n                        e.preventDefault();\n                }, inline: inline, children: [status && status !== 'pending' && !labelHidden && (_jsx(StyledStatusIcon, { status: status, name: statusIconMap[status] })), label] }), showAdditionalInfo && (_jsx(AdditionalInfo, { heading: additionalInfo.heading, children: additionalInfo.content }))] }));\n    const labelRow = showAdditionalInfo && !isRadioCheck ? (_jsx(Flex, { as: StyledLabelRow, container: { justify: 'between', alignItems: 'end' }, item: { alignSelf: 'stretch' }, children: labelAndInfo })) : (labelAndInfo);\n    /*\n      We have to use an internal state and an effect to set the text value of info after the DOM element is rendered.\n      This is to ensure screen readers will announce info on errors when role is set to alert.\n      Needs testing to confirm. Currently the expected sequence would be:\n      - FormField renders with no error and no info\n      - user input triggers an error status\n      - props passed set error status and provide info text\n      - effect runs and sets live region state which renders and is announced\n    */\n    const [liveRegionInfo, setLiveRegionInfo] = useState(null);\n    useEffect(() => {\n        setLiveRegionInfo(info);\n    }, [info]);\n    // fieldset or single form control element\n    let content = labelAsLegend\n        ? controlElement\n        : cloneElement(controlElement, {\n            'aria-describedby': info && `${id}-info`\n        });\n    if (actions) {\n        content = (_jsxs(Flex, { container: { alignItems: 'center', gap: 0.5 }, children: [content, _jsx(Actions, { items: actions, menuAt: 3 })] }));\n    }\n    let infoContent = info ? (\n    /*\n      Region for additional info, help or error message.\n      Withholding aria-live=\"assertive\" to avoid iOS issue. See below.\n      https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions#Preferring_specialized_live_region_roles\n    */\n    _jsx(StyledFormFieldInfo, { status: status, role: status === 'error' || status === 'warning' ? 'alert' : undefined, id: `${id}-info`, children: liveRegionInfo })) : undefined;\n    if (charLimitDisplay) {\n        infoContent = (_jsxs(Flex, { container: { justify: infoContent ? 'between' : 'end', gap: 1 }, children: [infoContent, _jsx(Flex, { item: { shrink: 0 }, children: charLimitDisplay })] }));\n    }\n    if (hasSuggestion) {\n        const focusables = getFocusables(consolidatedRef);\n        infoContent = (_jsxs(Flex, { container: { alignItems: 'start', justify: 'between' }, children: [_jsxs(StyledFormFieldInfo, { status: status, id: `${id}-info`, children: [t('suggestion_info'), _jsx(VisuallyHiddenText, { \"aria-live\": 'polite', children: t('suggestion_assist') })] }), _jsxs(Flex, { container: { wrap: 'nowrap' }, children: [_jsx(StyledSuggestionButton, { onClick: () => {\n                                onResolveSuggestion(false);\n                                focusables[0]?.focus();\n                            }, \"aria-label\": t('reject_suggestion_button_a11y'), children: t('no') }), _jsx(StyledSuggestionButton, { onClick: () => {\n                                onResolveSuggestion(true);\n                                focusables[0]?.focus();\n                            }, \"aria-label\": t('accept_suggestion_button_a11y'), children: t('yes') })] })] }));\n    }\n    const onKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            const target = e.target;\n            if (!target.closest('button')) {\n                e.preventDefault();\n                onResolveSuggestion?.(true);\n            }\n        }\n    };\n    return (_jsxs(Flex, { ...restProps, container: {\n            direction: inline ? 'row' : 'column',\n            alignItems: inline ? 'center' : undefined,\n            ...container\n        }, as: StyledFormField, id: `${id}-field`, forwardedAs: as, required: required, disabled: disabled, readOnly: readOnly, onKeyDown: hasSuggestion ? onKeyDown : undefined, \"aria-describedby\": labelAsLegend && info ? `${id}-info` : undefined, ref: consolidatedRef, children: [(labelAsLegend || !labelAfter) && labelRow, content, !labelAsLegend && labelAfter && labelRow, !readOnly && infoContent] }));\n});\nexport default FormField;\n//# sourceMappingURL=FormField.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { mix, rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { calculateFontSize } from '../../styles';\nexport const StyledFormControl = styled.div(({ theme: { base: { 'border-radius': baseRadius, 'font-size': baseFontSize, 'font-scale': baseFontScale, animation: { speed, timing }, palette }, components: { 'form-field': formField, 'form-control': { 'foreground-color': foreground, 'background-color': background, 'border-color': brd, 'border-radius': radius, 'border-width': borderWidth, ':hover': { 'border-color': hoverBorderColor }, ':focus': { 'border-color': focusBorderColor, 'box-shadow': shadow }, ':disabled': { 'border-color': disabledBorderColor, 'background-color': disabledBackgroundColor }, ':read-only': { 'border-color': readOnlyBorderColor, 'background-color': readOnlyBackgroundColor } } } }, status, hasSuggestion }) => {\n    const fontSize = calculateFontSize(baseFontSize, baseFontScale);\n    const borderColor = status && formField[status] ? formField[status]['status-color'] : brd;\n    const backgroundColor = hasSuggestion && status\n        ? mix(0.1, formField[status]['status-color'], palette['primary-background'])\n        : background;\n    return css `\n      color: ${foreground};\n      background-color: ${backgroundColor};\n      border-radius: calc(${baseRadius} * ${radius});\n      border-color: ${borderColor};\n      border-width: ${borderWidth};\n      border-style: solid;\n      transition: all ${timing.ease} ${speed};\n      &,\n      & > select {\n        outline: none;\n      }\n\n      &:disabled,\n      &[disabled] {\n        background-color: ${disabledBackgroundColor};\n        border-color: ${disabledBorderColor};\n        cursor: not-allowed;\n      }\n\n      &:focus:not([disabled]) {\n        border-color: ${focusBorderColor};\n        box-shadow: ${shadow};\n        ${hasSuggestion &&\n        css `\n          background-color: ${background};\n        `}\n      }\n\n      &:focus-within:not([disabled]) {\n        ${hasSuggestion &&\n        css `\n          background-color: ${background};\n        `}\n      }\n\n      &:hover:not([readonly]):not([disabled]):not(:focus, :focus-within) {\n        ${!status &&\n        css `\n          border-color: ${hoverBorderColor};\n        `}\n        ${hasSuggestion &&\n        css `\n          background-color: ${background};\n          box-shadow: 0 0 0 0.125rem ${rgba(borderColor, 0.2)};\n        `}\n      }\n\n      ${hasSuggestion &&\n        css `\n        border-end-end-radius: 0;\n      `}\n\n      &[readonly] {\n        background-color: ${readOnlyBackgroundColor};\n        border-color: ${readOnlyBorderColor};\n      }\n\n      @media (pointer: coarse) {\n        /* stylelint-disable-next-line unit-allowed-list */\n        font-size: max(${fontSize.s}, 16px);\n      }\n    `;\n});\nStyledFormControl.defaultProps = defaultThemeProp;\nconst FormControl = forwardRef((props, ref) => {\n    return _jsx(StyledFormControl, { ref: ref, ...props });\n});\nexport default FormControl;\n//# sourceMappingURL=FormControl.js.map","import styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { StyledFormControl } from '../FormControl';\nexport const StyledRangeInputContainer = styled.div `\n  gap: 1rem;\n\n  ${StyledFormControl} {\n    position: relative;\n  }\n\n  > :first-child {\n    > ${StyledFormControl}:after {\n      content: '-';\n      position: absolute;\n      width: 1rem;\n      inset-inline-end: -1rem;\n      text-align: center;\n    }\n  }\n\n  > ${StyledFormControl}:first-child:after {\n    content: '-';\n    position: absolute;\n    width: 1rem;\n    inset-inline-end: -1rem;\n    text-align: center;\n  }\n\n  > * {\n    flex-grow: 1;\n  }\n`;\nStyledRangeInputContainer.defaultProps = defaultThemeProp;\nconst StyledInput = styled.input(({ theme: { base, components } }) => {\n    return css `\n    width: 100%;\n    height: ${components.input.height};\n    min-height: ${base['hit-area']['mouse-min']};\n    padding: 0 ${components.input.padding};\n    appearance: none;\n    -webkit-appearance: none;\n    text-align: inherit;\n\n    @media (pointer: coarse) {\n      min-height: ${base['hit-area']['finger-min']};\n    }\n  `;\n});\nStyledInput.defaultProps = defaultThemeProp;\nexport default StyledInput;\n//# sourceMappingURL=Input.styles.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { hideVisually, readableColor, rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nexport const StyledLabel = styled.label(({ theme, labelHidden }) => {\n    const color = tryCatch(() => {\n        return rgba(readableColor(theme.base.palette['primary-background']), theme.base.transparency['transparent-3']);\n    });\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return labelHidden\n        ? hideVisually\n        : css `\n          max-width: max-content;\n          font-size: ${fontSize[theme.components.label['font-size']]};\n          font-weight: ${theme.base['font-weight']['semi-bold']};\n          color: ${color};\n        `;\n});\nStyledLabel.defaultProps = defaultThemeProp;\nconst Label = forwardRef(({ children, labelHidden = false, htmlFor, ...restProps }, ref) => {\n    return (_jsx(StyledLabel, { ref: ref, labelHidden: labelHidden, htmlFor: htmlFor === '' ? undefined : htmlFor, ...restProps, children: children }));\n});\nexport default Label;\n//# sourceMappingURL=Label.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport useOS from '../../hooks/useOS';\nconst osxKeyMapper = {\n    Command: '⌘',\n    Option: '⌥',\n    Alt: '⌥',\n    Control: '⌃',\n    Return: '↵',\n    Delete: 'Del'\n};\nconst windowsKeyMapper = {\n    Control: 'Ctrl',\n    Alt: 'Alt',\n    Windows: '⊞',\n    Backspace: 'Backspace',\n    Option: 'Alt'\n};\nconst generalKeyMapper = {\n    'Page up': 'Pg up',\n    'Page down': 'Pg dn',\n    Ins: 'Insert'\n};\nexport const StyledKeyboard = styled.kbd(({ theme: { base, components: { text: { primary }, badges: { keyboard } } } }) => {\n    return css `\n      background-color: ${keyboard['background-color']};\n      color: ${base.palette['foreground-color']};\n      display: inline-block;\n      position: relative;\n      font-family: ${base['font-family']};\n      font-weight: ${primary['font-weight']};\n      overflow: hidden;\n      white-space: nowrap;\n      padding: 0.125rem;\n      border: 0.0125rem solid ${keyboard['border-color']};\n      border-radius: calc(${base['border-radius']} / 4);\n      text-transform: capitalize;\n      text-align: center;\n      min-width: 1.25rem;\n      height: 1.25rem;\n      text-overflow: ellipsis;\n      line-height: 1rem;\n      inset-block-start: calc(1.25rem / 4 - 0.125rem);\n    `;\n});\nStyledKeyboard.defaultProps = defaultThemeProp;\nconst Keyboard = ({ keyName, ...restProps }) => {\n    const { windows: isWindows } = useOS();\n    return (_jsx(StyledKeyboard, { ...restProps, \"aria-label\": keyName, children: (isWindows && windowsKeyMapper[keyName]) ||\n            osxKeyMapper[keyName] ||\n            generalKeyMapper[keyName] ||\n            keyName }));\n};\nexport default Keyboard;\n//# sourceMappingURL=Keyboard.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useRef, useContext, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { readableColor } from 'polished';\nimport Button from '../Button';\nimport Popover from '../Popover';\nimport BareButton from '../Button/BareButton';\nimport { defaultThemeProp } from '../../theme';\nimport { useBreakpoint, useConsolidatedRef, useI18n, useUID, useModalContext, useOS } from '../../hooks';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nimport AppShellContext from '../AppShell/AppShellContext';\nimport { Keyboard } from '../Badges';\nimport Text, { StyledText } from '../Text';\nimport { StyledKeyboard } from '../Badges/Keyboard';\nimport Flex from '../Flex';\nexport const StyledLinkPopover = styled.div(({ theme, preview }) => css `\n    background-color: ${theme.components.tooltip['background-color']};\n    ${preview &&\n    css `\n      padding: ${theme.base.spacing};\n    `}\n  `);\nStyledLinkPopover.defaultProps = defaultThemeProp;\nexport const StyledLinkPopoverBtn = styled(BareButton)(({ theme }) => {\n    const contrastColor = tryCatch(() => readableColor(theme.base.palette.interactive));\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    z-index: 1;\n    padding: 0 ${theme.base.spacing};\n    min-height: 1.5rem;\n    line-height: 1;\n    color: ${contrastColor};\n    font-size: ${fontSize.xs};\n    text-decoration: none;\n\n    /* FIXME: Button selector specificity... */\n    & + & {\n      margin: 0;\n    }\n\n    & + &::before {\n      content: '';\n      position: absolute;\n      inset-inline-start: 0;\n      inset-block: 0;\n      width: 1px; /* stylelint-disable-line unit-allowed-list */\n      background-color: ${contrastColor};\n      opacity: ${theme.base.transparency['transparent-3']};\n    }\n\n    &:hover,\n    &:active {\n      text-decoration: underline;\n    }\n\n    &:focus {\n      box-shadow: inset 0 0 0 0.0625rem ${theme.base.palette.light},\n        0 0 0.125rem 0.0625rem ${theme.base.palette.interactive};\n    }\n  `;\n});\nStyledLinkPopoverBtn.defaultProps = defaultThemeProp;\nexport const StyledLinkPreviewPopoverBtn = styled(StyledLinkPopoverBtn)(({ theme }) => {\n    return css `\n    width: 100%;\n    padding: unset;\n\n    &:hover,\n    &:active {\n      text-decoration: none;\n      ${StyledText} span {\n        text-decoration: underline;\n      }\n    }\n\n    ${StyledText} {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n\n    ${StyledKeyboard} {\n      color: ${theme.base.palette.light};\n      background-color: ${theme.base.colors.gray.dark};\n      border-color: ${theme.base.colors.gray.medium};\n      inset-block-start: unset;\n\n      &:first-of-type {\n        margin-inline: ${theme.base.spacing};\n      }\n    }\n  `;\n});\nStyledLinkPreviewPopoverBtn.defaultProps = defaultThemeProp;\nexport const StyledLink = styled(Button) ``;\nStyledLink.defaultProps = defaultThemeProp;\nconst Link = forwardRef(({ href, variant = 'link', previewable, onPreview, ...restProps }, ref) => {\n    const { initialized: inModal } = useModalContext();\n    const { previewTriggerRef } = useContext(AppShellContext);\n    const uid = useUID();\n    const linkRef = useConsolidatedRef(ref);\n    const [popover, setPopover] = useState(false);\n    const [popoverHideDelay, setPopoverHideDelay] = useState('short');\n    const [previewPopover, setPreviewPopover] = useState(false);\n    const previewBtnRef = useRef(null);\n    const isSmallOrAbove = useBreakpoint('sm');\n    const t = useI18n();\n    const { macintosh } = useOS();\n    const contextMenuOpened = useRef(false);\n    const showPopover = () => {\n        if (isSmallOrAbove) {\n            setPopover(true);\n            setPreviewPopover(false);\n        }\n    };\n    const showPreviewPopover = () => {\n        if (isSmallOrAbove && !popover && !contextMenuOpened.current)\n            setPreviewPopover(true);\n    };\n    const hidePopover = () => {\n        setPopover(false);\n    };\n    const hidePreviewPopover = () => {\n        setPreviewPopover(false);\n    };\n    const onEnterLink = () => {\n        if (previewable)\n            showPopover();\n    };\n    const onFocusLink = () => {\n        if (previewable)\n            showPreviewPopover();\n    };\n    const onBlurLink = () => {\n        contextMenuOpened.current = false;\n        hidePreviewPopover();\n    };\n    const onPreviewClick = () => {\n        previewTriggerRef.current = linkRef.current;\n        onPreview?.({ href });\n    };\n    const onKeyUp = (e) => {\n        if (e.getModifierState('Alt') && e.code === 'KeyP') {\n            onPreviewClick();\n        }\n    };\n    useEffect(() => {\n        if (popoverHideDelay === 'none' && !popover && !previewPopover) {\n            setPopoverHideDelay('short');\n        }\n    }, [popoverHideDelay, popover, previewPopover]);\n    return (_jsxs(_Fragment, { children: [_jsx(StyledLink, { href: href, variant: variant, ref: linkRef, ...restProps, onMouseEnter: onEnterLink, onMouseLeave: hidePopover, onFocus: onFocusLink, onBlur: onBlurLink, onKeyUp: onKeyUp, onContextMenu: () => {\n                    contextMenuOpened.current = true;\n                    setPopoverHideDelay('none');\n                    setPreviewPopover(false);\n                    setPopover(false);\n                }, \"aria-describedby\": previewable ? `${uid}-preview-instructions` : undefined }), !inModal && (_jsx(Popover, { show: previewPopover, groupId: 'link_preview', showDelay: 'short', hideDelay: popoverHideDelay, placement: 'bottom', target: linkRef.current, onMouseEnter: showPreviewPopover, onMouseLeave: hidePreviewPopover, as: StyledLinkPopover, arrow: true, preview: true, onHide: hidePreviewPopover, children: _jsx(StyledLinkPreviewPopoverBtn, { preview: true, type: 'button', ref: previewBtnRef, onClick: onPreviewClick, tabIndex: '-1', children: _jsxs(Text, { children: [_jsx(\"span\", { children: t('preview') }), _jsxs(Flex, { container: { inline: true, justify: 'end' }, children: [_jsx(Keyboard, { keyName: 'Alt' }), _jsx(Keyboard, { keyName: 'P' })] })] }) }) })), _jsxs(Popover, { show: popover, groupId: 'link_preview', showDelay: 'short', hideDelay: popoverHideDelay, placement: 'bottom', target: linkRef.current, onMouseEnter: showPopover, onMouseLeave: hidePopover, as: StyledLinkPopover, arrow: true, children: [!inModal && (_jsx(StyledLinkPopoverBtn, { preview: true, type: 'button', ref: previewBtnRef, onClick: onPreviewClick, tabIndex: '-1', children: t('preview') })), _jsx(StyledLinkPopoverBtn, { forwardedAs: 'a', href: href, target: '_blank', rel: 'noreferrer', tabIndex: '-1', children: t('link_open_in_tab_text') })] }), previewable && (_jsx(\"span\", { id: `${uid}-preview-instructions`, hidden: true, children: t('preview_link_instruction', [macintosh ? 'option' : 'alt']) }))] }));\n});\nexport default Link;\n//# sourceMappingURL=Link.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nconst StyledDockedModals = styled.div(({ theme }) => {\n    return css `\n    position: fixed;\n    z-index: ${theme.base['z-index'].modal};\n    bottom: 0;\n    right: 0;\n    pointer-events: none;\n    width: 100%;\n  `;\n});\nStyledDockedModals.defaultProps = defaultThemeProp;\nconst DockedModals = forwardRef((props, ref) => {\n    return (_jsx(Flex, { container: { justify: 'end', alignItems: 'end', gap: 2, pad: [0, 2] }, as: StyledDockedModals, ...props, ref: ref }));\n});\nexport default DockedModals;\n//# sourceMappingURL=DockedModals.js.map","import styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledPopoverArrow = styled.div `\n  background-color: inherit;\n\n  ::before {\n    content: '';\n    display: block;\n    position: absolute;\n    inset: -0.25rem;\n    background-color: inherit;\n    transform: rotate(45deg);\n  }\n`;\nStyledPopoverArrow.defaultProps = defaultThemeProp;\nexport const StyledPopoverContent = styled.div `\n  max-width: inherit;\n  max-height: inherit;\n  border-radius: inherit;\n  overflow: auto;\n`;\nexport const StyledPopover = styled.div(({ theme: { base: { 'border-radius': borderRadius, 'z-index': { popover: zIndex }, shadow: { low } }, components: { card: { background }, 'form-control': { 'border-radius': formControlBorderRadius } } }, offset }) => {\n    return css `\n      /*\n        Margin should never be used with Popper.\n        https://popper.js.org/docs/v2/migration-guide/#4-remove-all-css-margins\n      */\n      margin: 0 !important;\n      z-index: ${zIndex};\n      background-color: ${background};\n      border-radius: calc(${formControlBorderRadius} * ${borderRadius});\n      box-shadow: ${low};\n\n      &[data-popper-reference-hidden='true'] {\n        visibility: hidden;\n        pointer-events: none;\n      }\n\n      &[data-popper-placement^='top'] {\n        > ${StyledPopoverArrow} {\n          top: calc(100%);\n\n          ::before {\n            border-bottom-right-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          height: ${offset}px;\n          bottom: -${offset}px;\n          left: 0;\n          right: 0;\n        }\n      }\n\n      &[data-popper-placement^='bottom'] {\n        > ${StyledPopoverArrow} {\n          bottom: calc(100%);\n\n          ::before {\n            border-top-left-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          height: ${offset}px;\n          top: -${offset}px;\n          left: 0;\n          right: 0;\n        }\n      }\n\n      &[data-popper-placement^='right'] {\n        > ${StyledPopoverArrow} {\n          right: calc(100%);\n\n          ::before {\n            border-bottom-left-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          width: ${offset}px;\n          left: -${offset}px;\n          top: 0;\n          bottom: 0;\n        }\n      }\n\n      &[data-popper-placement^='left'] {\n        > ${StyledPopoverArrow} {\n          left: calc(100%);\n\n          ::before {\n            border-top-right-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          width: ${offset}px;\n          right: -${offset}px;\n          top: 0;\n          bottom: 0;\n        }\n      }\n    `;\n});\nStyledPopover.defaultProps = defaultThemeProp;\n//# sourceMappingURL=Popover.styles.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledProgressBar = styled.div(({ theme, placement, determinate }) => {\n    return css `\n      height: 0.375rem;\n      background-color: ${theme.base.colors.gray['extra-light']};\n      border-radius: ${theme.base['border-radius']};\n      min-width: 2rem;\n      overflow: hidden;\n\n      @keyframes LoadingBar {\n        0% {\n          transform: translateX(-100%);\n        }\n\n        100% {\n          transform: translateX(200%);\n        }\n      }\n\n      ::before {\n        content: '';\n        display: block;\n        height: 100%;\n        width: 100%;\n        left: 0;\n        border-radius: ${theme.base['border-radius']};\n        background-color: ${theme.components.progress['progress-color']};\n        ${determinate &&\n        css `\n          transform: translateX(var(--progress, 0));\n          transform-origin: 0 50%;\n          transition: transform calc(0.5 * ${theme.base.animation.speed})\n            ${theme.base.animation.timing.ease};\n        `}\n\n        ${!determinate &&\n        css `\n          animation: LoadingBar calc(8 * ${theme.base.animation.speed}) linear infinite;\n          width: 50%;\n        `}\n      }\n\n      ${placement === 'inline'\n        ? css `\n            display: inline-block;\n            position: relative;\n          `\n        : css `\n            width: 50%;\n          `}\n    `;\n});\nStyledProgressBar.defaultProps = defaultThemeProp;\nconst Bar = forwardRef(({ value, minValue = 0, maxValue = 100, message, placement, style, ...restProps }, ref) => {\n    let percentage = value;\n    if (typeof value === 'number') {\n        if (value > maxValue || minValue > maxValue)\n            percentage = 0;\n        else if (value < minValue)\n            percentage = 100;\n        else\n            percentage = (1 - (value - minValue) / (maxValue - minValue)) * -100;\n    }\n    return (_jsx(StyledProgressBar, { ref: ref, role: 'progressbar', \"aria-valuemin\": minValue, \"aria-valuemax\": maxValue, \"aria-valuenow\": value, placement: placement, determinate: typeof value === 'number', style: { ...style, '--progress': percentage ? `${percentage}%` : '' }, ...restProps }));\n});\nexport default Bar;\n//# sourceMappingURL=Bar.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledProgressEllipsis = styled.div(({ theme, placement }) => {\n    return css `\n      line-height: 1;\n      display: ${placement === 'inline' ? 'inline-flex' : 'block'};\n\n      @keyframes LoadingEllipsis {\n        0% {\n          transform: scale(0);\n          opacity: 0;\n        }\n\n        50% {\n          transform: scale(1);\n          opacity: 1;\n        }\n\n        100% {\n          transform: scale(0);\n          opacity: 0;\n        }\n      }\n\n      > span {\n        display: flex;\n        mix-blend-mode: multiply;\n\n        ${placement === 'inline' &&\n        css `\n          display: inline-flex;\n          margin-left: 0.1875rem;\n        `}\n      }\n\n      > span span {\n        margin: 0 0.3125rem;\n        background: ${theme.components.progress['progress-color']};\n        border-radius: 50%;\n        animation: LoadingEllipsis calc(4 * ${theme.base.animation.speed}) infinite;\n\n        ${placement === 'global' &&\n        css `\n          width: 1.25rem;\n          height: 1.25rem;\n        `}\n\n        ${placement === 'local' &&\n        css `\n          width: 0.625rem;\n          height: 0.625rem;\n        `}\n\n      ${placement === 'inline' &&\n        css `\n          width: 0.1875rem;\n          height: 0.1875rem;\n          margin: 0 0.1875rem;\n          animation-duration: calc(4 * ${theme.base.animation.speed});\n        `}\n\n      &:nth-child(2) {\n          animation-delay: 0.1667s;\n        }\n\n        &:nth-child(3) {\n          animation-delay: ${0.1667 * 2}s;\n        }\n      }\n    `;\n});\nStyledProgressEllipsis.defaultProps = defaultThemeProp;\nconst Ellipsis = forwardRef(({ message, placement, ...restProps }, ref) => {\n    return (_jsx(StyledProgressEllipsis, { ref: ref, role: 'progressbar', placement: placement, ...restProps, children: _jsxs(\"span\", { children: [_jsx(\"span\", {}), _jsx(\"span\", {}), _jsx(\"span\", {})] }) }));\n});\nexport default Ellipsis;\n//# sourceMappingURL=Ellipsis.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled, { css } from 'styled-components';\nimport { readableColor, rgba } from 'polished';\nimport Backdrop from '../Backdrop';\nimport Text from '../Text';\nimport { calculateFontSize } from '../../styles';\nimport { tryCatch } from '../../utils';\nimport { useConfiguration } from '../../hooks';\nimport Bar from './Bar';\nimport Ellipsis from './Ellipsis';\nimport Ring from './Ring';\nconst StyledMessage = styled.span(({ theme }) => {\n    const color = tryCatch(() => {\n        return rgba(readableColor(theme.base.palette['primary-background']), theme.base.transparency['transparent-3']);\n    });\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    margin-top: 0.5rem;\n    font-size: ${fontSize[theme.components.label['font-size']]};\n    font-weight: ${theme.base['font-weight']['semi-bold']};\n    color: ${color};\n  `;\n});\nconst Progress = forwardRef(({ variant = 'ring', placement = 'global', visible = true, onTransitionEndIn, onTransitionEndOut, value, message, ...restProps }, ref) => {\n    const [isVisible, setIsVisible] = useState(visible);\n    const [isNull, setIsNull] = useState(!visible);\n    const { portalTarget } = useConfiguration();\n    const showTime = useRef();\n    const showTimeout = useRef();\n    const hideTimeout = useRef();\n    let Comp = Ring;\n    if (variant === 'bar')\n        Comp = Bar;\n    else if (variant === 'ellipsis')\n        Comp = Ellipsis;\n    const onBackdropTransitionEnd = () => {\n        setIsNull(true);\n        onTransitionEndOut?.();\n    };\n    useEffect(() => {\n        if (visible) {\n            clearTimeout(hideTimeout.current);\n            showTime.current = Date.now();\n            showTimeout.current = window.setTimeout(() => {\n                setIsVisible(true);\n                setIsNull(false);\n            }, 100);\n        }\n        else {\n            clearTimeout(showTimeout.current);\n            if (typeof showTime.current === 'number') {\n                const minimumDuration = 1000;\n                const timeElapsed = Date.now() - showTime.current;\n                if (timeElapsed > minimumDuration)\n                    setIsVisible(false);\n                else {\n                    hideTimeout.current = window.setTimeout(() => {\n                        setIsVisible(false);\n                    }, minimumDuration - timeElapsed);\n                }\n            }\n            else\n                setIsVisible(false);\n        }\n    }, [visible]);\n    useEffect(() => {\n        return () => {\n            clearTimeout(showTimeout.current);\n            clearTimeout(hideTimeout.current);\n        };\n    }, []);\n    if (isNull)\n        return null;\n    const comp = (_jsx(Comp, { ...restProps, placement: placement, value: value, \"aria-valuetext\": message && typeof value === 'number' ? `${message} - ${value}` : message, ref: ref }));\n    const content = placement === 'inline' ? (comp) : (_jsxs(Backdrop, { open: isVisible, container: { direction: 'column' }, position: placement === 'global' ? 'fixed' : 'absolute', variant: 'light', alpha: 0.5, onAfterTransitionIn: onTransitionEndIn, onAfterTransitionOut: onBackdropTransitionEnd, children: [comp, !!message && (_jsx(Text, { as: StyledMessage, variant: 'secondary', \"aria-hidden\": 'true', children: message }))] }));\n    return placement === 'global' && portalTarget ? createPortal(content, portalTarget) : content;\n});\nexport default Progress;\n//# sourceMappingURL=Progress.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledProgressRing = styled.div(({ theme, placement, determinate }) => {\n    return css `\n    position: relative;\n    min-width: 1em;\n    min-height: 1em;\n\n    @keyframes LoadingRing {\n      0% {\n        transform: rotate(0deg);\n      }\n\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    svg {\n      display: block;\n      position: absolute;\n      height: 100%;\n\n      circle {\n        fill: transparent;\n        stroke: ${theme.base.colors.gray['extra-light']};\n        stroke-width: 2;\n        r: 45%;\n        cx: 50%;\n        cy: 50%;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n\n        &:nth-child(2) {\n          stroke: ${theme.components.progress['progress-color']};\n          transition: stroke-dashoffset calc(0.5 * ${theme.base.animation.speed})\n            ${theme.base.animation.timing.ease};\n\n          ${!determinate &&\n        css `\n            animation: LoadingRing calc(4 * ${theme.base.animation.speed}) linear infinite;\n          `}\n        }\n      }\n    }\n\n    ${placement === 'inline'\n        ? css `\n          display: inline-flex;\n          vertical-align: top;\n        `\n        : css `\n          width: 2rem;\n          height: 2rem;\n        `}\n  `;\n});\nStyledProgressRing.defaultProps = defaultThemeProp;\nconst Ring = forwardRef(({ value, minValue = 0, maxValue = 100, placement, ...restProps }, ref) => {\n    let strokeDashoffset;\n    const circumference = 18 * Math.PI;\n    if (typeof value !== 'number')\n        strokeDashoffset = (1 - 33 / 100) * circumference;\n    else if (value > maxValue || minValue > maxValue)\n        strokeDashoffset = 0;\n    else if (value < minValue)\n        strokeDashoffset = circumference;\n    else\n        strokeDashoffset = (1 - (value - minValue) / (maxValue - minValue)) * circumference;\n    return (_jsx(StyledProgressRing, { ref: ref, role: 'progressbar', \"aria-valuemin\": minValue, \"aria-valuemax\": maxValue, \"aria-valuenow\": value, placement: placement, determinate: typeof value === 'number', ...restProps, children: _jsxs(\"svg\", { viewBox: '0 0 20 20', children: [_jsx(\"circle\", {}), _jsx(\"circle\", { strokeDasharray: circumference, style: { strokeDashoffset } })] }) }));\n});\nexport default Ring;\n//# sourceMappingURL=Ring.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nexport const StyledText = styled.span(props => {\n    const { variant, status, theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, palette: { 'foreground-color': foregroundColor, urgent: error, warn: warning, success }, transparency: { 'transparent-2': secondaryAlpha } }, components: { text } } } = props;\n    let color;\n    if (status) {\n        color = {\n            error,\n            warning,\n            success\n        }[status];\n    }\n    if (variant === 'secondary') {\n        color = tryCatch(() => rgba(color ?? foregroundColor, secondaryAlpha));\n    }\n    const fontSizes = calculateFontSize(fontSize, fontScale);\n    return css `\n    font-size: ${fontSizes[text[variant]['font-size']]};\n    font-weight: ${text[variant]['font-weight']};\n    color: ${color};\n  `;\n});\nStyledText.defaultProps = defaultThemeProp;\nconst Text = forwardRef(({ variant = 'primary', as, ...restProps }, ref) => {\n    // If variant is for a heading, and no as is passed, set as to heading tag.\n    if (!as && /h\\d/i.test(variant))\n        as = variant;\n    return _jsx(StyledText, { ref: ref, variant: variant, as: as, ...restProps });\n});\nexport default Text;\n//# sourceMappingURL=Text.js.map","import { createElement as _createElement } from \"react\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useContext, useReducer, useMemo, useLayoutEffect, useRef, useState, forwardRef, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled, { css } from 'styled-components';\nimport Button from '../Button';\nimport Icon, { registerIcon } from '../Icon';\nimport * as timesIcon from '../Icon/icons/times.icon';\nimport { createUID, windowIsAvailable } from '../../utils';\nimport { useConfiguration, useI18n } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport '../../init';\nimport { ToasterContext } from './Context';\nregisterIcon(timesIcon);\nconst StyledToastButton = styled.button(({ theme }) => css `\n    border: none;\n    color: inherit;\n    padding: 0;\n    font-size: 1rem;\n\n    &:enabled:hover {\n      background: #ffffff19;\n    }\n\n    &:enabled:focus {\n      box-shadow: ${theme.base.shadow['focus-inverted']};\n    }\n  `);\nStyledToastButton.defaultProps = defaultThemeProp;\nconst StyledToastContent = styled.div(({ theme }) => {\n    return css `\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-size: ${theme.base['font-size']};\n    margin-inline-start: calc(${theme.base['border-radius']} / 2);\n  `;\n});\nStyledToastContent.defaultProps = defaultThemeProp;\nconst StyledToast = styled.div(({ theme }) => {\n    return css `\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-start: 0;\n    width: 100%;\n    padding: calc(${theme.base.spacing} / 2);\n    background: ${theme.base.colors.slate['extra-dark']};\n    color: ${theme.base.colors.white};\n    border-radius: calc(${theme.base['border-radius']} / 2);\n    opacity: var(--opacity);\n    transform: translateY(var(--translateY)) scale(var(--scale));\n    transition-property: transform, opacity;\n    transition-duration: ${theme.base.animation.speed};\n    transition-timing-function: ${theme.base.animation.timing.ease};\n  `;\n});\nStyledToast.defaultProps = defaultThemeProp;\nconst StyledToaster = styled.div `\n  position: fixed;\n  z-index: ${({ theme }) => theme.base['z-index'].toast};\n  width: min(40ch, calc(100% - 1rem));\n  inset-inline-start: 50%;\n  transform: translateX(-50%);\n  top: 100%;\n`;\nStyledToaster.defaultProps = defaultThemeProp;\nfunction reducer(current, action) {\n    switch (action.type) {\n        case 'push':\n            return [\n                ...current,\n                {\n                    ...action.payload\n                }\n            ];\n        case 'unmount':\n            return current.filter(m => m.id !== action.payload);\n        default:\n            return current;\n    }\n}\nconst Toast = forwardRef(({ dispatch, topLevelDismiss, dismissAfter, ...message }, ref) => {\n    const { content, translateY } = message;\n    const [dismissed, setDismissed] = useState(false);\n    const timeoutRef = useRef(NaN);\n    const t = useI18n();\n    const onTransitionEnd = (e) => {\n        if (dismissed && e.propertyName === 'opacity' && e.target === e.currentTarget) {\n            dispatch({ type: 'unmount', payload: message.id });\n        }\n    };\n    const dismiss = () => {\n        clearTimeout(timeoutRef.current);\n        if (dismissed)\n            return;\n        setDismissed(true);\n        topLevelDismiss?.({ id: message.id, timeout: false });\n    };\n    useEffect(() => {\n        if (Number.isFinite(dismissAfter)) {\n            timeoutRef.current = setTimeout(dismiss, dismissAfter);\n        }\n        return () => {\n            clearTimeout(timeoutRef.current);\n        };\n    }, []);\n    return (_jsxs(Flex, { container: { alignItems: 'center', gap: 0.25 }, as: StyledToast, ref: ref, style: {\n            '--translateY': `${-translateY}px`,\n            '--opacity': dismissed ? '0' : '1',\n            '--scale': dismissed ? '0' : '1'\n        }, onTransitionEnd: onTransitionEnd, children: [_jsx(Flex, { item: { grow: 1 }, as: StyledToastContent, children: content }), _jsx(Button, { as: StyledToastButton, variant: 'simple', onClick: dismiss, icon: true, \"aria-label\": t('dismiss_label'), children: _jsx(Icon, { name: 'times' }) })] }));\n});\nconst Toaster = ({ children, dismissAfter = Infinity, onDismiss }) => {\n    const { portalTarget } = useConfiguration();\n    const [messages, dispatch] = useReducer(reducer, []);\n    const [yOffsets, setYOffsets] = useState([]);\n    const heightHashRef = useRef({});\n    // This effect will cause a re-render with a translateY value set for each toast.\n    useLayoutEffect(() => {\n        const heights = [...messages].reverse().map(({ id }) => heightHashRef.current[id]);\n        setYOffsets(heights\n            .map((_, i) => heights.slice(0, i + 1).reduce((sum, cur) => sum + cur + 4, 0))\n            .reverse());\n    }, [messages.length]);\n    const providerValue = useMemo(() => ({\n        push(incoming) {\n            const message = {\n                ...incoming,\n                id: incoming.id ?? createUID()\n            };\n            dispatch({\n                type: 'push',\n                payload: message\n            });\n        },\n        initialized: true\n    }), [onDismiss, dismissAfter]);\n    // Don't create additional ToasterContext.Providers.\n    const context = windowIsAvailable\n        ? window.cosmos.toasterContext ?? ToasterContext\n        : ToasterContext;\n    const priorCtx = useContext(context);\n    if (priorCtx.initialized) {\n        return _jsx(context.Provider, { value: priorCtx, children: children });\n    }\n    return (_jsxs(_Fragment, { children: [_jsx(context.Provider, { value: providerValue, children: children }), !!messages.length &&\n                portalTarget &&\n                createPortal(_jsx(StyledToaster, { children: messages.map((message, i) => {\n                        return (_createElement(Toast, { ...message, translateY: yOffsets[i] ?? 0, topLevelDismiss: onDismiss, dismissAfter: message.dismissAfter ?? dismissAfter, key: message.id, dispatch: dispatch, ref: el => {\n                                if (el) {\n                                    heightHashRef.current[message.id] = el.offsetHeight;\n                                }\n                                else {\n                                    delete heightHashRef.current[message.id];\n                                }\n                            } }));\n                    }) }), portalTarget)] }));\n};\nexport default Toaster;\n//# sourceMappingURL=Toaster.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Popover from '../Popover';\nimport { useConsolidatedRef, useUID } from '../../hooks';\nimport { calculateFontSize } from '../../styles';\nexport const StyledTooltip = styled.div(({ theme }) => {\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    background-color: ${theme.components.tooltip['background-color']};\n    color: ${theme.components.tooltip['foreground-color']};\n    font-size: ${fontSize.xxs};\n    max-width: 40ch;\n    padding: ${theme.base.spacing};\n    white-space: pre-line;\n    word-break: break-word;\n    pointer-events: none;\n    z-index: ${theme.base['z-index'].tooltip};\n  `;\n});\nStyledTooltip.defaultProps = defaultThemeProp;\nconst Tooltip = forwardRef(({ children, target, showDelay = 'short', hideDelay = 'long', portal = true, placement = 'bottom', describeTarget = true, ...restProps }, ref) => {\n    const id = useUID();\n    const [show, setShow] = useState(false);\n    const tooltipRef = useConsolidatedRef(ref);\n    const lastClickedRef = useRef(null);\n    const showTooltip = useCallback(() => {\n        setShow(true);\n    }, []);\n    const onMouseDown = useCallback(({ target: eTarget }) => {\n        lastClickedRef.current = eTarget;\n        if (eTarget === tooltipRef.current || eTarget === target)\n            return;\n        setShow(false);\n    }, [target]);\n    const onFocusOut = useCallback(() => {\n        if (lastClickedRef.current !== tooltipRef.current) {\n            setShow(false);\n        }\n        lastClickedRef.current = null;\n    }, []);\n    const onMouseEnter = useCallback(() => {\n        setShow(true);\n    }, [target]);\n    const onMouseLeave = useCallback(() => {\n        if (document.activeElement !== target) {\n            setShow(false);\n        }\n    }, [target]);\n    const onKeyDown = useCallback(({ key }) => {\n        if (key === 'Escape' && document.activeElement === target) {\n            setShow(false);\n        }\n    }, [target]);\n    useEffect(() => {\n        if (!target)\n            return;\n        document.addEventListener('keydown', onKeyDown);\n        document.addEventListener('mousedown', onMouseDown);\n        target.addEventListener('focusin', showTooltip);\n        target.addEventListener('focusout', onFocusOut);\n        target.addEventListener('mouseenter', onMouseEnter);\n        target.addEventListener('mouseleave', onMouseLeave);\n        return () => {\n            document.removeEventListener('keydown', onKeyDown);\n            document.removeEventListener('mousedown', onMouseDown);\n            target.removeEventListener('focusin', showTooltip);\n            target.removeEventListener('focusout', onFocusOut);\n            target.removeEventListener('mouseenter', onMouseEnter);\n            target.removeEventListener('mouseleave', onMouseLeave);\n        };\n    }, [target, showTooltip, onMouseDown, onFocusOut, onMouseLeave, onKeyDown]);\n    useEffect(() => {\n        if (target && describeTarget && show) {\n            const describedBy = target.getAttribute('aria-describedby');\n            // Set the attribute to the old attribute plus the id\n            target.setAttribute('aria-describedby', describedBy ? `${describedBy} ${id}` : id);\n        }\n        else if (target) {\n            // Get the old attribute\n            const describedBy = target.getAttribute('aria-describedby');\n            if (describedBy) {\n                // If the old attribute matches the id just remove it entirely\n                if (describedBy === id) {\n                    target.removeAttribute('aria-describedby');\n                }\n                else {\n                    // Otherwise we want to just remove the id that was added and reset the attribute to what it was before\n                    const oldDescribedBy = describedBy.replace(new RegExp(`(?:^|\\\\s+)${id}`), '');\n                    target.setAttribute('aria-describedby', oldDescribedBy);\n                }\n            }\n        }\n    }, [describeTarget, target, show]);\n    return (_jsx(Popover, { id: id, ...restProps, show: show, showDelay: showDelay, hideDelay: hideDelay, groupId: 'tooltip', strategy: 'fixed', portal: portal, as: StyledTooltip, role: 'tooltip', target: target, arrow: true, placement: placement, onMouseDown: onMouseDown, hideOnTargetHidden: true, ref: tooltipRef, children: children }));\n});\nexport default Tooltip;\n//# sourceMappingURL=Tooltip.js.map"],"names":[],"sourceRoot":""}