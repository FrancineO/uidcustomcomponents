{"version":3,"file":"79617.ed848e4a.iframe.bundle.js","mappings":";;;AAgBA;AACA;AACA;AAGA;;;;AAMA;;;;;;;AAOA;;;AAKA;AC1BA;AACA;;AAGA;ACRA;AACA;;;;;AAKA;;;;;;;;ACsBA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;AAEA;;;AAGA;;;;;;;;;;;;AAYA;;AAEA;;AAQA;AACA;;;;AAIA;;;;;;;;;;;;;;AAcA;ACxFA;AACA;;;;;;AAMA;;AAEA;;;;AAIA;;;;AAIA;AAEA;;;AAGA;AAEA;;AAEA;AC9BA;AACA;AACA;;AAEA;;;;AAIA;AAEA;;AAEA;;;AAIA;AClBA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;;;;;;ACXA;;AAGA;AC4BA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;;;AAIA;;AAGA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;;;AAKA;AAEA;AACA;;;;AAIA;AAEA;;;;AAIA;;;;AAMA;AACA;AACA;AACA;;;;;;;AAOA;;;;;;AAOA;AAGA;AACA;AACA;;;;;AAKA;AAEA;AACA;;;AAGA;AAIA;;;AAGA;;AAIA;AAEA;AACA;;AAEA;AACA;AAEA;;;;;;;AAOA;;;;;;;AAOA;;;AAGA;AAIA;;;;;;AAMA;AAEA;AACA;;;AAGA;;;;AAIA;;;;AAIA;;;;;;;ACxLA;;;AAMA;;;;AAIA;;AAGA;AAEA;AACA;AACA;;;;;;AAMA;;AAEA;;AAEA;;;;AAIA;ACjCA;;AAEA;;;AAGA;;;;AAMA;ACZA;AACA;;AAIA;ACHA;AACA;;AAEA;;;;;AAKA;;;AAKA;;;;ACDA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;;AAOA;AAUA;;AAEA;AAEA;AACA;AACA;;;;;AAKA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;;;;;AAOA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;;;AAIA;;AAIA;;;AAGA;AACA;;;;AAIA;;;;;;AAMA;;;AAGA;AAOA;;;;AAIA;;AAEA;AACA;;AAEA;;;AAGA;;;;AAIA;AAEA;AACA;;;AAGA;;;;AASA;AACA;AACA;AACA;;AAEA;;;;AAKA;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;AAGA;AACA;;AAEA;ACpLA;;;;;;;AA8CA;;;;AAIA;;AAGA;;;;;;;;;;;;;AAaA;;;;AAIA;;;;;;;AAOA;AACA;;;;AAIA;;;;;;;;;;;;;;;;;;;;AAzEA;;AAWA;;;;;;;;;;;;AAgGA;;AChGA;AChBA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;AAKA;;;;;;;;;AASA;;;;AAIA;;;;;;;AAQA;;AAIA;AACA;;AAEA;;;AAGA;;;;AAIA;AACA;;;AAGA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;;;;AAIA;AACA;AACA;;AAEA;;;ACnFA;;AAIA;;;;;ACjBA;;;;;;;;;;;AAYA;;;;;AAKA;;;;;;;;;;;;;AAaA;;AAGA;;AAIA;;AC3BA;;;;ACPA;;;;;;;;;;;;;;;;;;;AAoBA;;AC1BA;AACA;;;;AAIA;AACA;;;;AAIA;;;AAGA;;;;AAQA;AAEA;AAEA;AAIA;;AAEA;;;;AAKA;AAEA;;;AAGA;;;AAIA;;;AAQA;AACA;;AAEA;;;;AAUA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;AAYA;;;AAGA;AACA;;AAEA;;;;;;;;;;;AAgBA;;;;;;;;AAQA;;;;;;;AAOA;AACA;;;;AAIA;AACA;;;;AAIA;ACxIA;;;;AAIA;AACA;;;AAGA;AACA;;;AAGA;;;AAGA;;;AAQA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;;;ACxBA;;;;AAIA;;AAEA;ACJA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;;AAQA;AAEA;;AAEA;;AAEA;AACA;;;AAGA;;;AAKA;;;AAMA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AC/DA;;AAGA;;;AAIA;;;;;;AAOA;;AAEA;;;;;AAKA;AACA;;;AAKA;;ACrBA;AAIA;;AAEA;;AAGA;;;;;AAOA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;;AAGA;AACA;AACA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAGA;AAIA;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAKA;AAUA;AACA;;AAEA;AAEA;AACA;AACA;;;AAGA;AC3HA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AAQA;AACA;;;;;AAKA;AACA;AACA;AAEA;;;;;AAKA;AAEA;;;;;AAKA;AAEA;;AAEA;AAEA;AACA;;;;AAIA;;;;;AAMA;AACA;;;;;AAKA;;AAEA;;;ACnDA;;;AAKA;;AAKA;AACA;;AAEA;AAGA;;AAEA;AAOA;AAEA;;;;;;;AAOA;AACA;;;AAGA;;AAEA;;;AAGA;;;AAGA;;;;AAKA;AAUA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;AAIA;;;;;;AAMA;;AC3FA;AAEA;;AAEA;;AAGA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAEA;AAOA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAEA;AAYA;AACA;;AAEA;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;;;;AAxBA;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;AAqDA;;AAEA;;;;;;;;;AASA;;;AAKA;;;;;;ACrIA;;ACZA;;;ACJA;;;;;AAKA;;;;;;;;;AASA;;;;;;;;;;;AAYA;;AAIA;AACA;AACA;;;;;;AAMA;;AAIA;;AChCA;AACA;AACA;AACA;;;ACJA;;;;AAIA;;AAIA;;;ACJA;AACA;;AAEA;;;AAGA;;;AAGA;AAMA;;AAEA;;;AAGA;;AAEA;AAKA;AACA;AAGA;;;;AASA;AACA;;;;;AAKA;;;;;;;;;AASA;;AAEA;AACA;;;;AAIA;;;;;;;;;;AAWA;AACA;;;;;;;;AAQA;AACA;;;;;AAKA;;;;AAIA;;AAEA;AAKA;AACA;;;AAGA;;AAIA;;;;;;AAQA;;;;AAIA;;AAEA;AACA;;;AAKA;;;AAKA;;;;;AAMA;AACA;AAEA;;;;ACxDA;AC9EA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;;;;;AAUA;AC7BA;AACA;AAEA;;AAGA;;;;;AASA;;;AAGA;AACA;;;;;;;;;;;;;;AAcA;AACA;;;;;;;;;AASA;AACA;;AAEA;;;;;;;AAWA;;;;;AAKA;;;;;;;AAOA;AACA;AACA;AACA;;;;AAIA;;;AAKA;AC7FA;AACA;AACA;AAGA;;ACKA;AAKA;;;;AAIA;AACA;;;AAGA;AACA;;;;AAIA;;;;;AAKA;;AAEA;;;;;AAKA;;;;AAIA;AACA;;;AAGA;AACA;;AAEA;;;;AAIA;;;AAGA;AACA;AACA;AACA;;;AAGA;AAOA;;;AAGA;;;;AAIA;;;;AAIA;;;;;;;AAOA;;;;AAIA;AAEA;;;;;;AAMA;AACA;AACA;;;AAGA;AAIA;;;;;AAKA;;;;;AAMA;AACA;AAEA;;AAGA;AACA;AAGA;AAGA;AACA;;AAIA;AAGA;AACA;AACA;;;AAGA;;AAIA;;AAMA;;;;;;;;;;;;;AAaA;AACA;;;;AAIA;;;AAGA;AACA;;AAEA;;;;AAIA;AACA;;;AAGA;;;;;AAKA;;;;;;;AAUA;AACA;;;;AAIA;AACA;;AAGA;AAGA;AAlNA;;;AAwNA;;AAIA;;;;AAKA;;;AAGA;AApOA;;;;;;;;;;;;;;;AAqPA;;;;;;;;;;;;AAgBA;;;AAGA;AACA;;;;;;;;AAQA;;;;AAIA;;;;AAIA;;AAEA;ACnRA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;AAEA;;AAEA;ACrBA;;;;AAIA;AACA;;AAIA;;AA2CA;;;;ACzDA;;;AAMA;;;;AAKA;;AAIA;;;;;;;;;;AAwBA;;ACzCA;;;;;AAOA;;ACJA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;AAKA;;;;;AAKA;AACA;;;AAGA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AAMA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;;;;AAKA;AACA;;;AAGA;;;;;;;;ACvDA;;;AAMA;;;ACVA;;AA8GA;;;;;AAKA;;;;AAtGA;AACA;;;;;AAKA;;;;;;;;;;;;;;;;;;AAkBA;AACA;;;;;;;;;;AAUA;;;;;;AAMA;AACA;;;;AAIA;AACA;;AAEA;;;;;AAYA;;AAEA;AACA;;AAEA;;;;AAIA;;;;;;AAMA;;;;;AAKA;;;;AAIA;;;;;;AAMA;AACA;;;AAGA;AAQA;;;;;;;;;;;;;;;AAgBA;;AAGA;;ACxIA;AACA;AAEA;;;AAIA;ACEA;AACA;;;;;AAOA;;;;;;AAMA;AACA;AACA;AACA;;;AAGA;;;;;;AAQA;AAGA;;;;AAMA;;ACpCA;;AAGA;;AAIA;;AAIA;AACA;;AAEA;AACA;;AAEA;;AAGA;;;AAKA;AAGA;;;AAGA;;AAGA;;AAIA;AAGA;AACA;AACA;;AAIA;AAQA;;AAEA;AACA;AACA;;AAEA;AAKA;AACA;AAGA;ACrEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;;;AAGA;AACA;AACA;;AAIA;;;;AASA;AAEA;;AAEA;;;AAWA;AAIA;;;AAGA;;AAEA;AAEA;;;;AAIA;;;;;;;AAOA;;AC9EA;;ACQA;;;;;;;AAOA;;;;AAMA;;;;;;;;;;;AChBA;;;;;AAOA;;;;;;AAOA;AACA;AACA;AACA;;;;;;;;AAQA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;AAOA;;AC5GA;AACA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;;;AAIA;AACA;;;AAGA;AAEA;;;;;AAKA;;;AAKA;;;AAKA;;AChDA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;AASA;;AAEA;;AAEA;;;;;AAMA;;;;;AAMA;;;;AAKA;;;;;;;;AAQA;;;AAKA;;ACrDA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACIA;;;;;;;;;AASA;AACA;AACA;;AAEA;AAEA;;;;;;AAMA;;;AAKA;;;;AAMA;;AC9CA;;;;AAKA;;;;;;ACCA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;;;AAKA;AAEA;;;;;;;;AAQA;;AAEA;ACtCA;AACA;;AAEA;AACA;AACA;;;;AAIA;;;;;AAKA;AACA;;AAEA;AAOA;AACA;;;;AAIA;;AAEA;;;;;;;;;AAUA;AACA;;AAIA;;;;;AAKA;AAMA;;;;;AAKA;;;AAGA;;;AAGA;;AAIA;;;;AAIA;;;;;;;AAUA;;;AAIA;;AAIA;AAEA;;AAGA;;AAQA;;;AAGA;AAEA;AACA;;;AAGA;AACA;;;AAGA;;;;;AAKA;AAEA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;;;AAGA;;;;AAIA;AACA;;;;;;;;AAQA;AAEA;AACA;AACA;AACA;;AAEA;;;;;AAKA;;AAEA;;;;;;;;AAQA;;;;AAIA;AACA;;;;AAIA;;;;;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;AAIA;;AAEA;;;AAGA;;;;AAIA;;;;AAUA;;;;;;AAOA;;;;;AAKA;;;;;;;;AASA;;;;;;;;;AAUA;;;;;AAMA;AACA;AACA;;AAIA;;;;;;;;AAQA;;;;;;;AAWA;ACzSA;;;;;;AAOA;AAGA;;;;AAMA;;;;AAIA;AAEA;;AAIA;AAGA;;;AAKA;;;AAKA;;AAGA;;;;;;;ACxBA;AACA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;;;;;AAMA;AACA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;;;AAIA;;;AAIA;;;AAGA;AAIA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAEA;;;AAKA;;;AAIA;AAEA;AAEA;AC7FA;AACA;AACA;AACA;;ACpBA;AACA;;AAEA;;;AAMA;;;;;;;;;;;ACYA;;AAGA;;;;;;AAQA;AACA;AAGA;;;;;AAOA;AACA;AACA;AACA;;;;AAIA;AACA;AAGA;;AAGA;;;;;AAOA;AC3DA;AACA;AACA;;AAEA;;;;AAIA;AACA;ACdA;;;AAKA;;;ACCA;AAKA;AACA;AACA;AACA;;;;AAIA;AACA;;;;;;;;;;;AAWA;;;;;;AAMA;;;AAGA;;;;;;;;;;AAUA;;;;;;;;;;;AAWA;;;;AAIA;;;AAGA;AACA;;;AAGA;;;;AAIA;;AChFA;;ACYA;;;;;;AAMA;;;;;AAKA;;;;AAKA;;;;;;;;;AAWA;;AC5BA;;;AAIA;AACA;AFhBA;AAAA;AEqBA;AFrBA;AEyBA;AAGA;;;;;;;ACjBA;;;AAMA;;;;AAIA;;AAGA;AAEA;AACA;AACA;;;;;;AAMA;;AAEA;;AAEA;;;;AAIA;;ACzBA;AAEA;;AAEA;;AAGA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAEA;AAOA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAEA;AAYA;AACA;;AAEA;AAEA;AACA;AACA;;;AAGA;;AC3JA;AACA;AACA;AACA;;ACNA;;AAGA;;;AAIA;;;;;;AAOA;;AAEA;;;;;AAKA;AACA;;;AAKA;AChCA;AACA;;AAIA;ACJA;;AAEA;;;AAGA;;;;AAMA;ACVA;AACA;;AAEA;;;;;AAKA;;;AAKA;AChBA;;;;;;AAOA;AAGA;;;;AAMA;;;;AAIA;AAEA;;AAIA;AAGA;;;AAKA;;;AAKA;;AAGA;;;;ACvCA;;;AAMA;;;;AAKA;;AAIA;;;;;;;;;;AAwBA;AC1CA;AACA;;;AAGA;AACA;;AAIA;ACNA;AACA;AACA;;AAEA;;;;AAIA;AACA;ACFA;AACA;;;;;;AAMA;;AAEA;;;;AAIA;;;;AAIA;AAEA;;;AAGA;AAEA;;AAEA;;ACpCA;AACA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;;;AAIA;AACA;;;AAGA;AAEA;;;;;AAKA;;;AAKA;;;AAKA;;AChDA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;AASA;;AAEA;;AAEA;;;;;AAMA;;;;;AAMA;;;;AAKA;;;;;;;;AAQA;;;AAKA;;ACrDA;AACA;AACA;AACA;ACsBA;AACA;AACA;;;;;AAKA;AACA;;;AAGA;;;AAIA;;AAGA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;;;AAKA;AAEA;AACA;;;;AAIA;AAEA;;;;AAIA;;;;AAMA;AACA;AACA;AACA;;;;;;;AAOA;;;;;;AAOA;AAGA;AACA;AACA;;;;;AAKA;AAEA;AACA;;;AAGA;AAIA;;;AAGA;;AAIA;AAEA;AACA;;AAEA;AACA;AAEA;;;;;;;AAOA;;;;;;;AAOA;;;AAGA;AAIA;;;;;;AAMA;AAEA;AACA;;;AAGA;;;;AAIA;;;;AAIA;;AChLA;AAIA;;AAEA;;AAGA;;;;;AAOA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;;AAGA;AACA;AACA;;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;AAGA;AAIA;;;;AAKA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAKA;AAUA;AACA;;AAEA;AAEA;AACA;AACA;;;AAGA;;;;;;AClHA;;;;;;;;;;;ACRA;;;;;AAOA;;;;;;AAOA;AACA;AACA;AACA;;;;;;;;AAQA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;;;AAOA;;;;AAIA;;;;;;;AAOA;AACA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;ACxFA;;;;;;;;;AASA;AACA;AACA;;AAEA;AAEA;;;;;;AAMA;;;AAKA;;;;AAMA;ACrCA;AACA;AACA;AACA","sources":["webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Dialog/Dialog.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/AdditionalInfo/AdditionalInfo.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Badges/Alert.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Avatar/Avatar.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Backdrop/Backdrop.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Badges/Count.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Badges/Status.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Button/BareButton.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Button/Button.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Card/Card.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Card/CardContent.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Card/CardFooter.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Card/CardHeader.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/RadioCheck/RadioCheck.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/styles/GlobalStyle.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/DateTime/Input/DateInput.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/DateTime/Input/DateTime.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/DateTime/Input/DateTimeInput.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/DateTime/Picker/TimePicker.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/DateTime/Input/TimeInput.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/DateTime/Input/MonthInput.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/DateTime/Picker/Calendar.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/DateTime/Picker/DatePicker.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/EmptyState/EmptyState.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/FieldGroup/FieldGroup.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/FieldValueList/FieldValueList.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Flex/Flex.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/FormControl/FormControl.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/FormField/FormField.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Grid/Grid.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/HTML/HTML.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Icon/Icon.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Image/Image.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Input/Input.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Label/Label.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/ErrorState/ErrorState.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Lightbox/Lightbox.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Lightbox/Lightbox.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Badges/Keyboard.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Link/Link.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Mark/Mark.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Menu/Menu.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Drawer/Drawer.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/MenuButton/MenuButton.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/MetaList/MetaList.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Modal/DockedModals.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Number/NumberInput.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Tabs/TabPanel.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Tabs/Tab.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Tabs/Tabs.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Breadcrumbs/Breadcrumbs.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Banner/Banner.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/PageTemplates/PageTemplates.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Paragraph/ParagraphDisplay.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Phone/PhoneInput.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Popover/Popover.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Progress/Bar.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Progress/Ellipsis.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Progress/Progress.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Progress/Ring.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/RadioCheckGroup/RadioCheckGroup.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Select/Select.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Slider/Slider.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/SummaryItem/SummaryItem.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Table/Table.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Text/Text.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/TextArea/TextArea.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Toaster/Toaster.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/Tooltip/Tooltip.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-core/lib/components/VisuallyHiddenText/VisuallyHiddenText.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/lib/components/AppAnnouncement/AppAnnouncement.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/lib/components/ConfigurableLayout/defaults.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/lib/components/ConfigurableLayout/LayoutCell.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/lib/components/ConfigurableLayout/ConfigurableLayout.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Card/Card.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Grid/Grid.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Label/Label.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/FieldValueList/FieldValueList.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Card/CardFooter.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Card/CardContent.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Card/CardHeader.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/SummaryItem/SummaryItem.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/MetaList/MetaList.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/lib/components/Glimpse/Glimpse.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Tooltip/Tooltip.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Backdrop/Backdrop.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Progress/Bar.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Progress/Ellipsis.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Progress/Progress.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Button/Button.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Flex/Flex.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Icon/Icon.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Popover/Popover.styles.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Progress/Ring.js","webpack://uidcustomcomponents/./node_modules/@pega/cosmos-react-work/node_modules/@pega/cosmos-react-core/lib/components/Text/Text.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useConsolidatedRef, useElement, useEscape, useFocusTrap, useI18n, useOuterEvent, usePrevious, useUID } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport { getFocusables } from '../../utils';\nimport Button from '../Button';\nimport { CardContent, CardFooter, CardHeader } from '../Card';\nimport Icon from '../Icon';\nimport Popover from '../Popover';\nimport Progress from '../Progress';\nimport Text from '../Text';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\nexport const StyledDialog = styled.dialog(({ theme: { base: { 'content-width': contentWidth, palette: { 'foreground-color': foregroundColor } } } }) => {\n    return css `\n      border: none;\n      min-width: ${contentWidth.sm};\n      max-width: ${contentWidth.lg};\n      color: ${foregroundColor};\n    `;\n});\nStyledDialog.defaultProps = defaultThemeProp;\nexport const StyledDialogTitle = styled(Text)(({ theme: { base: { shadow, 'border-radius': borderRadius } } }) => {\n    return css `\n      position: relative;\n      ::after {\n        content: '';\n        border-radius: ${borderRadius};\n        position: absolute;\n        inset: -0.25rem;\n      }\n      :focus-visible {\n        outline: none;\n        ::after {\n          box-shadow: ${shadow.focus}, inset ${shadow['focus-solid']};\n        }\n      }\n    `;\n});\nStyledDialogTitle.defaultProps = defaultThemeProp;\nexport const useDialog = () => {\n    const [target, setTarget] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const setTargetWithEvent = (e) => {\n        if (e.target instanceof HTMLElement) {\n            setTarget(e.target);\n        }\n    };\n    return {\n        target,\n        loading,\n        setLoading,\n        events: {\n            onMouseDown: (e) => {\n                setTargetWithEvent(e);\n            },\n            onKeyDown: (e) => {\n                if (e.key === 'Enter') {\n                    setTargetWithEvent(e);\n                }\n            }\n        },\n        setTargetWithEvent\n    };\n};\nconst Dialog = forwardRef(({ target, placement, heading, headingHidden = false, onSubmit, onClose, onOpen, loading, children, ...restProps }, ref) => {\n    const t = useI18n();\n    const headingId = useUID();\n    const [popoverEl, setPopoverEl] = useElement();\n    const popoverRef = useConsolidatedRef(ref, setPopoverEl);\n    const headingRef = useRef(null);\n    const [currentTarget, setCurrentTarget] = useState(() => target);\n    const [show, setShow] = useState(false);\n    const skipChangeShow = useRef(false);\n    const prevTarget = usePrevious(target);\n    useEscape(() => {\n        if (show) {\n            setShow(false);\n        }\n    }, undefined, [show, setShow]);\n    useOuterEvent('mousedown', [target, popoverEl], () => {\n        if (target && popoverEl && show) {\n            setShow(false);\n            onClose?.();\n        }\n    });\n    useFocusTrap(popoverRef);\n    useEffect(() => {\n        if (!show) {\n            currentTarget?.focus();\n        }\n    }, [show]);\n    useEffect(() => {\n        if (show && popoverEl) {\n            if (headingRef.current) {\n                headingRef.current.focus();\n            }\n            else {\n                const focusables = getFocusables(popoverRef);\n                focusables[0]?.focus();\n            }\n        }\n    }, [show, popoverEl]);\n    useLayoutEffect(() => {\n        const onTargetClick = (e) => {\n            setCurrentTarget(prev => (e.target ? e.target : prev));\n            if (!skipChangeShow.current) {\n                setShow(prev => !prev);\n            }\n            else {\n                skipChangeShow.current = false;\n            }\n        };\n        if (target instanceof HTMLElement) {\n            target.addEventListener('click', onTargetClick);\n        }\n        return () => {\n            if (target instanceof HTMLElement) {\n                target.removeEventListener('click', onTargetClick);\n            }\n        };\n    }, [target]);\n    useEffect(() => {\n        if (show) {\n            onOpen?.();\n        }\n        else {\n            onClose?.();\n        }\n    }, [show]);\n    useEffect(() => {\n        /* If our target is changing and the popover is already open we will want\n        to skip the next change. The next show change would come from a click on the new button,\n        the popover should stay open. */\n        if (target !== prevTarget && show) {\n            skipChangeShow.current = true;\n        }\n    }, [target, show]);\n    const onTitleKeyDown = (e) => {\n        const focusables = getFocusables(popoverRef);\n        if (e.shiftKey && e.key === 'Tab') {\n            e.preventDefault();\n            focusables[focusables.length - 1].focus();\n        }\n    };\n    const progress = loading ? _jsx(Progress, { placement: 'local' }) : null;\n    return (_jsxs(Popover, { ...restProps, as: StyledDialog, ref: popoverRef, target: currentTarget, placement: placement, show: show, open: show, \"aria-labelledby\": headingId, children: [_jsx(CardHeader, { actions: !onSubmit ? (_jsx(Button, { icon: true, variant: 'simple', onClick: () => setShow(false), \"aria-label\": t('close'), children: _jsx(Icon, { name: 'times' }) })) : undefined, children: headingHidden ? (_jsx(VisuallyHiddenText, { id: headingId, children: heading })) : (_jsx(StyledDialogTitle, { variant: 'h2', tabIndex: -1, ref: headingRef, onKeyDown: onTitleKeyDown, id: headingId, children: heading })) }), _jsxs(CardContent, { children: [children, progress] }), onSubmit && (_jsxs(CardFooter, { justify: 'between', children: [_jsx(Button, { variant: 'secondary', onClick: () => setShow(false), children: t('cancel') }), _jsx(Button, { variant: 'primary', onClick: () => onSubmit({ close: () => setShow(false) }), disabled: loading, children: t('submit') })] }))] }));\n});\nexport default Dialog;\n//# sourceMappingURL=Dialog.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Icon, { registerIcon } from '../Icon';\nimport { defaultThemeProp } from '../../theme';\nimport HTML from '../HTML';\nimport Button from '../Button';\nimport Dialog, { useDialog } from '../Dialog';\nimport * as informationIcon from '../Icon/icons/information.icon';\nimport { useI18n } from '../../hooks';\nimport { StyledDialog } from '../Dialog/Dialog';\nregisterIcon(informationIcon);\nexport const StyledAdditionalInfo = styled.div(({ theme }) => css `\n    & > ${StyledDialog} {\n      max-width: ${theme.base['content-width'].md};\n    }\n  `);\nStyledAdditionalInfo.defaultProps = defaultThemeProp;\nconst AdditionalInfo = forwardRef(({ heading, children, ...restProps }, ref) => {\n    const { target, events } = useDialog();\n    const t = useI18n();\n    return (_jsxs(StyledAdditionalInfo, { ref: ref, ...restProps, children: [_jsx(Button, { variant: 'simple', label: t('additional_info'), compact: true, icon: true, ...events, children: _jsx(Icon, { name: 'information' }) }), _jsx(Dialog, { heading: heading, target: target, children: typeof children === 'string' ? _jsx(HTML, { content: children }) : children })] }));\n});\nexport default AdditionalInfo;\n//# sourceMappingURL=AdditionalInfo.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledAlert = styled.div(props => {\n    const alerts = props.theme.components.badges.alert;\n    const { background } = alerts[props.variant];\n    const { 'border-color': borderColor } = alerts.base;\n    return css `\n    background: ${background};\n    border: 0.0625rem solid ${borderColor};\n    border-radius: 100%;\n    display: inline-block;\n    height: 0.625rem;\n    width: 0.625rem;\n  `;\n});\nStyledAlert.defaultProps = defaultThemeProp;\nconst Alert = forwardRef((props, ref) => {\n    const { variant, ...restProps } = props;\n    return _jsx(StyledAlert, { ...restProps, variant: variant, ref: ref });\n});\nexport default Alert;\n//# sourceMappingURL=Alert.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { readableColor, rgba } from 'polished';\nimport Image from '../Image';\nimport { defaultThemeProp } from '../../theme';\nimport Icon, { StyledIcon } from '../Icon';\nimport { Alert } from '../Badges';\nimport { useI18n } from '../../hooks';\nimport { tryCatch } from '../../utils';\nconst sizeToRem = {\n    s: 1,\n    m: 2,\n    l: 2.5,\n    xl: 4\n};\nconst fontSizeToRem = {\n    s: 0.5625,\n    m: 0.8125,\n    l: 1,\n    xl: 1.5\n};\nconst sizeToBorderRadius = {\n    s: 0.25,\n    m: 0.5,\n    l: 1,\n    xl: 1\n};\nexport const StyledAvatarImage = styled(Image) `\n  min-height: 100%;\n  min-width: 100%;\n  aspect-ratio: 1 / 1;\n  object-fit: cover;\n  border-radius: inherit;\n  height: fit-content;\n  width: fit-content;\n`;\nexport const StyledAvatar = styled.div(({ hasBrokenImage, hasSrc, size, shape, color, backgroundColor, theme: { base: { palette: { 'foreground-color': foregroundColor, 'primary-background': primaryBackground } }, components: { avatar } } }) => {\n    const sizeRem = sizeToRem[size];\n    const fontSize = fontSizeToRem[size];\n    let bgColor = hasSrc && !hasBrokenImage ? primaryBackground : backgroundColor || avatar['background-color'];\n    if (color && !backgroundColor && !(hasSrc && !hasBrokenImage))\n        bgColor = tryCatch(() => readableColor(color), () => avatar['background-color']);\n    const shadowColor = tryCatch(() => rgba(foregroundColor, 0.1));\n    const iconColor = color || tryCatch(() => readableColor(bgColor));\n    return css `\n      position: relative;\n      background-color: ${bgColor};\n      color: ${iconColor};\n      width: ${sizeRem}rem;\n      height: ${sizeRem}rem;\n      min-width: ${sizeRem}rem;\n      min-height: ${sizeRem}rem;\n      font-size: ${fontSize}rem;\n      text-transform: uppercase;\n      line-height: ${sizeRem}rem;\n      text-align: center;\n      vertical-align: top;\n      display: inline-block;\n      border-radius: 100%;\n      user-select: none;\n      -webkit-user-select: none;\n\n      ${shape === 'squircle' &&\n        css `\n        border-radius: calc(${sizeToBorderRadius[size]} * ${avatar['border-radius']});\n      `}\n\n      ${StyledIcon} {\n        width: 50%;\n        height: 100%;\n        vertical-align: initial;\n      }\n\n      ::after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        border-radius: inherit;\n        pointer-events: none;\n        box-shadow: inset 0 0 0 0.0625rem ${shadowColor};\n      }\n    `;\n});\nStyledAvatar.defaultProps = defaultThemeProp;\nexport const StyledStatus = styled.div(({ size, theme }) => {\n    /** Scales alert badge dimensions based on size of avatar */\n    const sizeDimensions = (0.625 * sizeToRem[size]) / sizeToRem.m;\n    return css `\n    position: absolute;\n    height: ${sizeDimensions}rem;\n    width: ${sizeDimensions}rem;\n    inset-block-end: 0;\n    inset-inline-end: 0;\n    z-index: 1;\n    animation: pop calc(${theme.base.animation.speed} * 2) cubic-bezier(1, 1.65, 0.3, 1.24);\n\n    @keyframes pop {\n      0% {\n        opacity: 0;\n        transform: scale(0);\n      }\n      50% {\n        opacity: 1;\n      }\n      100% {\n        transform: scale(1);\n      }\n    }\n  `;\n});\nStyledStatus.defaultProps = defaultThemeProp;\n/**\n * Helper function to construct a two or one letter initial from the title prop.\n * This text will be displayed if no valid image source is provided.\n * @param name\n * @param size\n */\nconst getInitials = (name, size) => {\n    const words = name.split(' ');\n    const firstInitial = words[0][0];\n    return words.length === 1 || size === 's' ? firstInitial : `${firstInitial}${words[1][0]}`;\n};\n/**\n * Generally, avatars are used to distinguish between different operators and\n * objects when they are shown in a list or in a small space. Users of applications\n * can upload a custom avatar of their choice.\n */\nconst Avatar = forwardRef((props, ref) => {\n    const { shape = 'circle', size = 'm', imageSrc, icon, name, status, onImageError, ...restProps } = props;\n    const [hasBrokenImage, setHasBrokenImage] = useState();\n    const t = useI18n();\n    useEffect(() => {\n        setHasBrokenImage(undefined);\n    }, [imageSrc]);\n    const content = useMemo(() => {\n        if (icon) {\n            return _jsx(Icon, { name: icon });\n        }\n        if (imageSrc && !hasBrokenImage) {\n            return (_jsx(StyledAvatarImage, { src: imageSrc, alt: name, onError: (e) => {\n                    setHasBrokenImage(true);\n                    onImageError?.(e);\n                }, onLoad: () => {\n                    setHasBrokenImage(false);\n                } }));\n        }\n        return getInitials(name, size);\n    }, [imageSrc, name, size, icon, hasBrokenImage, onImageError]);\n    return (_jsxs(StyledAvatar, { role: 'img', hasSrc: !!imageSrc, hasBrokenImage: hasBrokenImage, shape: shape, size: size, ref: ref, \"aria-label\": `${name}${status ? ` ${t('status')} ${status}` : ''}`, ...restProps, children: [content, status === 'active' && _jsx(Alert, { as: StyledStatus, size: size, variant: 'success' })] }));\n});\nexport default Avatar;\n//# sourceMappingURL=Avatar.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState, useCallback, useMemo, forwardRef, createContext } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { reflow } from '../../utils';\nimport Flex from '../Flex';\nimport { useConsolidatedRef, useElement } from '../../hooks';\nexport const BackdropContext = createContext({\n    el: null\n});\nconst transitionSpeedToTheme = {\n    slow: 2,\n    medium: 1,\n    fast: 0.5,\n    none: 0\n};\nexport const StyledBackdrop = styled.div(props => {\n    const { theme: { base } } = props;\n    const { opacity, alpha, variant, position } = props;\n    const transitionDuration = `max(calc(${transitionSpeedToTheme[props.transitionSpeed]} * ${base.animation.speed}), 1ms)`;\n    return css `\n    position: ${position};\n    z-index: ${position === 'fixed' ? base['z-index'].backdrop : base['z-index'].popover + 1};\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    border-radius: inherit;\n    opacity: ${opacity};\n    transition-property: opacity;\n    transition-timing-function: ${props.theme.base.animation.timing.ease};\n\n    /* stylelint-disable declaration-block-no-duplicate-properties */\n    transition-duration: 1ms;\n    transition-duration: ${transitionDuration};\n\n    /* stylelint-enable declaration-block-no-duplicate-properties */\n\n    ${variant === 'dark' &&\n        css `\n      background: rgba(0, 0, 0, ${alpha});\n    `}\n\n    ${variant === 'light' &&\n        css `\n      background: rgba(255, 255, 255, ${alpha});\n    `}\n  `;\n});\nStyledBackdrop.defaultProps = defaultThemeProp;\nconst Backdrop = forwardRef((props, ref) => {\n    const { children, container, open = false, variant = 'dark', transitionSpeed = 'medium', alpha = 0.6, position = 'fixed', onBeforeTransitionIn, onAfterTransitionIn, onBeforeTransitionOut, onAfterTransitionOut, ...restProps } = props;\n    const [state, setState] = useState('closed');\n    const [backdropEl, setBackdropEl] = useElement();\n    const backdropRef = useConsolidatedRef(ref, setBackdropEl);\n    const onTransitionEnd = useCallback((e) => {\n        if (e.propertyName !== 'opacity' || e.target !== e.currentTarget)\n            return;\n        let nextState;\n        if (state === 'closing') {\n            nextState = 'closed';\n            onAfterTransitionOut?.();\n        }\n        else {\n            nextState = 'open';\n            onAfterTransitionIn?.();\n        }\n        setState(nextState);\n    }, [state, onAfterTransitionOut, onAfterTransitionIn]);\n    useEffect(() => {\n        if (open) {\n            if (state === 'closed' || state === 'closing') {\n                onBeforeTransitionIn?.();\n                reflow();\n                setState('opening');\n            }\n        }\n        else if (state === 'open' || state === 'opening') {\n            onBeforeTransitionOut?.();\n            setState('closing');\n        }\n    }, [open, onBeforeTransitionIn, onBeforeTransitionOut]);\n    const ctxValue = useMemo(() => ({ el: backdropEl }), [backdropEl]);\n    return !open && state === 'closed' ? null : (_jsx(BackdropContext.Provider, { value: ctxValue, children: _jsx(Flex, { container: { justify: 'center', alignItems: 'center', ...container }, as: StyledBackdrop, transitionSpeed: transitionSpeed, opacity: state === 'opening' || state === 'open' ? 1 : 0, alpha: alpha, variant: variant, position: position, onTransitionEnd: onTransitionEnd, ref: backdropRef, ...restProps, children: children }) }));\n});\nexport default Backdrop;\n//# sourceMappingURL=Backdrop.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { mix, transparentize } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils/utils';\nimport { calculateFontSize } from '../../styles';\nexport const StyledCount = styled.span(props => {\n    const { foreground, background } = props.variant === 'default'\n        ? props.theme.components.badges.count.base\n        : props.theme.components.badges.count[props.variant];\n    const invertedBackground = tryCatch(() => transparentize(0.5, mix(0.2, background, '#ffffff')));\n    const displayBackground = props.variant === 'inverted' ? invertedBackground : background;\n    const borderRadius = props.theme.base['border-radius'];\n    const { spacing } = props.theme.base;\n    const fontSize = calculateFontSize(props.theme.base['font-size'], props.theme.base['font-scale']);\n    return css `\n    background: ${displayBackground};\n    border-radius: calc(1.125 * ${borderRadius});\n    color: ${foreground};\n    display: inline-block;\n    font-size: ${fontSize.xxs};\n    font-weight: bold;\n    line-height: normal;\n    text-align: center;\n    ${props.children.length > 1 &&\n        css `\n      padding: 0 ${spacing};\n    `}\n    ${props.children.length === 1 &&\n        css `\n      width: 1.125rem;\n    `}\n  `;\n});\nStyledCount.defaultProps = defaultThemeProp;\n// Replace this with Intl.NumberDisplay when roundingMode is supported.\n/* eslint-disable yoda */\nconst getLabel = (val) => {\n    if (val < 1000)\n        return '';\n    if (1000 <= val && val < 1000000)\n        return 'K';\n    if (1000000 <= val && val < 1000000000)\n        return 'M';\n    if (1000000000 <= val && val < 1000000000000)\n        return 'B';\n    if (1000000000000 <= val && val < 1000000000000000)\n        return 'T';\n    return '';\n};\n/* eslint-enable yoda */\nconst truncateValue = (val) => {\n    for (let magnitude = 3; magnitude < 15; magnitude += 3) {\n        if (val < 10 ** (magnitude + 1)) {\n            return `${`${val}`.slice(0, 1)}.${`${val}`.slice(1, 2)}${getLabel(val)}`;\n        }\n        if (val < 10 ** (magnitude + 2)) {\n            return `${`${val}`.slice(0, 2)}${getLabel(val)}`;\n        }\n        if (val < 10 ** (magnitude + 3)) {\n            return `${`${val}`.slice(0, 3)}${getLabel(val)}`;\n        }\n    }\n    return '999T+';\n};\nconst formatValue = (val) => {\n    const absVal = Math.abs(val);\n    if (absVal < 1000)\n        return `${val}`;\n    return `${val < 0 ? '-' : ''}${truncateValue(absVal)}`;\n};\nconst Count = forwardRef((props, ref) => {\n    const { variant = 'default', children, ...restProps } = props;\n    return Number.isInteger(children) ? (_jsx(StyledCount, { variant: variant, ...restProps, ref: ref, children: formatValue(children) })) : null;\n});\nexport default Count;\n//# sourceMappingURL=Count.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rgba } from 'polished';\nimport { calculateFontSize } from '../../styles';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nexport const StyledStatus = styled.span(props => {\n    const { spacing } = props.theme.base;\n    const borderRadius = props.theme.base['border-radius'];\n    const { status } = props.theme.components.badges;\n    const { background, foreground } = status[props.variant];\n    const shadow = tryCatch(() => rgba(foreground, 0.1));\n    const fontSize = calculateFontSize(props.theme.base['font-size'], props.theme.base['font-scale']);\n    return css `\n    background-color: ${background};\n    border-radius: calc(0.25 * ${borderRadius});\n    color: ${foreground};\n    box-shadow: inset 0 0 0 0.0625rem ${shadow};\n    display: inline-block;\n    font-size: ${fontSize.xxs};\n    font-weight: bold;\n    line-height: calc(${spacing} * 2.5);\n    padding: 0 ${spacing};\n    text-transform: uppercase;\n  `;\n});\nStyledStatus.defaultProps = defaultThemeProp;\nconst Status = forwardRef(({ variant, children, ...restProps }, ref) => {\n    return (_jsx(StyledStatus, { ...restProps, variant: variant, ref: ref, children: children }));\n});\nStatus.defaultProps = {\n    variant: 'info'\n};\nexport default Status;\n//# sourceMappingURL=Status.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { useConsolidatedRef } from '../../hooks';\nexport const StyledBareButton = styled.button `\n  background: none;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  user-select: none;\n  color: inherit;\n\n  & + & {\n    margin-inline-start: ${props => props.theme.base.spacing};\n  }\n`;\nStyledBareButton.defaultProps = defaultThemeProp;\nconst BareButton = forwardRef(({ type = 'button', disabled = false, href, ...restProps }, ref) => {\n    const mouseDownEvent = useRef();\n    const buttonRef = useConsolidatedRef(ref);\n    useEffect(() => {\n        return () => {\n            mouseDownEvent.current = undefined;\n        };\n    }, []);\n    return (_jsx(StyledBareButton, { ref: buttonRef, as: href ? 'a' : undefined, type: href ? undefined : type, disabled: disabled, ...restProps, href: href, onMouseDown: (e) => {\n            restProps.onMouseDown?.(e);\n            e.persist();\n            mouseDownEvent.current = e;\n        }, onMouseUp: (e) => {\n            const shouldFocus = mouseDownEvent.current && !mouseDownEvent.current.defaultPrevented;\n            mouseDownEvent.current = undefined;\n            if (shouldFocus && buttonRef.current !== document.activeElement) {\n                buttonRef.current?.focus();\n            }\n            return restProps.onMouseUp?.(e);\n        } }));\n});\nexport default BareButton;\n//# sourceMappingURL=BareButton.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useRef, useEffect, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { mix, readableColor } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { getHoverColors, omitProps } from '../../styles';\nimport { useElement, useConsolidatedRef } from '../../hooks';\nimport Tooltip from '../Tooltip';\nimport Progress, { StyledProgressRing } from '../Progress';\nimport { StyledBackdrop } from '../Backdrop';\nimport { StyledIcon } from '../Icon';\nimport { StyledPopover } from '../Popover';\nexport const StyledButton = styled.button.withConfig(omitProps('loading'))(({ variant, icon, loading, compact, theme: { base: { spacing, 'border-radius': baseBorderRadius, palette: { 'primary-background': backgroundColor, 'foreground-color': textColor }, 'hit-area': { 'mouse-min': hitAreaMouse, 'finger-min': hitAreaFinger, 'compact-min': hitAreaCompact }, animation: { speed, timing: { ease } }, 'disabled-opacity': disabledOpacity }, components: { button: { color, 'secondary-color': secondaryColor, padding, 'border-radius': borderRadius, 'border-width': borderWidth, 'focus-shadow': focusShadow, touch: { padding: touchPadding } }, link: { color: linkColor } } } }) => {\n    const borderColor = variant === 'secondary' ? color : 'transparent';\n    const contrastColor = tryCatch(() => readableColor(color));\n    const hoverColors = getHoverColors(color);\n    const hoverPrimaryColor = hoverColors.background;\n    const hoverContrastColor = hoverColors.foreground;\n    const secondaryHoverColor = tryCatch(() => mix(0.85, secondaryColor, color));\n    let buttonColor = contrastColor;\n    let buttonBackgroundColor = color;\n    if (variant === 'secondary') {\n        buttonColor = color;\n        buttonBackgroundColor = secondaryColor;\n    }\n    else if (variant === 'simple') {\n        if (icon) {\n            buttonColor = 'currentColor';\n            buttonBackgroundColor = 'transparent';\n        }\n        else {\n            buttonColor = color;\n            buttonBackgroundColor = backgroundColor;\n        }\n    }\n    else if (variant === 'link') {\n        buttonColor = linkColor;\n        buttonBackgroundColor = 'transparent';\n    }\n    else if (variant === 'text') {\n        buttonColor = textColor;\n        buttonBackgroundColor = 'transparent';\n    }\n    return css `\n      color: ${buttonColor};\n      background-color: ${buttonBackgroundColor};\n      display: ${variant === 'link' || variant === 'text' ? 'inline' : 'inline-flex'};\n      align-items: center;\n      outline: none;\n      text-decoration: none;\n      transition-property: background-color, color, box-shadow;\n      transition-duration: calc(0.5 * ${speed});\n      transition-timing-function: ${ease};\n      cursor: pointer;\n\n      ${variant !== 'link' && variant !== 'text'\n        ? css `\n            justify-content: center;\n            line-height: 1;\n            border: ${borderWidth} solid ${borderColor};\n            position: relative;\n          `\n        : css `\n            text-align: start;\n            border: none;\n\n            > ${StyledIcon} {\n              vertical-align: bottom;\n            }\n          `}\n\n      & + & {\n        margin-inline-start: ${spacing};\n      }\n\n      /* Not able to combine with selector above. Stylis bug? */\n      & + ${StyledPopover} + & {\n        margin-inline-start: ${spacing};\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          ${variant === 'primary' &&\n        css `\n            background-color: ${hoverPrimaryColor};\n            color: ${hoverContrastColor};\n            text-decoration: none;\n          `}\n\n          ${(variant === 'secondary' || (variant === 'simple' && !icon)) &&\n        css `\n            background-color: ${secondaryHoverColor};\n            text-decoration: none;\n          `}\n\n          ${variant === 'simple' &&\n        icon &&\n        css `\n            ::before {\n              content: '';\n              position: absolute;\n              top: calc(${borderWidth} * -1);\n              bottom: calc(${borderWidth} * -1);\n              left: calc(${borderWidth} * -1);\n              right: calc(${borderWidth} * -1);\n              border-radius: inherit;\n              background-color: currentColor;\n              opacity: 0.15;\n            }\n          `}\n\n          ${(variant === 'link' || variant === 'text') &&\n        css `\n            text-decoration: underline;\n          `}\n        }\n      }\n\n      ${variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        min-height: ${hitAreaMouse};\n        min-width: ${hitAreaMouse};\n        border-radius: calc(${baseBorderRadius} * ${borderRadius});\n        -webkit-user-select: none;\n        user-select: none;\n      `}\n\n      ${compact &&\n        css `\n        min-height: ${hitAreaCompact};\n        min-width: ${hitAreaCompact};\n      `}\n\n      ${!icon &&\n        variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        padding: ${padding};\n      `}\n\n      ${variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        @media (pointer: coarse) {\n          ${!compact &&\n            css `\n            min-height: ${hitAreaFinger};\n            min-width: ${hitAreaFinger};\n          `}\n          border-radius: calc(${baseBorderRadius} * ${borderRadius});\n          ${!icon &&\n            css `\n            padding: ${touchPadding};\n          `}\n        }\n      `}\n\n      &:disabled,\n      &[disabled] {\n        opacity: ${disabledOpacity};\n        cursor: not-allowed;\n        pointer-events: none;\n      }\n\n      &:enabled:focus,\n      &:not([disabled]):focus {\n        box-shadow: ${focusShadow};\n      }\n\n      ${icon &&\n        variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        border-radius: calc(${baseBorderRadius} * ${borderRadius});\n        > svg {\n          display: block;\n        }\n      `}\n\n      ${loading &&\n        css `\n        ${StyledBackdrop} {\n          background-color: ${buttonBackgroundColor};\n          border-radius: inherit;\n        }\n        ${StyledProgressRing} {\n          width: 1em;\n          height: 1em;\n          circle:nth-child(2) {\n            animation-duration: calc(${speed} * 2);\n          }\n        }\n      `}\n    `;\n});\nStyledButton.defaultProps = defaultThemeProp;\nconst Button = forwardRef(({ variant = 'secondary', type = 'button', disabled = false, icon = false, compact = false, href, as, forwardedAs, label, 'aria-label': ariaLabel, loading = false, children, ...restProps }, ref) => {\n    const [buttonEl, setButtonEl] = useElement();\n    const mouseDownEvent = useRef();\n    const buttonRef = useConsolidatedRef(ref, setButtonEl);\n    const showProgress = loading && variant !== 'link' && variant !== 'text';\n    useEffect(() => {\n        return () => {\n            mouseDownEvent.current = undefined;\n        };\n    }, []);\n    return (_jsxs(_Fragment, { children: [_jsxs(StyledButton, { ...restProps, ref: buttonRef, as: as || (href ? 'a' : 'button'), forwardedAs: forwardedAs || (href ? 'a' : 'button'), variant: variant, icon: icon, compact: compact, type: href ? undefined : type, href: href, disabled: disabled && !href, loading: showProgress, \"aria-label\": ariaLabel || label, onMouseDown: (e) => {\n                    restProps.onMouseDown?.(e);\n                    e.persist();\n                    mouseDownEvent.current = e;\n                }, onMouseUp: (e) => {\n                    const shouldFocus = mouseDownEvent.current && !mouseDownEvent.current.defaultPrevented;\n                    mouseDownEvent.current = undefined;\n                    if (shouldFocus && buttonRef.current !== document.activeElement) {\n                        buttonRef.current?.focus();\n                    }\n                    return restProps.onMouseUp?.(e);\n                }, children: [showProgress && _jsx(Progress, { variant: 'ring', placement: 'local' }), children] }), buttonEl && label && (_jsx(Tooltip, { target: buttonEl, showDelay: 'none', hideDelay: 'none', describeTarget: false, children: label }))] }));\n});\nexport default Button;\n//# sourceMappingURL=Button.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCardMedia } from './CardMedia';\nconst defaultProps = {\n    interactive: false,\n    role: 'region'\n};\nexport const StyledCard = styled.article(props => {\n    const { 'border-radius': borderRadius, 'border-color': borderColor, background } = props.theme.components.card;\n    const interactive = props.interactive\n        ? css `\n        &:hover {\n          border: 0;\n          box-shadow: 0 0 0 0.0625rem ${borderColor};\n        }\n        &:focus {\n          border: 0;\n          box-shadow: 0 0 0 0.125rem ${borderColor};\n        }\n      `\n        : undefined;\n    return css `\n    ${StyledPopover} &, &:not(& &) {\n      background-color: ${background};\n      border-radius: ${borderRadius};\n\n      &:focus {\n        outline: none;\n      }\n\n      ${interactive}\n\n      ${StyledCardMedia} {\n        &:first-child img {\n          border-radius: ${borderRadius} ${borderRadius} 0 0;\n        }\n      }\n    }\n  `;\n});\nStyledCard.defaultProps = defaultThemeProp;\nconst Card = forwardRef((props, ref) => {\n    const { children, as, onClick, interactive, role, ...restProps } = props;\n    const interactiveProps = {\n        ...(onClick && {\n            onClick,\n            tabIndex: 0,\n            role: 'button'\n        }),\n        ...(interactive && {\n            tabIndex: 0\n        }),\n        ...(role && { role }),\n        interactive\n    };\n    return (_jsx(Flex, { container: { direction: 'column' }, as: StyledCard, forwardedAs: as, ref: ref, ...interactiveProps, ...restProps, children: children }));\n});\nCard.defaultProps = defaultProps;\nexport default Card;\n//# sourceMappingURL=Card.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCard } from './Card';\nimport { StyledCardFooter } from './CardFooter';\nexport const StyledCardContent = styled.div(({ theme }) => {\n    return css `\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      position: relative;\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      & + &,\n      & + ${StyledCardFooter} {\n        padding-block-start: 0;\n      }\n    }\n  `;\n});\nStyledCardContent.defaultProps = defaultThemeProp;\nconst CardContent = ({ children, container, ...restProps }) => {\n    return (_jsx(Flex, { ...restProps, container: { direction: 'column', ...container }, as: StyledCardContent, children: children }));\n};\nexport default CardContent;\n//# sourceMappingURL=CardContent.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCard } from './Card';\nexport const StyledCardFooter = styled.footer(({ theme }) => {\n    return css `\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n    }\n  `;\n});\nStyledCardFooter.defaultProps = defaultThemeProp;\nconst CardFooter = (props) => {\n    const { children, justify, ...restProps } = props;\n    return (_jsx(Flex, { as: StyledCardFooter, container: {\n            wrap: 'wrap',\n            alignItems: 'center',\n            justify\n        }, ...restProps, children: children }));\n};\nexport default CardFooter;\n//# sourceMappingURL=CardFooter.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCard } from './Card';\nimport { StyledCardContent } from './CardContent';\nexport const StyledCardHeader = styled.header(({ theme, onClick }) => {\n    return css `\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      + ${StyledCardContent} {\n        padding-block-start: 0;\n      }\n\n      &:hover {\n        ${onClick ? 'cursor: pointer;' : undefined}\n      }\n    }\n  `;\n});\nStyledCardHeader.defaultProps = defaultThemeProp;\nconst CardHeader = forwardRef(({ children, actions, ...restProps }, ref) => {\n    return (_jsx(Flex, { container: { alignItems: 'center', justify: 'between' }, as: StyledCardHeader, ...restProps, ref: ref, children: actions ? (_jsxs(_Fragment, { children: [_jsx(Flex, { container: { alignItems: 'center' }, item: { grow: 1 }, children: children }), _jsx(\"div\", { children: actions })] })) : (children) }));\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;\n//# sourceMappingURL=CardHeader.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { readableColor, hideVisually, mix } from 'polished';\nimport FormField from '../FormField';\nimport { StyledFormControl } from '../FormControl';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils/utils';\nimport { useConsolidatedRef, useDirection, useI18n, useUID } from '../../hooks';\nimport { StyledLabel } from '../Label';\nimport { calculateFontSize } from '../../styles';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\nexport const StyledPseudoRadioCheck = styled.div(props => {\n    const { theme: { base: { spacing, palette: { 'primary-background': primaryBackground } }, components: { 'form-field': formField, 'radio-check': { size, 'touch-size': touchSize, 'background-color': backgroundColor, 'border-color': borderColor, 'border-width': borderWidth } } }, status } = props;\n    const useBorderColor = status === 'error' ? formField.error['status-color'] : borderColor;\n    const useBackgroundColor = status && formField[status]\n        ? tryCatch(() => mix(0.8, primaryBackground, formField[status]['status-color']))\n        : backgroundColor;\n    return css `\n      display: flex;\n      flex-shrink: 0;\n      position: relative;\n      width: ${size};\n      height: ${size};\n      margin-inline-end: calc(${spacing} / 2);\n      border: ${borderWidth} solid ${useBorderColor};\n      background-color: ${useBackgroundColor};\n\n      @media (pointer: coarse) {\n        width: ${touchSize};\n        height: ${touchSize};\n      }\n\n      &::after {\n        content: '';\n        display: none;\n      }\n    `;\n});\nStyledPseudoRadioCheck.defaultProps = defaultThemeProp;\nexport const StyledRadioCheckInput = styled.input(props => {\n    const { disabled, theme: { base: { 'border-radius': baseBorderRadius }, components: { 'form-control': { ':focus': { 'box-shadow': shadow, 'border-color': focusBorderColor }, ':read-only': { 'background-color': readOnlyBackgroundColor } }, 'radio-check': { ':checked': { 'background-color': checkedBackgroundColor, 'border-color': checkedBorderColor } }, checkbox: { 'border-radius': checkRadius }, 'radio-button': { 'border-radius': radioRadius } } } } = props;\n    const backgroundColor = props.readOnly ? readOnlyBackgroundColor : checkedBackgroundColor;\n    const foreground = tryCatch(() => readableColor(backgroundColor));\n    const prcSelector = `+ ${StyledLabel} ${StyledPseudoRadioCheck}`;\n    const { ltr } = useDirection();\n    return css `\n    ${hideVisually}\n\n    ${!disabled &&\n        css `\n      &:focus ${prcSelector} {\n        box-shadow: ${shadow};\n        border-color: ${focusBorderColor};\n      }\n    `}\n\n    &:checked\n      ${prcSelector},\n      &:checked:disabled\n      ${prcSelector},\n      &[type='checkbox']:indeterminate\n      ${prcSelector},\n      &[type='checkbox']:indeterminate:disabled\n      ${prcSelector} {\n      border-color: ${props.readOnly ? 'inherit' : checkedBorderColor};\n      background-color: ${backgroundColor};\n\n      &::after {\n        display: block;\n      }\n    }\n\n    &[type='radio'] ${prcSelector}, &[type='radio'] ${prcSelector}::after {\n      border-radius: ${radioRadius};\n    }\n\n    &[type='radio'] ${prcSelector}::after {\n      margin: auto;\n      width: 100%;\n      height: 100%;\n      background-color: ${foreground};\n      transform: scale(0.4);\n    }\n\n    &[type='checkbox'] ${prcSelector} {\n      border-radius: min(calc(${baseBorderRadius} * ${checkRadius}), 0.25rem);\n    }\n\n    &[type='checkbox']:not(:indeterminate) ${prcSelector} {\n      &::after {\n        width: 40%;\n        height: 75%;\n        ${ltr\n        ? css `\n              transform: rotate(45deg) translate(50%, -30%);\n            `\n        : css `\n              transform: rotate(45deg) translate(-50%, 30%);\n            `}\n        border-right: 0.15em solid ${foreground};\n        border-bottom: 0.15em solid ${foreground};\n      }\n    }\n\n    &[type='checkbox']:indeterminate ${prcSelector} {\n      display: flex;\n      &::after {\n        width: 90%;\n        height: 0.15em;\n        margin: auto;\n        background-color: ${foreground};\n      }\n    }\n  `;\n});\nStyledRadioCheckInput.defaultProps = defaultThemeProp;\nexport const StyledRadioCheck = styled.div(props => {\n    const { disabled, readOnly, theme: { base, components: { 'radio-check': { label: { color: labelColor, 'font-weight': labelFontWeight } }, 'form-control': { ':hover': { 'border-color': hoverBorderColor } } } } } = props;\n    const fontSize = calculateFontSize(base['font-size'], base['font-scale']);\n    return css `\n      > ${StyledLabel} {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        font-weight: ${labelFontWeight};\n        word-break: break-word;\n        font-size: ${fontSize.s};\n        color: ${labelColor};\n        margin: 0;\n        min-height: ${base['hit-area']['mouse-min']};\n\n        @media (pointer: coarse) {\n          min-height: ${base['hit-area']['finger-min']};\n        }\n      }\n\n      ${!(disabled || readOnly) &&\n        css `\n        &:not(:focus-within) > ${StyledLabel}:hover ${StyledPseudoRadioCheck} {\n          border-color: ${hoverBorderColor};\n        }\n      `}\n    `;\n});\nStyledRadioCheck.defaultProps = defaultThemeProp;\nexport const StyledRadioCheckCard = styled.label(({ disabled, readOnly, status, theme: { base: { palette, shadow, spacing }, components: { card, 'form-field': formField, 'radio-check': { label }, 'form-control': { ':hover': { 'border-color': hoverBorderColor } } } } }) => {\n    const useBorderColor = status === 'error' ? formField.error['status-color'] : palette['border-line'];\n    return css `\n      min-width: min-content;\n      align-items: start;\n      cursor: pointer;\n      background-color: ${card.background};\n      border-radius: ${card['border-radius']};\n      border: 0.0625rem solid ${useBorderColor};\n      padding: ${spacing};\n\n      ${disabled &&\n        css `\n        cursor: not-allowed;\n      `}\n\n      ${!(disabled || readOnly) &&\n        css `\n        :hover:not(:focus-within) {\n          border-color: ${hoverBorderColor};\n          ${StyledLabel} ${StyledPseudoRadioCheck} {\n            border-color: ${hoverBorderColor};\n          }\n        }\n\n        :focus-within {\n          box-shadow: ${shadow.focus};\n          border-color: transparent;\n        }\n      `}\n\n    > ${StyledLabel} {\n        display: grid;\n        grid-template-columns: auto 1fr;\n        color: ${label.color};\n        font-weight: ${label['font-weight']};\n      }\n    `;\n});\nStyledRadioCheckCard.defaultProps = defaultThemeProp;\nconst RadioCheck = forwardRef((props, ref) => {\n    const uid = useUID();\n    const t = useI18n();\n    const { type, id = uid, label, required = false, disabled = false, indeterminate = false, readOnly = false, variant = 'simple', onClick, onKeyDown, status, additionalInfo, ...restProps } = props;\n    const isRadio = type === 'radio';\n    const card = variant === 'card';\n    const newRef = useConsolidatedRef(ref);\n    useEffect(() => {\n        if (!isRadio && newRef.current) {\n            newRef.current.indeterminate = !!indeterminate;\n        }\n    }, [newRef, indeterminate, isRadio]);\n    return (_jsx(FormField, { as: card ? StyledRadioCheckCard : StyledRadioCheck, label: _jsxs(_Fragment, { children: [_jsx(StyledPseudoRadioCheck, { status: status, isRadio: isRadio, as: StyledFormControl, required: required, disabled: disabled, readOnly: readOnly }), _jsxs(_Fragment, { children: [label, readOnly && _jsx(VisuallyHiddenText, { children: ` ${t('read_only')}` })] })] }), labelAs: card ? 'div' : undefined, id: id, required: required, disabled: disabled, readOnly: readOnly, status: status, isRadioCheck: true, inline: true, labelAfter: true, additionalInfo: additionalInfo, children: _jsx(StyledRadioCheckInput, { ...restProps, id: id, type: type, required: required, disabled: disabled, readOnly: readOnly, onClick: (e) => {\n                if (readOnly)\n                    e.preventDefault();\n                onClick?.(e);\n            }, onKeyDown: (e) => {\n                if (type === 'checkbox' && readOnly && e.key === ' ') {\n                    e.preventDefault();\n                }\n                if (type === 'radio' && readOnly && e.key.includes('Arrow')) {\n                    e.preventDefault();\n                }\n                onKeyDown?.(e);\n            }, ref: newRef }) }));\n});\nexport default RadioCheck;\n//# sourceMappingURL=RadioCheck.js.map","import { mix } from 'polished';\nimport { createGlobalStyle, css } from 'styled-components';\nimport { calculateFontSize } from './utils';\nexport const globalSpacingStyles = `\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n`;\nexport const createGlobalRootStyles = ({ base: { scale } }) => {\n    return `\n    :root,\n    :host {\n      height: 100%;\n      -webkit-text-size-adjust: 100%;\n      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n      font-size: calc(${scale} * 1rem);\n    }\n  `;\n};\nexport const createGlobalBodyStyles = ({ base: { 'font-size': baseFontSize, 'font-scale': baseFontScale, 'font-family': fontFamily, palette: { 'foreground-color': foregroundColor }, 'line-height': lineHeight }, components: { text } }) => {\n    // Can't call a hook here\n    const fontSize = calculateFontSize(baseFontSize, baseFontScale);\n    return `\n    body,\n    :host {\n      min-height: 100%;\n      margin: 0;\n      padding: 0;\n      font-size: ${fontSize[text.primary['font-size']]};\n      font-family: ${fontFamily};\n      color: ${foregroundColor};\n      line-height: ${lineHeight};\n    }\n  `;\n};\nexport default createGlobalStyle(({ theme }) => {\n    const { base: { 'custom-scrollbar': customScrollbar, 'border-radius': borderRadius, palette: { 'foreground-color': foreground, 'scrollbar-track': scrollbarTrack, 'scrollbar-thumb': scrollbarThumb, 'scrollbar-thumb-hover': scrollbarThumbHover }, transparency: { 'transparent-3': transparent } }, components: { 'form-control': { 'background-color': backgroundColor } } } = theme;\n    return css `\n    ${globalSpacingStyles}\n\n    body {\n      overscroll-behavior: none;\n    }\n\n    ::placeholder {\n      color: ${mix(transparent, foreground, backgroundColor)};\n      opacity: unset;\n    }\n\n    ${customScrollbar &&\n        css `\n      * {\n        scrollbar-color: ${scrollbarThumb} ${scrollbarTrack};\n        scrollbar-width: thin;\n      }\n\n      @supports not ((scrollbar-width: thin) or (scrollbar-color: black white)) {\n        /* stylelint-disable unit-allowed-list */\n\n        *::-webkit-scrollbar {\n          width: 12px;\n          height: 12px;\n        }\n\n        *::-webkit-scrollbar-track {\n          background-color: ${scrollbarTrack};\n        }\n\n        *::-webkit-scrollbar-corner {\n          background-color: ${scrollbarTrack};\n          border-bottom-right-radius: inherit;\n        }\n\n        *::-webkit-scrollbar-thumb {\n          background-color: transparent;\n          border: 3px solid transparent;\n          border-radius: calc(1.125 * ${borderRadius});\n          box-shadow: inset 0 0 2px 4px ${scrollbarThumb};\n        }\n\n        *::-webkit-scrollbar-thumb:hover {\n          box-shadow: inset 0 0 2px 4px ${scrollbarThumbHover};\n        }\n\n        *::-webkit-scrollbar-track:horizontal {\n          border-bottom-left-radius: inherit;\n        }\n\n        *::-webkit-scrollbar-track:vertical {\n          border-top-right-radius: inherit;\n        }\n\n        /* stylelint-disable-next-line selector-pseudo-class-no-unknown */\n        *::-webkit-scrollbar-track:not(:corner-present) {\n          border-bottom-right-radius: inherit;\n        }\n\n        /* stylelint-enable unit-allowed-list */\n      }\n    `}\n\n    ${createGlobalRootStyles(theme)}\n\n      ${createGlobalBodyStyles(theme)}\n\n      input,\n      button,\n      select,\n      optgroup,\n      textarea {\n      margin: 0;\n      font-family: inherit;\n      font-size: inherit;\n      line-height: inherit;\n    }\n  `;\n});\n//# sourceMappingURL=GlobalStyle.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useRef, useImperativeHandle, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { defaultThemeProp } from '../../../theme';\nimport { useConfiguration, useFocusWithin, useI18n, useOuterEvent } from '../../../hooks';\nimport FormField from '../../FormField';\nimport Flex from '../../Flex';\nimport Button from '../../Button';\nimport Icon, { registerIcon } from '../../Icon';\nimport * as timesIcon from '../../Icon/icons/times.icon';\nimport * as calendarIcon from '../../Icon/icons/calendar.icon';\nimport DatePicker from '../Picker/DatePicker';\nimport Popover from '../../Popover';\nimport { StyledFormControl } from '../../FormControl';\nimport { getDateFormat, parsePastedTextToDate, parseToDate, validateDate, generatePickerButtonAriaLabel } from './utils';\nimport StyledDateTime, { StyledInputContainer } from './DateTime.styles';\nimport useAutoFocusNextInput from './useAutoFocusNextInput';\nimport PartInput from './PartInput';\nimport usePickerButton from './usePickerButton';\nregisterIcon(timesIcon, calendarIcon);\nexport const StyledDateInput = styled(StyledDateTime) `\n  padding-inline-end: 0;\n`;\nStyledDateInput.defaultProps = defaultThemeProp;\nconst convertToCallbackParameter = (date, { year, month: monthIndex, day }) => {\n    if ([year, monthIndex, day].every(Boolean)) {\n        if (!validateDate(Number(year), Number(monthIndex) + 1, Number(day))) {\n            return {\n                valueAsISOString: '',\n                valueAsTimestamp: NaN,\n                state: 'invalid'\n            };\n        }\n        date.setUTCFullYear(Number(year), Number(monthIndex), Number(day));\n        return {\n            valueAsISOString: date.toISOString(),\n            valueAsTimestamp: date.getTime()\n        };\n    }\n    if ([year, monthIndex, day].every(p => !p)) {\n        return {\n            valueAsISOString: '',\n            valueAsTimestamp: undefined\n        };\n    }\n    return {\n        valueAsISOString: '',\n        valueAsTimestamp: NaN,\n        state: 'incomplete'\n    };\n};\nconst DateInput = forwardRef((props, ref) => {\n    const { locale } = useConfiguration();\n    const { defaultValue, value = defaultValue, min, max, id, label, labelHidden, info = getDateFormat(locale).join(''), status, required, readOnly, disabled, onChange, onFocus, onBlur, onResolveSuggestion, showWeekNumber, picker: { renderer: PickerComp = DatePicker, rendererProps = {} } = {}, autoFocus, additionalInfo, ...restProps } = props;\n    const t = useI18n();\n    const containerRef = useRef(null);\n    const date = value !== undefined ? parseToDate(value) : undefined;\n    const [yearInputRef, monthInputRef, dayInputRef] = [\n        useRef(null),\n        useRef(null),\n        useRef(null)\n    ];\n    const pickParts = () => {\n        return {\n            day: dayInputRef.current?.value || undefined,\n            month: monthInputRef.current?.value\n                ? (Number(monthInputRef.current.value) - 1).toString()\n                : undefined,\n            year: yearInputRef.current?.value || undefined\n        };\n    };\n    const currentlySelectedDate = () => {\n        const parts = pickParts();\n        if (Object.values(parts).every(Boolean)) {\n            const year = Number(parts.year);\n            const monthIndex = Number(parts.month);\n            const day = Number(parts.day);\n            return validateDate(year, monthIndex + 1, day)\n                ? new Date(Date.UTC(year, monthIndex, day))\n                : undefined;\n        }\n    };\n    const [open, setOpen, , setPopoverRef, buttonEl, setButtonEl] = usePickerButton();\n    const inputContainerRef = useRef(null);\n    const onFocusChange = (focused) => {\n        const callbackParam = convertToCallbackParameter(date ? new Date(date) : new Date(), pickParts());\n        if (onFocus && focused)\n            onFocus(callbackParam);\n        if (!focused) {\n            if (inputContainerRef.current)\n                inputContainerRef.current.scrollTop = 0;\n            onBlur?.(callbackParam);\n        }\n    };\n    const onInputChange = () => {\n        onChange?.(convertToCallbackParameter(date ? new Date(date) : new Date(), pickParts()));\n        buttonEl?.setAttribute('aria-label', generatePickerButtonAriaLabel(currentlySelectedDate(), 'date', locale, t, open));\n    };\n    const setInputValue = (newValue) => {\n        if (dayInputRef.current && monthInputRef.current && yearInputRef.current) {\n            dayInputRef.current.value = newValue?.getUTCDate().toString().padStart(2, '0') ?? '';\n            monthInputRef.current.value =\n                (newValue && (newValue?.getUTCMonth() + 1).toString().padStart(2, '0')) ?? '';\n            yearInputRef.current.value = newValue?.getUTCFullYear().toString() ?? '';\n        }\n    };\n    const onPaste = (e) => {\n        const text = e.clipboardData.getData('text');\n        const newDate = parsePastedTextToDate(text, locale, date || new Date());\n        if (newDate) {\n            e.preventDefault();\n            setInputValue(newDate);\n            onInputChange();\n        }\n    };\n    // autoclose picker on focusing out\n    useOuterEvent('focusin', [containerRef], e => {\n        if (containerRef.current?.contains(e.relatedTarget))\n            setOpen(false);\n    });\n    const displayNames = new Intl.DisplayNames(locale, { style: 'long', type: 'dateTimeField' });\n    const DayInput = (_jsx(PartInput, { placeholder: t('day_placeholder'), \"aria-label\": displayNames.of('day'), value: date?.getUTCDate(), onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, min: 1, max: 31, ref: dayInputRef }, 'day'));\n    const MonthInput = (_jsx(PartInput, { placeholder: t('month_placeholder'), \"aria-label\": displayNames.of('month'), value: date ? date?.getUTCMonth() + 1 : undefined, onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, min: 1, max: 12, ref: monthInputRef }, 'month'));\n    const YearInput = (_jsx(PartInput, { placeholder: t('year_placeholder'), \"aria-label\": displayNames.of('year'), value: date?.getUTCFullYear(), onChange: onInputChange, size: 4, maxLength: 4, padWithZeros: false, readOnly: readOnly, min: 1, ref: yearInputRef }, 'year'));\n    useFocusWithin([containerRef], onFocusChange);\n    useImperativeHandle(ref, () => ({\n        setOpen,\n        buttonEl,\n        get value() {\n            return currentlySelectedDate();\n        }\n    }));\n    const PickerButton = (_jsxs(_Fragment, { children: [_jsx(Button, { variant: 'simple', icon: true, ref: setButtonEl, onClick: () => setOpen(cur => !cur), \"aria-label\": generatePickerButtonAriaLabel(currentlySelectedDate(), 'date', locale, t, open), readOnly: readOnly, disabled: disabled, children: _jsx(Icon, { name: open ? 'times' : 'calendar' }) }), open && (_jsx(Popover, { ref: setPopoverRef, target: buttonEl, placement: 'bottom-end', strategy: 'fixed', modifiers: [\n                    {\n                        name: 'flip',\n                        options: {\n                            fallbackPlacements: ['top-end', 'right', 'left']\n                        }\n                    }\n                ], children: _jsx(PickerComp, { selected: currentlySelectedDate(), min: min, max: max, showWeekNumber: showWeekNumber, ...rendererProps, onChange: selected => {\n                        setInputValue(selected);\n                        setOpen(false);\n                        setTimeout(() => buttonEl?.focus());\n                        onInputChange();\n                        rendererProps?.onChange?.(selected);\n                    } }) }))] }));\n    const orderedRefs = [];\n    const Comp = (_jsxs(Flex, { as: StyledDateInput, forwardedAs: StyledFormControl, hasSuggestion: status === 'pending' && !!onResolveSuggestion, container: { alignItems: 'center', wrap: 'nowrap' }, status: status, readOnly: readOnly, disabled: disabled, ref: containerRef, onClick: (e) => {\n            if (e.target === containerRef.current)\n                orderedRefs[0].current?.focus();\n        }, ...restProps, children: [_jsx(Flex, { ref: inputContainerRef, as: StyledInputContainer, container: { alignItems: 'center', wrap: 'wrap' }, onPaste: onPaste, children: getDateFormat(locale).map(part => {\n                    switch (part) {\n                        case 'DD':\n                            orderedRefs.push(dayInputRef);\n                            return DayInput;\n                        case 'MM':\n                            orderedRefs.push(monthInputRef);\n                            return MonthInput;\n                        case 'YYYY':\n                            orderedRefs.push(yearInputRef);\n                            return YearInput;\n                        default:\n                            return part;\n                    }\n                }) }), !readOnly && PickerButton] }));\n    useEffect(() => {\n        if (autoFocus)\n            orderedRefs[0].current?.focus();\n    }, [autoFocus]);\n    useAutoFocusNextInput(orderedRefs);\n    return label ? (_jsx(FormField, { as: 'fieldset', \"aria-labelledby\": id, labelAs: 'legend', ...{\n            label,\n            labelHidden,\n            id,\n            info,\n            status,\n            required,\n            disabled,\n            onResolveSuggestion,\n            additionalInfo\n        }, ref: ref, children: Comp })) : (Comp);\n});\nexport default DateInput;\n//# sourceMappingURL=DateInput.js.map","import styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../../theme';\nimport { StyledButton } from '../../Button';\nimport { StyledPopover } from '../../Popover/Popover.styles';\nimport { StyledSelect } from '../../Select/Select';\nexport const BareInput = styled.input(({ theme, size }) => {\n    return css `\n    color: ${theme.components['form-control']['foreground-color']};\n    border: 0;\n    outline: none;\n    width: ${size}ch;\n    background-color: transparent;\n    text-align: end;\n    margin-inline-end: 0.125rem;\n    height: inherit;\n\n    &::placeholder {\n      font-size: 0.6em;\n      text-align: center;\n      transform: translateY(-0.35ex);\n    }\n\n    &:last-child {\n      text-align: start;\n    }\n\n    &:nth-child(3) {\n      text-align: start;\n      &::placeholder {\n        text-align: start;\n      }\n    }\n\n    ::-webkit-outer-spin-button,\n    ::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n\n    &[type='number'] {\n      -moz-appearance: textfield;\n    }\n\n    :not(:first-child) {\n      margin-inline-start: 0.125rem;\n    }\n  `;\n});\nBareInput.defaultProps = defaultThemeProp;\nexport const StyledInputContainer = styled.div `\n  height: inherit;\n  overflow: hidden;\n\n  > ${StyledSelect} {\n    border: 0;\n    background-color: transparent;\n    color: currentcolor;\n    opacity: 1;\n    width: max-content;\n\n    &:focus:not([readonly]):enabled {\n      box-shadow: none;\n      font-weight: ${p => p.theme.base['font-weight']['semi-bold']};\n    }\n\n    option {\n      font-weight: ${p => p.theme.base['font-weight'].normal};\n    }\n\n    @media (pointer: coarse) {\n      min-height: inherit;\n    }\n  }\n`;\nconst StyledDateTime = styled.div(props => {\n    const { theme: { base: { 'font-family': fontFamily, spacing, 'border-radius': baseBorderRadius, 'hit-area': hitArea }, components: { input: { height }, 'form-control': { 'border-radius': formBorderRadius, 'foreground-color': fgColor, 'border-width': borderWidth, ':focus': { 'border-color': focusBorderColor, 'box-shadow': shadow } } } } } = props;\n    return css `\n    min-width: min-content;\n    height: ${height};\n    min-height: ${hitArea['mouse-min']};\n    outline: none;\n    padding: 0 ${spacing};\n\n    @media (pointer: coarse) {\n      min-height: ${hitArea['finger-min']};\n    }\n\n    &:focus-within:not([disabled]) {\n      border-color: ${focusBorderColor};\n      box-shadow: ${shadow};\n    }\n\n    > ${StyledButton} {\n      border-radius: calc(${baseBorderRadius} * ${formBorderRadius});\n      margin-inline-start: auto;\n      border: 0;\n      &:enabled {\n        color: ${fgColor};\n      }\n      min-height: calc(${height} - 2 * ${borderWidth});\n      height: calc(${height} - 2 * ${borderWidth});\n      @media (pointer: coarse) {\n        min-height: calc(${hitArea['finger-min']} - 2 * ${borderWidth});\n      }\n    }\n\n    ${StyledPopover},\n    ${StyledSelect} {\n      font-family: ${fontFamily};\n    }\n  `;\n});\nStyledDateTime.defaultProps = defaultThemeProp;\nexport default StyledDateTime;\n//# sourceMappingURL=DateTime.styles.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { forwardRef, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { hasProp } from '@pega/cosmos-react-core/lib/utils';\nimport { defaultThemeProp } from '../../../theme';\nimport { StyledFormControl } from '../../FormControl';\nimport FormField from '../../FormField';\nimport { useConfiguration, useConsolidatedRef, useFocusWithin, useI18n, useOuterEvent } from '../../../hooks';\nimport Select, { Option } from '../../Select';\nimport Flex from '../../Flex';\nimport Button from '../../Button';\nimport Icon, { registerIcon } from '../../Icon';\nimport * as timesIcon from '../../Icon/icons/times.icon';\nimport * as calendarIcon from '../../Icon/icons/calendar.icon';\nimport Popover from '../../Popover';\nimport DatePicker from '../Picker/DatePicker';\nimport StyledDateTime, { StyledInputContainer } from './DateTime.styles';\nimport { generatePickerButtonAriaLabel, getDateFormat, getTimeOptions, is12HClockFormat, parsePastedTextToDate, parseToDate, validateDate, validateTime } from './utils';\nimport TimeInput from './TimeInput';\nimport useAutoFocusNextInput from './useAutoFocusNextInput';\nimport PartInput from './PartInput';\nimport usePickerButton from './usePickerButton';\nregisterIcon(timesIcon, calendarIcon);\nexport const StyledDateTimeInput = styled(StyledDateTime) `\n  padding-inline-end: 0;\n  min-width: 0;\n`;\nStyledDateTimeInput.defaultProps = defaultThemeProp;\nconst StyledDateTimeFieldset = styled.fieldset `\n  min-width: 0;\n`;\nfunction getMeridiem(hour) {\n    return hour >= 12 ? 'PM' : 'AM';\n}\nconst convertTo12h = (hour) => {\n    let converted = hour;\n    if (hour > 12)\n        converted = hour - 12;\n    else if (hour === 0)\n        converted = 12;\n    return converted;\n};\nconst convertTo24h = (hour, meridiem) => {\n    let converted = hour;\n    if (meridiem === 'PM' && hour < 12)\n        converted = hour + 12;\n    else if (meridiem === 'AM' && hour === 12)\n        converted = 0;\n    return converted;\n};\nfunction validateDateTimeState(year, month, day, hour, minute, second, is12h) {\n    return validateDate(year, month, day) && validateTime(hour, minute, second, is12h);\n}\nconst convertToCallbackParameter = (date, parts) => {\n    const withSeconds = hasProp(parts, 'second');\n    const { year, month: monthIndex, day, hour, minute, second = date.getUTCSeconds().toString(), dayPeriod: meridiem } = parts;\n    const toValidate = withSeconds\n        ? [year, monthIndex, day, hour, minute, second]\n        : [year, monthIndex, day, hour, minute];\n    if (toValidate.every(Boolean)) {\n        const is12h = meridiem !== undefined;\n        if (!validateDateTimeState(Number(year), Number(monthIndex) + 1, Number(day), Number(hour), Number(minute), Number(second), is12h)) {\n            return {\n                valueAsISOString: '',\n                valueAsTimestamp: NaN,\n                state: 'invalid'\n            };\n        }\n        const resultDate = new Date(date);\n        resultDate.setUTCFullYear(Number(year), Number(monthIndex), Number(day));\n        resultDate.setUTCHours(is12h ? convertTo24h(Number(hour), meridiem) : Number(hour), Number(minute), Number(second));\n        return {\n            valueAsISOString: resultDate.toISOString(),\n            valueAsTimestamp: resultDate.getTime()\n        };\n    }\n    if (toValidate.every(p => !p)) {\n        return {\n            valueAsISOString: '',\n            valueAsTimestamp: undefined\n        };\n    }\n    return {\n        valueAsISOString: '',\n        valueAsTimestamp: NaN,\n        state: 'incomplete'\n    };\n};\nfunction dateOptions() {\n    return {\n        year: 'numeric',\n        month: 'numeric',\n        day: 'numeric'\n    };\n}\nconst DateTimeInput = forwardRef((props, ref) => {\n    const { locale } = useConfiguration();\n    const { defaultValue, value = defaultValue, min, max, id, label, labelHidden, withSeconds = false, clockFormat, info = `${getDateFormat(locale).join('')} ${getDateFormat(locale, getTimeOptions(withSeconds), true).join('')}`, status, required, readOnly, disabled, showWeekNumber, pickerInterval = 30, onChange, onFocus, onBlur, onResolveSuggestion, additionalInfo, autoFocus, ...restProps } = props;\n    const t = useI18n();\n    const containerRef = useConsolidatedRef(ref);\n    const dateTime = value !== undefined ? parseToDate(value) : undefined;\n    const is12h = clockFormat ? clockFormat === 12 : is12HClockFormat(locale);\n    const [meridiem, setMeridiem] = useState(is12h ? () => (dateTime ? getMeridiem(dateTime.getUTCHours()) : 'AM') : undefined);\n    const newMeridiem = dateTime ? getMeridiem(dateTime.getUTCHours()) : 'AM';\n    useEffect(() => {\n        setMeridiem(newMeridiem);\n    }, [newMeridiem]);\n    const [yearInputRef, monthInputRef, dayInputRef, hourInputRef, minuteInputRef, secondInputRef, meridiemSelectRef] = [\n        useRef(null),\n        useRef(null),\n        useRef(null),\n        useRef(null),\n        useRef(null),\n        useRef(null),\n        useRef(null)\n    ];\n    useAutoFocusNextInput([\n        yearInputRef,\n        monthInputRef,\n        dayInputRef,\n        hourInputRef,\n        minuteInputRef,\n        secondInputRef\n    ]);\n    const pickDateParts = () => {\n        return {\n            day: dayInputRef.current?.value || undefined,\n            month: monthInputRef.current?.value\n                ? (Number(monthInputRef.current.value) - 1).toString()\n                : undefined,\n            year: yearInputRef.current?.value || undefined\n        };\n    };\n    const pickTimeParts = () => {\n        const parts = {\n            hour: hourInputRef.current?.value || undefined,\n            minute: minuteInputRef.current?.value || undefined\n        };\n        if (withSeconds)\n            parts.second = secondInputRef.current?.value;\n        if (is12h)\n            parts.dayPeriod = meridiemSelectRef.current?.value;\n        return parts;\n    };\n    const pickParts = () => {\n        return { ...pickDateParts(), ...pickTimeParts() };\n    };\n    const currentlySelectedDate = () => {\n        const parts = pickDateParts();\n        if (Object.values(parts).every(Boolean)) {\n            const year = Number(parts.year);\n            const month = Number(parts.month);\n            const day = Number(parts.day);\n            return validateDate(year, month + 1, day)\n                ? new Date(Date.UTC(year, month, day))\n                : undefined;\n        }\n    };\n    const currentlySelectedTime = () => {\n        const parts = pickParts();\n        if (Object.values(parts).every(Boolean)) {\n            const hour = Number(parts.hour);\n            const minute = Number(parts.minute);\n            const second = parts.second ? Number(parts.second) : 0;\n            const current = dateTime ?? new Date();\n            return validateTime(hour, minute, second, is12h)\n                ? new Date(current.setUTCHours(is12h ? convertTo24h(hour, parts.dayPeriod) : hour, minute, second))\n                : undefined;\n        }\n    };\n    const currentlySelectedDateTime = () => {\n        const selectedDate = currentlySelectedDate();\n        const selectedTime = currentlySelectedTime();\n        return selectedDate && selectedTime\n            ? new Date(selectedDate.setUTCHours(selectedTime.getUTCHours(), selectedTime.getUTCMinutes(), selectedTime.getUTCSeconds()))\n            : undefined;\n    };\n    const setDefaultTimeIfEmpty = () => {\n        // set value to midnight if time empty, skip if date not fully set\n        if (Object.values(pickDateParts()).every(Boolean) &&\n            Object.values(pickTimeParts()).every(p => !p)) {\n            if (hourInputRef.current)\n                hourInputRef.current.value = is12h ? '12' : '00';\n            if (minuteInputRef.current)\n                minuteInputRef.current.value = '00';\n            if (withSeconds && secondInputRef.current)\n                secondInputRef.current.value = '00';\n            if (is12h && meridiemSelectRef.current) {\n                meridiemSelectRef.current.value = 'AM';\n                setMeridiem('AM');\n            }\n        }\n    };\n    const [open, setOpen, , setPopoverRef, buttonEl, setButtonEl] = usePickerButton(setDefaultTimeIfEmpty);\n    const onInputChange = () => {\n        onChange?.(convertToCallbackParameter(dateTime ? new Date(dateTime) : new Date(), pickParts()));\n        buttonEl?.setAttribute('aria-label', generatePickerButtonAriaLabel(currentlySelectedDateTime(), 'datetime', locale, t, open));\n    };\n    const setInputValue = (newValue) => {\n        dayInputRef.current.value = newValue.getUTCDate().toString().padStart(2, '0');\n        monthInputRef.current.value = (newValue.getUTCMonth() + 1).toString().padStart(2, '0');\n        yearInputRef.current.value = newValue.getUTCFullYear().toString();\n        const hours = newValue.getUTCHours();\n        hourInputRef.current.value = (is12h ? convertTo12h(hours) : hours)\n            .toString()\n            .padStart(2, '0');\n        minuteInputRef.current.value = newValue.getUTCMinutes().toString().padStart(2, '0');\n        if (withSeconds) {\n            secondInputRef.current.value = newValue.getUTCSeconds().toString().padStart(2, '0');\n        }\n        if (meridiemSelectRef.current) {\n            meridiemSelectRef.current.value = newValue ? getMeridiem(newValue.getUTCHours()) : 'AM';\n        }\n        setMeridiem(newValue ? getMeridiem(newValue.getUTCHours()) : 'AM');\n    };\n    const onPaste = (e) => {\n        const text = e.clipboardData.getData('text');\n        const date = parsePastedTextToDate(text, locale, dateTime || new Date());\n        if (date) {\n            e.preventDefault();\n            setInputValue(date);\n            onInputChange();\n        }\n    };\n    const inputContainerRef = useRef(null);\n    const onFocusChange = (focused) => {\n        const callbackParam = convertToCallbackParameter(dateTime ? new Date(dateTime) : new Date(), pickParts());\n        if (onFocus && focused)\n            onFocus(callbackParam);\n        if (!focused) {\n            if (inputContainerRef.current)\n                inputContainerRef.current.scrollTop = 0;\n            onBlur?.(callbackParam);\n        }\n    };\n    // autoclose picker on focusing out\n    useOuterEvent('focusin', [containerRef], e => {\n        if (containerRef.current?.contains(e.relatedTarget))\n            setOpen(false);\n    });\n    const displayNames = new Intl.DisplayNames(locale, { style: 'long', type: 'dateTimeField' });\n    const DayInput = (_jsx(PartInput, { placeholder: t('day_placeholder'), \"aria-label\": displayNames.of('day'), value: dateTime?.getUTCDate(), onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, min: 1, max: 31, ref: dayInputRef }, 'day'));\n    const MonthInput = (_jsx(PartInput, { placeholder: t('month_placeholder'), \"aria-label\": displayNames.of('month'), value: dateTime ? dateTime.getUTCMonth() + 1 : undefined, onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, min: 1, max: 12, ref: monthInputRef }, 'month'));\n    const YearInput = (_jsx(PartInput, { placeholder: t('year_placeholder'), \"aria-label\": displayNames.of('year'), value: dateTime?.getUTCFullYear(), onChange: onInputChange, size: 4, maxLength: 4, padWithZeros: false, readOnly: readOnly, min: 1, ref: yearInputRef }, 'year'));\n    const hour = dateTime && is12h ? convertTo12h(dateTime.getUTCHours()) : dateTime?.getUTCHours();\n    const HourInput = (_jsx(PartInput, { placeholder: t('hour_placeholder'), \"aria-label\": displayNames.of('hour'), value: hour, onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, min: is12h ? 1 : 0, max: is12h ? 12 : 23, ref: hourInputRef }, 'hour'));\n    const MinuteInput = (_jsx(PartInput, { placeholder: t('minute_placeholder'), \"aria-label\": displayNames.of('minute'), value: dateTime?.getUTCMinutes(), onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, max: 59, ref: minuteInputRef }, 'minute'));\n    const SecondInput = (_jsx(PartInput, { placeholder: t('second_placeholder'), \"aria-label\": displayNames.of('second'), value: dateTime?.getUTCSeconds(), onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, max: 59, ref: secondInputRef }, 'second'));\n    const Period = (_jsxs(Select, { ref: meridiemSelectRef, \"aria-label\": displayNames.of('dayPeriod'), value: meridiem, required: required, disabled: disabled, onChange: (e) => {\n            setMeridiem(e.target.value);\n            if (Object.values(pickParts()).every(Boolean))\n                onInputChange();\n        }, readOnly: readOnly, children: [_jsx(Option, { value: 'AM', children: t('meridiem_value_am') }), _jsx(Option, { value: 'PM', children: t('meridiem_value_pm') })] }, 'period'));\n    const orderedRefs = [];\n    const dateInputs = getDateFormat(locale, dateOptions()).map(part => {\n        switch (part) {\n            case 'DD':\n                orderedRefs.push(dayInputRef);\n                return DayInput;\n            case 'MM':\n                orderedRefs.push(monthInputRef);\n                return MonthInput;\n            case 'YYYY':\n                orderedRefs.push(yearInputRef);\n                return YearInput;\n            default:\n                return part;\n        }\n    });\n    const timeInputs = getDateFormat(locale, getTimeOptions(withSeconds, is12h)).map(part => {\n        switch (part) {\n            case 'hh':\n                orderedRefs.push(hourInputRef);\n                return HourInput;\n            case 'mm':\n                orderedRefs.push(minuteInputRef);\n                return MinuteInput;\n            case 'ss':\n                orderedRefs.push(secondInputRef);\n                return SecondInput;\n            case 'AM':\n            case 'PM':\n                return Period;\n            default:\n                return part;\n        }\n    });\n    useEffect(() => {\n        if (autoFocus)\n            orderedRefs[0].current?.focus();\n    }, [autoFocus]);\n    useFocusWithin([containerRef], onFocusChange);\n    const [timeInputStatus, setTimeInputStatus] = useState();\n    const Picker = (_jsxs(_Fragment, { children: [_jsx(Button, { variant: 'simple', icon: true, ref: setButtonEl, onClick: () => {\n                    setTimeInputStatus(undefined);\n                    setOpen(cur => !cur);\n                }, \"aria-label\": generatePickerButtonAriaLabel(currentlySelectedDateTime(), 'datetime', locale, t, open), readOnly: readOnly, disabled: disabled, children: _jsx(Icon, { name: open ? 'times' : 'calendar' }) }), open && (_jsxs(Popover, { ref: setPopoverRef, target: buttonEl, placement: 'bottom-end', strategy: 'fixed', modifiers: [\n                    {\n                        name: 'flip',\n                        options: {\n                            fallbackPlacements: ['top-end', 'right', 'left']\n                        }\n                    }\n                ], children: [_jsx(DatePicker, { selected: currentlySelectedDate(), onChange: selected => {\n                            dayInputRef.current.value = selected.getUTCDate().toString().padStart(2, '0');\n                            monthInputRef.current.value = (selected.getUTCMonth() + 1)\n                                .toString()\n                                .padStart(2, '0');\n                            yearInputRef.current.value = selected.getUTCFullYear().toString();\n                            onInputChange();\n                        }, min: min, max: max, showWeekNumber: showWeekNumber }), _jsx(TimeInput, { label: t('time_text'), pickerInterval: pickerInterval, value: currentlySelectedTime(), withSeconds: withSeconds, clockFormat: clockFormat, status: timeInputStatus, onChange: selected => {\n                            if (Number.isNaN(selected.valueAsTimestamp)) {\n                                if (selected.state !== 'incomplete') {\n                                    setTimeInputStatus('warning');\n                                }\n                                return;\n                            }\n                            setTimeInputStatus(undefined);\n                            const selectedDate = selected.valueAsTimestamp\n                                ? new Date(selected.valueAsTimestamp)\n                                : undefined;\n                            hourInputRef.current.value = selectedDate\n                                ? (is12h ? convertTo12h(selectedDate.getUTCHours()) : selectedDate.getUTCHours())\n                                    .toString()\n                                    .padStart(2, '0')\n                                : '';\n                            minuteInputRef.current.value = selectedDate\n                                ? selectedDate.getUTCMinutes().toString().padStart(2, '0')\n                                : '';\n                            if (withSeconds)\n                                secondInputRef.current.value = selectedDate\n                                    ? selectedDate.getUTCSeconds().toString().padStart(2, '0')\n                                    : '';\n                            if (selectedDate) {\n                                if (meridiemSelectRef.current) {\n                                    meridiemSelectRef.current.value = getMeridiem(selectedDate.getUTCHours());\n                                }\n                                setMeridiem(getMeridiem(selectedDate.getUTCHours()));\n                            }\n                            onInputChange();\n                        }, onBlur: selected => {\n                            if (Number.isNaN(selected.valueAsTimestamp))\n                                setTimeInputStatus('warning');\n                            else\n                                setTimeInputStatus(undefined);\n                        } })] }))] }));\n    const Comp = (_jsxs(Flex, { as: StyledDateTimeInput, forwardedAs: StyledFormControl, hasSuggestion: status === 'pending' && !!onResolveSuggestion, container: { alignItems: 'center', wrap: 'nowrap' }, status: status, readOnly: readOnly, disabled: disabled, ref: containerRef, onClick: (e) => {\n            if (e.target === containerRef.current)\n                orderedRefs[0].current?.focus();\n        }, ...restProps, children: [_jsxs(Flex, { ref: inputContainerRef, as: StyledInputContainer, container: { alignItems: 'center', wrap: 'wrap' }, onPaste: onPaste, children: [dateInputs, timeInputs] }), !readOnly && Picker] }));\n    useAutoFocusNextInput(orderedRefs);\n    return label ? (_jsx(FormField, { as: StyledDateTimeFieldset, labelAs: 'legend', \"aria-labelledby\": id, ref: ref, ...{\n            label,\n            labelHidden,\n            id,\n            info,\n            status,\n            required,\n            disabled,\n            onResolveSuggestion,\n            additionalInfo\n        }, children: Comp })) : (Comp);\n});\nexport default DateTimeInput;\n//# sourceMappingURL=DateTimeInput.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { defaultThemeProp } from '../../../theme';\nimport Button from '../../Button';\nimport { useArrows, useConfiguration, useElement } from '../../../hooks';\nimport { is12HClockFormat } from '../Input/utils';\nimport { getIntervalGenerator } from './utils';\nconst StyledTimePicker = styled.ul `\n  list-style: none;\n  max-height: 10rem;\n  overflow: auto;\n  width: 100%;\n`;\nStyledTimePicker.defaultProps = defaultThemeProp;\nconst StyledTimeButton = styled.button `\n  color: black;\n  width: 100%;\n  border-radius: inherit;\n  overflow: hidden;\n  text-align: start;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  border-width: 0;\n  justify-content: start;\n  padding: 0;\n  background-color: ${props => props.selected ? props.theme.base.colors.blue['extra-light'] : 'transparent'};\n\n  > span {\n    margin-inline-end: 0.125rem;\n    &:first-child {\n      margin-inline-start: ${({ theme }) => theme.components['form-control']['border-width']};\n    }\n    &:nth-child(2) {\n      margin-inline-start: 0.125rem;\n    }\n    &:first-child,\n    &:nth-child(3) {\n      padding-inline-start: 0.5rem;\n    }\n  }\n\n  &:enabled:focus,\n  &:not([disabled]):focus {\n    box-shadow: inset ${props => props.theme.base.shadow.focus};\n  }\n`;\nStyledTimeButton.defaultProps = defaultThemeProp;\nconst StyledTimeItem = styled.li `\n  border-radius: 0;\n`;\nStyledTimeItem.defaultProps = defaultThemeProp;\nconst TimePicker = (props) => {\n    const { locale } = useConfiguration();\n    const { selected = new Date(0), interval = 30, clockFormat, onSelect, ...restProps } = props;\n    const intervalInMS = interval * 60000;\n    const actionsList = Array.from(getIntervalGenerator(intervalInMS), time => {\n        const date = new Date(selected);\n        date.setUTCHours(time.getUTCHours(), time.getUTCMinutes());\n        return {\n            id: date.getTime().toString(),\n            text: Intl.DateTimeFormat(locale, {\n                hour: '2-digit',\n                minute: '2-digit',\n                timeZone: 'UTC',\n                hour12: clockFormat ? clockFormat === 12 : is12HClockFormat(locale)\n            }).format(date)\n        };\n    });\n    const isSelected = (date) => {\n        return (selected?.getUTCHours() === date.getUTCHours() &&\n            selected?.getUTCMinutes() === date.getUTCMinutes());\n    };\n    const [buttonEl, setButtonEl] = useElement();\n    const menuRef = useRef(null);\n    useArrows(menuRef, {\n        selector: 'button',\n        cycle: true,\n        dir: 'up-down',\n        allowTabFocus: false\n    });\n    const renderTime = (text) => {\n        const [hour, minute, meridiem] = text.split(/:| /);\n        return (_jsxs(_Fragment, { children: [_jsx(\"span\", { children: hour }), \":\", _jsx(\"span\", { children: minute }), meridiem && _jsx(\"span\", { children: meridiem })] }));\n    };\n    const setTabIndexes = useCallback(() => {\n        const focusEl = menuRef.current;\n        if (!focusEl)\n            return;\n        const focusableElements = Array.from(focusEl.querySelectorAll('button'));\n        if (focusableElements.length > 0) {\n            let isChecked = false;\n            focusableElements.slice(1).forEach(item => {\n                const checked = item.checked;\n                if (checked) {\n                    isChecked = true;\n                    item.tabIndex = 0;\n                }\n                else\n                    item.tabIndex = -1;\n            });\n            if (!isChecked) {\n                focusableElements[0].tabIndex = 0;\n                focusableElements[0].focus();\n            }\n        }\n    }, [selected]);\n    useEffect(() => {\n        buttonEl?.focus();\n        setTabIndexes();\n    }, [buttonEl]);\n    return (_jsx(StyledTimePicker, { role: 'menu', tabIndex: -1, ref: menuRef, ...restProps, children: actionsList.map(({ text, id }) => {\n            const item = new Date(Number(id));\n            return (_jsx(StyledTimeItem, { role: 'presentation', children: _jsx(StyledTimeButton, { role: 'menuitem', as: Button, variant: 'simple', ref: isSelected(item) ? setButtonEl : null, \"aria-label\": text, selected: isSelected(item), \"aria-current\": isSelected(item) ? 'time' : undefined, checked: isSelected(item), onClick: () => {\n                        onSelect?.(item);\n                    }, tabIndex: '-1', children: renderTime(text) }) }, id));\n        }) }));\n};\nexport default TimePicker;\n//# sourceMappingURL=TimePicker.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useRef, useState, forwardRef } from 'react';\nimport styled from 'styled-components';\nimport FormField from '../../FormField';\nimport Flex from '../../Flex';\nimport Select, { Option } from '../../Select';\nimport Button from '../../Button';\nimport Icon, { registerIcon } from '../../Icon';\nimport * as timesIcon from '../../Icon/icons/times.icon';\nimport * as clockIcon from '../../Icon/icons/clock.icon';\nimport Popover from '../../Popover';\nimport TimePicker from '../Picker/TimePicker';\nimport { useConfiguration, useConsolidatedRef, useFocusWithin, useI18n } from '../../../hooks';\nimport { StyledFormControl } from '../../FormControl';\nimport { sameWidth } from '../../Popover/modifiers';\nimport { getDateFormat, parseToDate, is12HClockFormat, validateTime, getTimeOptions } from './utils';\nimport StyledDateTime, { StyledInputContainer } from './DateTime.styles';\nimport PartInput from './PartInput';\nimport usePickerButton from './usePickerButton';\nimport useAutoFocusNextInput from './useAutoFocusNextInput';\nregisterIcon(timesIcon, clockIcon);\nexport const StyledTimeInput = styled(StyledDateTime) `\n  padding-inline-end: 0;\n`;\nfunction getMeridiem(hour) {\n    return hour >= 12 ? 'PM' : 'AM';\n}\nconst convertTo12h = (hour) => {\n    let converted = hour;\n    if (hour > 12)\n        converted = hour - 12;\n    else if (hour === 0)\n        converted = 12;\n    return converted;\n};\nconst convertTo24h = (hour, meridiem) => {\n    let converted = hour;\n    if (meridiem === 'PM' && hour < 12)\n        converted = hour + 12;\n    else if (meridiem === 'AM' && hour === 12)\n        converted = 0;\n    return converted;\n};\nconst convertToCallbackParameter = (date, { hour, minute, second = date.getUTCSeconds().toString(), dayPeriod: meridiem }) => {\n    if ([hour, minute, second].every(Boolean)) {\n        const is12h = meridiem !== undefined;\n        if (!validateTime(Number(hour), Number(minute), Number(second), is12h)) {\n            return {\n                valueAsISOString: '',\n                valueAsTimestamp: NaN,\n                state: 'invalid'\n            };\n        }\n        const resultDate = new Date(date);\n        resultDate.setUTCHours(is12h ? convertTo24h(Number(hour), meridiem) : Number(hour), Number(minute), Number(second));\n        return {\n            valueAsISOString: resultDate.toISOString(),\n            valueAsTimestamp: resultDate.getTime()\n        };\n    }\n    if ([hour, minute, second].every(p => !p)) {\n        return {\n            valueAsISOString: '',\n            valueAsTimestamp: undefined\n        };\n    }\n    return {\n        valueAsISOString: '',\n        valueAsTimestamp: NaN,\n        state: 'incomplete'\n    };\n};\nconst TimeInput = forwardRef((props, ref) => {\n    const { locale } = useConfiguration();\n    const { defaultValue, value = defaultValue, id, label, labelHidden, status, withSeconds = false, pickerInterval = 30, clockFormat, info = getDateFormat(locale, getTimeOptions(withSeconds), true).join(''), required, readOnly, disabled, onChange, onFocus, onBlur, onResolveSuggestion, autoFocus, additionalInfo, ...restProps } = props;\n    const date = value !== undefined ? parseToDate(value) : undefined;\n    const is12h = clockFormat ? clockFormat === 12 : is12HClockFormat(locale);\n    const [meridiem, setMeridiem] = useState(is12h ? () => (date ? getMeridiem(date.getUTCHours()) : 'AM') : undefined);\n    const [hourInputRef, minuteInputRef, secondInputRef, meridiemSelectRef] = [\n        useRef(null),\n        useRef(null),\n        useRef(null),\n        useRef(null)\n    ];\n    useAutoFocusNextInput([hourInputRef, minuteInputRef, secondInputRef]);\n    const pickParts = () => {\n        const parts = {\n            hour: hourInputRef.current?.value || undefined,\n            minute: minuteInputRef.current?.value || undefined\n        };\n        if (withSeconds)\n            parts.second = secondInputRef.current?.value;\n        if (is12h)\n            parts.dayPeriod = meridiemSelectRef.current?.value;\n        return parts;\n    };\n    const currentlySelectedTime = () => {\n        const parts = pickParts();\n        if (Object.values(parts).every(Boolean)) {\n            const hour = Number(parts.hour);\n            const minute = Number(parts.minute);\n            const second = parts.minute ? Number(parts.minute) : 0;\n            const current = date ?? new Date();\n            return validateTime(hour, minute, second, is12h)\n                ? new Date(current.setUTCHours(is12h ? convertTo24h(hour, meridiem) : hour, minute, second))\n                : undefined;\n        }\n    };\n    const [open, setOpen, , setPopoverRef, buttonEl, setButtonEl] = usePickerButton();\n    const inputContainerRef = useRef(null);\n    const onFocusChange = (focused) => {\n        const callbackParam = convertToCallbackParameter(date ? new Date(date) : new Date(), pickParts());\n        if (onFocus && focused)\n            onFocus(callbackParam);\n        if (!focused) {\n            if (inputContainerRef.current)\n                inputContainerRef.current.scrollTop = 0;\n            onBlur?.(callbackParam);\n        }\n    };\n    const onInputChange = () => {\n        onChange?.(convertToCallbackParameter(date ? new Date(date) : new Date(), pickParts()));\n    };\n    const t = useI18n();\n    const displayNames = new Intl.DisplayNames(locale, { style: 'long', type: 'dateTimeField' });\n    const hour = date && is12h ? convertTo12h(date.getUTCHours()) : date?.getUTCHours();\n    const HourInput = (_jsx(PartInput, { placeholder: t('hour_placeholder'), \"aria-label\": displayNames.of('hour'), value: hour, onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, min: is12h ? 1 : 0, max: is12h ? 12 : 23, ref: hourInputRef, autoFocus: autoFocus }, 'hour'));\n    const MinuteInput = (_jsx(PartInput, { placeholder: t('minute_placeholder'), \"aria-label\": displayNames.of('minute'), value: date?.getUTCMinutes(), onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, max: 59, ref: minuteInputRef }, 'minute'));\n    const SecondInput = (_jsx(PartInput, { placeholder: t('second_placeholder'), \"aria-label\": displayNames.of('second'), value: date?.getUTCSeconds(), onChange: onInputChange, size: 2, maxLength: 2, readOnly: readOnly, max: 59, ref: secondInputRef }, 'second'));\n    const Period = (_jsxs(Select, { ref: meridiemSelectRef, \"aria-label\": displayNames.of('dayPeriod'), value: meridiem, required: required, disabled: disabled, onChange: (e) => {\n            setMeridiem(e.target.value);\n            if (Object.values(pickParts()).every(Boolean))\n                onInputChange();\n        }, readOnly: readOnly, children: [_jsx(Option, { value: 'AM', children: t('meridiem_value_am') }), _jsx(Option, { value: 'PM', children: t('meridiem_value_pm') })] }, 'period'));\n    const containerRef = useConsolidatedRef(ref);\n    useFocusWithin([containerRef], onFocusChange);\n    const Picker = (_jsxs(_Fragment, { children: [_jsx(Button, { variant: 'simple', icon: true, ref: setButtonEl, onClick: () => setOpen(cur => !cur), \"aria-label\": t(open ? 'close_time_button_a11y' : 'open_time_button_a11y'), readOnly: readOnly, disabled: disabled, children: _jsx(Icon, { name: open ? 'times' : 'clock' }) }), _jsx(Popover, { show: open, ref: setPopoverRef, target: containerRef.current, placement: 'bottom-end', strategy: 'fixed', modifiers: [\n                    {\n                        name: 'flip',\n                        options: {\n                            fallbackPlacements: ['top-end']\n                        }\n                    },\n                    sameWidth\n                ], children: _jsx(TimePicker, { selected: currentlySelectedTime(), interval: pickerInterval, onSelect: selected => {\n                        hourInputRef.current.value = (is12h ? convertTo12h(selected.getUTCHours()) : selected.getUTCHours())\n                            .toString()\n                            .padStart(2, '0');\n                        minuteInputRef.current.value = selected.getUTCMinutes().toString().padStart(2, '0');\n                        if (withSeconds)\n                            secondInputRef.current.value = selected\n                                .getUTCSeconds()\n                                .toString()\n                                .padStart(2, '0');\n                        if (meridiemSelectRef.current) {\n                            meridiemSelectRef.current.value = getMeridiem(selected.getUTCHours());\n                        }\n                        setMeridiem(getMeridiem(selected.getUTCHours()));\n                        setOpen(false);\n                        setTimeout(() => buttonEl?.focus());\n                        onInputChange();\n                    }, clockFormat: clockFormat }) })] }));\n    const Comp = (_jsxs(Flex, { as: StyledTimeInput, forwardedAs: StyledFormControl, hasSuggestion: status === 'pending' && !!onResolveSuggestion, container: { alignItems: 'center', wrap: 'nowrap' }, status: status, readOnly: readOnly, disabled: disabled, ref: containerRef, onClick: (e) => {\n            if (e.target === containerRef.current)\n                hourInputRef.current?.focus();\n        }, ...restProps, children: [_jsx(Flex, { ref: inputContainerRef, as: StyledInputContainer, container: { alignItems: 'center', wrap: 'wrap' }, children: getDateFormat(locale, getTimeOptions(withSeconds, is12h)).map(part => {\n                    switch (part) {\n                        case 'hh':\n                            return HourInput;\n                        case 'mm':\n                            return MinuteInput;\n                        case 'ss':\n                            return SecondInput;\n                        case 'AM':\n                        case 'PM':\n                            return Period;\n                        default:\n                            return part;\n                    }\n                }) }), !readOnly && Picker] }));\n    return label ? (_jsx(FormField, { as: 'fieldset', labelAs: 'legend', ...{\n            label,\n            labelHidden,\n            id,\n            info,\n            status,\n            required,\n            disabled,\n            onResolveSuggestion,\n            additionalInfo\n        }, ref: ref, children: Comp })) : (Comp);\n});\nexport default TimeInput;\n//# sourceMappingURL=TimeInput.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo, forwardRef, useReducer, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { defaultThemeProp } from '../../../theme';\nimport { range } from '../../../utils';\nimport { useConfiguration, useConsolidatedRef, useFocusWithin } from '../../../hooks';\nimport FormField from '../../FormField';\nimport Select, { Option } from '../../Select';\nimport { StyledSelect } from '../../Select/Select';\nimport Flex from '../../Flex';\nimport { StyledFormControl } from '../../FormControl';\nimport { parseToDate, getLocalizedMonths } from './utils';\nimport StyledDateTime from './DateTime.styles';\nexport const StyledMonthInput = styled(StyledDateTime) `\n  padding: 0;\n  border: 0;\n\n  ${StyledSelect} {\n    min-width: 0;\n\n    &:focus {\n      z-index: 1;\n    }\n\n    &:first-child {\n      border-start-end-radius: 0;\n      border-end-end-radius: 0;\n    }\n\n    &:last-child {\n      max-width: max-content;\n      margin-inline-start: -0.0625rem;\n      border-start-start-radius: 0;\n      border-end-start-radius: 0;\n    }\n  }\n`;\nStyledMonthInput.defaultProps = defaultThemeProp;\nconst convertToCallbackParameter = (date, { month, year }) => {\n    if ([month, year].every(Boolean)) {\n        const resultDate = new Date(date);\n        resultDate.setUTCFullYear(Number(year), Number(month));\n        return {\n            valueAsISOString: resultDate.toISOString(),\n            valueAsTimestamp: resultDate.getTime()\n        };\n    }\n    if ([year, month].every(p => !p)) {\n        return {\n            valueAsISOString: '',\n            valueAsTimestamp: undefined\n        };\n    }\n    return {\n        valueAsISOString: '',\n        valueAsTimestamp: NaN,\n        state: 'incomplete'\n    };\n};\nconst reducer = (state, action) => {\n    if (action.field) {\n        return { ...state, [action.field]: action.value };\n    }\n    return state;\n};\nconst MonthInput = forwardRef((props, ref) => {\n    const { locale } = useConfiguration();\n    const { defaultValue, value = defaultValue, min, max, id, label, labelHidden, info, status, required, readOnly, disabled, onChange, onFocus, onBlur, autoFocus, additionalInfo, ...restProps } = props;\n    const date = value ? parseToDate(value) : undefined;\n    const currentYear = date ? date.getUTCFullYear() : new Date().getFullYear();\n    const minYear = min ? parseToDate(min).getUTCFullYear() : currentYear - 10;\n    const maxYear = max ? parseToDate(max).getUTCFullYear() : currentYear + 10;\n    const years = range(minYear, maxYear);\n    const months = useMemo(() => getLocalizedMonths(locale), [locale]);\n    const [state, dispatch] = useReducer(reducer, {\n        year: date?.getUTCFullYear().toString(),\n        month: date?.getUTCMonth().toString()\n    });\n    useEffect(() => {\n        dispatch({ field: 'month', value: date?.getUTCMonth().toString() });\n        dispatch({ field: 'year', value: date?.getUTCFullYear().toString() });\n    }, [date?.toDateString()]);\n    const onFocusChange = (focused) => {\n        const callbackParam = convertToCallbackParameter(date ? new Date(date) : new Date(), state);\n        if (onFocus && focused)\n            onFocus(callbackParam);\n        else if (onBlur && !focused)\n            onBlur(callbackParam);\n    };\n    const onSelectChange = (field) => (ev) => {\n        const action = { field, value: ev.target.value };\n        dispatch(action);\n        onChange?.(convertToCallbackParameter(date ? new Date(date) : new Date(), reducer(state, action)));\n    };\n    const containerRef = useConsolidatedRef(ref);\n    useFocusWithin([containerRef], onFocusChange);\n    const monthOptions = months.map((month, index) => (_jsx(Option, { value: index.toString(), children: months[index] }, month)));\n    const yearOptions = years.map(year => (_jsx(Option, { value: year.toString(), children: year.toString() }, year.toString())));\n    const displayNames = new Intl.DisplayNames(locale, { style: 'long', type: 'dateTimeField' });\n    const Month = (_jsxs(Select, { \"aria-label\": displayNames.of('month'), readOnly: readOnly, required: required, value: state.month?.toString() ?? '', onChange: onSelectChange('month'), status: status, disabled: disabled, autoFocus: autoFocus, children: [!required && _jsx(Option, { children: \" \" }, 'null'), monthOptions] }, 'month'));\n    const Year = (_jsxs(Select, { \"aria-label\": displayNames.of('year'), readOnly: readOnly, required: required, value: state.year?.toString() ?? '', onChange: onSelectChange('year'), status: status, disabled: disabled, children: [!required && _jsx(Option, { children: \" \" }, 'null'), yearOptions] }, 'year'));\n    const Comp = (_jsxs(Flex, { as: StyledMonthInput, forwardedAs: StyledFormControl, container: { alignItems: 'center', wrap: 'nowrap' }, ref: containerRef, status: status, disabled: disabled, readOnly: readOnly, ...restProps, children: [Month, Year] }));\n    return label ? (_jsx(FormField, { as: 'fieldset', labelAs: 'legend', ...{ label, labelHidden, id, info, status, required, disabled, additionalInfo }, children: Comp })) : (Comp);\n});\nexport default MonthInput;\n//# sourceMappingURL=MonthInput.js.map","import styled, { css } from 'styled-components';\nimport { hideVisually, mix, readableColor, rgba, transparentize } from 'polished';\nimport { defaultThemeProp } from '../../../theme';\nimport { tryCatch } from '../../../utils';\nimport Button from '../../Button';\nexport const StyledPick = styled(Button)(props => {\n    const { theme: { base: { 'border-radius': borderRadius, palette: { interactive, dark }, spacing }, components: { card: { background } } } } = props;\n    const textColor = tryCatch(() => readableColor(interactive));\n    const disabledBackground = tryCatch(() => transparentize(0.5, mix(0.8, background, dark)));\n    return css `\n    height: 2.625rem;\n    border-radius: calc(0.5 * ${borderRadius});\n    padding: 0 ${spacing};\n    background-color: transparent;\n\n    &[aria-selected]:enabled {\n      background-color: ${interactive};\n      color: ${textColor};\n    }\n\n    &:disabled {\n      background-color: ${disabledBackground};\n      border-radius: 0;\n    }\n  `;\n});\nStyledPick.defaultProps = defaultThemeProp;\nexport const StyledColumnLabel = styled.span `\n  text-align: center;\n  margin: 0 auto;\n  font-size: 0.75rem;\n`;\nStyledColumnLabel.defaultProps = defaultThemeProp;\nexport const ScreenReaderOnly = styled.span `\n  ${hideVisually}\n`;\nexport const StyledDay = styled(StyledPick)(props => {\n    const { theme: { base: { palette: { interactive }, 'disabled-opacity': disabledOpacity } }, current, highlighted, dayInNexOrPrevMonth } = props;\n    const highlightedBgColor = tryCatch(() => rgba(interactive, 0.1));\n    return css `\n    background-color: ${highlighted ? highlightedBgColor : 'transparent'};\n\n    ${highlighted &&\n        css `\n      border-radius: 0;\n    `}\n\n    ${dayInNexOrPrevMonth &&\n        css `\n      opacity: ${disabledOpacity};\n    `}\n\n    ${current &&\n        css `\n      font-weight: bold;\n    `}\n  `;\n});\nStyledDay.defaultProps = defaultThemeProp;\nexport const StyledWeekLabel = styled(StyledColumnLabel)(props => {\n    const { theme: { base: { spacing, breakpoints } } } = props;\n    return css `\n    margin-inline-end: 0;\n\n    @media (min-width: ${breakpoints.sm}) {\n      margin-inline-end: ${spacing};\n    }\n  `;\n});\nStyledWeekLabel.defaultProps = defaultThemeProp;\nexport const StyledWeekNumber = styled.span(props => {\n    const { theme: { base: { breakpoints, spacing, 'disabled-opacity': disabledOpacity, palette: { dark } }, components: { card: { background: cardBackground } } } } = props;\n    const background = tryCatch(() => transparentize(0.5, mix(0.8, cardBackground, dark)));\n    return css `\n    line-height: 2.625rem;\n    padding: 0;\n    margin-inline-end: 0;\n    background-color: ${background};\n    display: inline-block;\n    opacity: ${disabledOpacity};\n\n    @media (min-width: ${breakpoints.sm}) {\n      padding: 0 ${spacing};\n      margin-inline-end: ${spacing};\n    }\n  `;\n});\nStyledWeekNumber.defaultProps = defaultThemeProp;\nexport const StyledWeekGrid = styled.table(props => {\n    const { theme: { base: { spacing } } } = props;\n    return css `\n    table-layout: fixed;\n    border-collapse: collapse;\n    border-spacing: 0;\n\n    thead {\n      th {\n        padding-bottom: ${spacing};\n      }\n    }\n    ${StyledPick} {\n      margin-inline-end: ${spacing};\n    }\n  `;\n});\nStyledWeekGrid.defaultProps = defaultThemeProp;\nexport const StyledCalendar = styled.table(props => {\n    const { theme: { base: { 'border-radius': borderRadius, spacing } } } = props;\n    return css `\n    table-layout: fixed;\n    border-collapse: collapse;\n    border-spacing: 0;\n\n    th {\n      max-width: 2.625rem;\n    }\n\n    thead {\n      th {\n        padding-bottom: ${spacing};\n      }\n    }\n\n    td {\n      width: 2.625rem;\n      max-width: 2.625rem;\n\n      ${StyledDay} {\n        width: 100%;\n      }\n    }\n\n    tr {\n      &:first-child {\n        ${StyledWeekNumber} {\n          border-radius: calc(0.5 * ${borderRadius}) calc(0.5 * ${borderRadius}) 0 0;\n        }\n      }\n      &:last-child {\n        ${StyledWeekNumber} {\n          border-radius: 0 0 calc(0.5 * ${borderRadius}) calc(0.5 * ${borderRadius});\n        }\n      }\n    }\n  `;\n});\nStyledCalendar.defaultProps = defaultThemeProp;\n//# sourceMappingURL=Calendar.styles.js.map","import styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../../theme';\nimport { StyledButton } from '../../Button';\nimport { StyledFormField } from '../../FormField/FormField';\nimport { StyledSelect } from '../../Select/Select';\nexport const StyledMonthPicker = styled.fieldset(props => {\n    const { theme: { base: { spacing, 'border-radius': baseBorderRadius, palette: { 'foreground-color': color } }, components: { 'form-control': formControl } } } = props;\n    return css `\n    margin: calc(2 * ${spacing}) calc(0.5 * ${spacing});\n    font-size: 0.875rem;\n    border: none;\n\n    ${StyledSelect} {\n      border-radius: calc(${baseBorderRadius} * ${formControl['border-radius']});\n    }\n\n    ${StyledButton} {\n      border-radius: calc(${baseBorderRadius} * ${formControl['border-radius']});\n      border: 0;\n      &:enabled {\n        color: ${color};\n      }\n    }\n  `;\n});\nStyledMonthPicker.defaultProps = defaultThemeProp;\nexport const StyledDatePicker = styled.div(props => {\n    const { theme: { base: { spacing }, components: { 'form-control': { 'foreground-color': foreground } } } } = props;\n    return css `\n    width: max-content;\n\n    ${StyledButton} {\n      border: transparent;\n      color: ${foreground};\n    }\n    padding: 0 ${spacing} ${spacing} ${spacing};\n\n    /* Targets time input. */\n    & ~ ${StyledFormField} {\n      padding: 0 calc(2 * ${spacing}) calc(2 * ${spacing});\n    }\n  `;\n});\nStyledDatePicker.defaultProps = defaultThemeProp;\n//# sourceMappingURL=DatePicker.styles.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rgba } from 'polished';\nimport Flex from '../Flex';\nimport Icon, { StyledIcon, registerIcon } from '../Icon';\nimport * as galaxyIcon from '../Icon/icons/galaxy.icon';\nimport Text from '../Text';\nimport { tryCatch } from '../../utils';\nimport { useI18n } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nregisterIcon(galaxyIcon);\nexport const StyledEmptyState = styled.div(({ theme }) => {\n    const color = tryCatch(() => rgba(theme.base.palette['foreground-color'], theme.base.transparency['transparent-2']));\n    return css `\n    height: 100%;\n\n    ${StyledIcon} {\n      font-size: 1.5rem;\n      height: 1.5rem;\n      width: 1.5rem;\n      color: ${color};\n    }\n  `;\n});\nStyledEmptyState.defaultProps = defaultThemeProp;\nconst EmptyState = forwardRef((props, ref) => {\n    const t = useI18n();\n    const { message = t('no_items'), ...restProps } = props;\n    return (_jsxs(Flex, { ...restProps, as: StyledEmptyState, ref: ref, container: { direction: 'column', alignItems: 'center', justify: 'center', gap: 1 }, children: [_jsx(Icon, { name: 'galaxy' }), _jsx(Text, { variant: 'secondary', children: message })] }));\n});\nexport default EmptyState;\n//# sourceMappingURL=EmptyState.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport Button from '../Button';\nimport ExpandCollapse from '../ExpandCollapse';\nimport Flex from '../Flex';\nimport Grid from '../Grid';\nimport HTML from '../HTML';\nimport Icon, { StyledIcon, registerIcon } from '../Icon';\nimport * as caretRightIcon from '../Icon/icons/caret-right.icon';\nimport Actions from '../Actions';\nimport { defaultThemeProp } from '../../theme';\nimport { useDirection, useI18n, useUID } from '../../hooks';\nimport { calculateFontSize, omitProps } from '../../styles';\nimport AdditionalInfo from '../AdditionalInfo';\nregisterIcon(caretRightIcon);\nconst StyledExpandButton = styled(Button)(({ theme: { base: { animation } } }) => {\n    const { rtl } = useDirection();\n    return css `\n      ${StyledIcon} {\n        transition: transform ${animation.speed} ${animation.timing.ease};\n      }\n      &[aria-expanded='true'] ${StyledIcon} {\n        transform: rotate(90deg);\n      }\n      &[aria-expanded='false'] ${StyledIcon} {\n        transform: rotate(${rtl ? 180 : 0}deg);\n      }\n    `;\n});\nStyledExpandButton.defaultProps = defaultThemeProp;\nexport const StyledFieldGroupName = styled.span ``;\nexport const StyledFieldGroupLegend = styled.legend.withConfig(omitProps('open'))(({ open, theme: { base: { spacing, animation, 'hit-area': { 'mouse-min': hitAreaMouse, 'finger-min': hitAreaFinger } } } }) => {\n    return css `\n      width: 100%;\n      margin-bottom: 0;\n      ${open &&\n        css `\n        margin-block-end: calc(1.5 * ${spacing});\n      `}\n      transition: margin-block-end ${animation.speed} ${animation.timing.ease};\n\n      > ${StyledExpandButton} {\n        min-height: ${hitAreaMouse};\n\n        @media (pointer: 'coarse') {\n          min-height: ${hitAreaFinger};\n        }\n      }\n    `;\n});\nStyledFieldGroupLegend.defaultProps = defaultThemeProp;\nexport const StyledFieldGroup = styled.fieldset(({ theme: { base: { 'font-size': fontSize, 'font-scale': fontScale }, components: { text } } }) => {\n    const fontSizes = calculateFontSize(fontSize, fontScale);\n    return css `\n      border: none;\n\n      & ${StyledFieldGroupName} {\n        font-size: ${fontSizes[text.h3['font-size']]};\n        font-weight: ${text.h3['font-weight']};\n      }\n\n      & & ${StyledFieldGroupName} {\n        font-size: ${fontSizes[text.h4['font-size']]};\n        font-weight: ${text.h4['font-weight']};\n      }\n\n      & & & ${StyledFieldGroupName} {\n        font-size: ${fontSizes[text.h5['font-size']]};\n        font-weight: ${text.h5['font-weight']};\n      }\n\n      & & & & ${StyledFieldGroupName} {\n        font-size: ${fontSizes[text.h6['font-size']]};\n        font-weight: ${text.h6['font-weight']};\n      }\n    `;\n});\nStyledFieldGroup.defaultProps = defaultThemeProp;\nconst FieldGroupLegend = ({ children, open, actions, additionalInfo, ...restProps }) => {\n    return (_jsx(StyledFieldGroupLegend, { open: open, ...restProps, children: _jsxs(Flex, { container: { alignItems: 'center', justify: 'between', gap: 0.5 }, children: [_jsxs(Flex, { container: { alignItems: 'center', gap: 0.5 }, children: [children, additionalInfo && (_jsx(AdditionalInfo, { heading: additionalInfo.heading, children: additionalInfo.content }))] }), actions && _jsx(Actions, { items: actions })] }) }));\n};\nconst FieldGroup = forwardRef(({ children, description, name, additionalInfo, actions, collapsible = false, defaultCollapsed = false, ...restProps }, ref) => {\n    const [open, setOpen] = useState(!defaultCollapsed);\n    const t = useI18n();\n    const uid = useUID();\n    const descAndChildren = (_jsxs(Grid, { container: { gap: 3 }, children: [description && _jsx(HTML, { id: `${uid}-description`, as: 'p', content: description }), _jsx(\"div\", { children: children })] }));\n    return (_jsxs(StyledFieldGroup, { \"aria-label\": name, \"aria-describedby\": description ? `${uid}-description` : undefined, ...restProps, ref: ref, children: [name && (_jsx(FieldGroupLegend, { open: open, actions: actions, additionalInfo: additionalInfo, children: collapsible ? (_jsx(StyledExpandButton, { type: 'button', variant: 'text', onClick: () => {\n                        setOpen(cur => !cur);\n                    }, \"aria-expanded\": open ? 'true' : 'false', \"aria-label\": t(open ? 'collapse_noun' : 'expand_noun', [name]), children: _jsxs(Flex, { container: { direction: 'row', alignItems: 'center', gap: 0.5 }, forwardedAs: 'span', children: [_jsx(Icon, { name: 'caret-right' }), _jsx(StyledFieldGroupName, { children: name })] }) })) : (_jsx(StyledFieldGroupName, { children: name })) })), collapsible ? (_jsx(ExpandCollapse, { collapsed: !open, children: descAndChildren })) : (descAndChildren)] }));\n});\nexport default FieldGroup;\n//# sourceMappingURL=FieldGroup.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment, useState, useLayoutEffect, useRef, useMemo, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Button from '../Button';\nimport ExpandCollapse from '../ExpandCollapse';\nimport Grid from '../Grid';\nimport { StyledLabel } from '../Label';\nimport { useBreakpoint, useConsolidatedRef, useI18n } from '../../hooks';\nimport { windowIsAvailable } from '../../utils';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledFieldName = styled.dt `\n  word-break: break-word;\n`;\nexport const StyledFieldValue = styled.dd `\n  word-break: break-word;\n`;\nexport const StyledFieldValueList = styled.dl(({ variant, theme }) => {\n    return css `\n    width: 100%;\n\n    ${variant === 'value-comparison' &&\n        css `\n      dt {\n        width: 100%;\n      }\n      dd {\n        text-align: end;\n        padding-inline-start: calc(2 * ${theme.base.spacing});\n      }\n      ${StyledLabel} {\n        max-width: unset;\n      }\n      dd:not(:last-of-type),\n      dt:not(:last-of-type) {\n        border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};\n        padding-bottom: calc(0.5 * ${theme.base.spacing});\n      }\n    `}\n  `;\n});\nStyledFieldValueList.defaultProps = defaultThemeProp;\nexport const StyledStackedFieldValue = styled.div ``;\nconst DynamicHeightValue = ({ children }) => {\n    const [collapsed, setCollapsed] = useState(true);\n    const [exceedsMaxHeight, setExceedsMaxHeight] = useState(false);\n    const textRef = useRef(null);\n    const t = useI18n();\n    const maxTextHeight = useMemo(() => {\n        if (!windowIsAvailable)\n            return Infinity;\n        const computedLineHeight = Number.parseInt(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10) * 1.25;\n        return 3 * computedLineHeight;\n    }, []);\n    useLayoutEffect(() => {\n        if (!textRef.current)\n            return;\n        const observer = new ResizeObserver(entries => {\n            const exceedsHeight = entries.some(({ target, contentRect }) => {\n                if (target !== textRef.current)\n                    return;\n                return contentRect.height > maxTextHeight;\n            });\n            setExceedsMaxHeight(exceedsHeight);\n        });\n        observer.observe(textRef.current);\n        return () => {\n            observer.disconnect();\n        };\n    }, [textRef.current, maxTextHeight]);\n    return (_jsxs(_Fragment, { children: [_jsx(ExpandCollapse, { collapsed: collapsed, min: exceedsMaxHeight ? `${maxTextHeight}px` : 'max-content', children: _jsx(\"div\", { ref: textRef, children: _jsx(\"span\", { children: children }) }) }), exceedsMaxHeight && (_jsx(Button, { variant: 'link', onClick: () => setCollapsed(current => !current), children: collapsed ? t('show_more') : t('show_less') }))] }));\n};\nexport const FieldValueItem = ({ name, value, variant = 'inline' }) => {\n    const Wrapper = variant === 'stacked' ? StyledStackedFieldValue : Fragment;\n    const displayValue = typeof value === 'string' ? _jsx(DynamicHeightValue, { children: value }) : value;\n    return (_jsxs(Wrapper, { children: [_jsx(StyledLabel, { as: StyledFieldName, children: name }), _jsx(StyledFieldValue, { children: value ? displayValue : _jsx(\"span\", { \"aria-hidden\": 'true', children: \"\\u2013\\u2013\" }) })] }));\n};\nconst FieldValueList = forwardRef((props, ref) => {\n    const { fields, variant = 'inline', ...restProps } = props;\n    const fieldValueListRef = useConsolidatedRef(ref);\n    const isXSContentWidthOrAbove = useBreakpoint('xs', {\n        breakpointRef: fieldValueListRef,\n        themeProp: 'content-width'\n    });\n    return (_jsx(Grid, { ...restProps, ref: fieldValueListRef, container: {\n            cols: ['inline', 'value-comparison'].includes(variant) && isXSContentWidthOrAbove\n                ? '16ch minmax(0, 1fr)'\n                : 'minmax(0, 1fr)',\n            colGap: variant !== 'value-comparison' ? 2 : 0,\n            rowGap: variant !== 'value-comparison' ? 1 : 0.5\n        }, as: StyledFieldValueList, variant: variant, children: fields.map(({ id, name, value, variant: fieldVariant }) => {\n            return (_jsx(FieldValueItem, { name: name, value: value, variant: (fieldVariant ?? variant) === 'stacked' || !isXSContentWidthOrAbove\n                    ? 'stacked'\n                    : 'inline' }, id ?? name));\n        }) }));\n});\nexport default FieldValueList;\n//# sourceMappingURL=FieldValueList.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nconst prefix = (value) => {\n    if (['between', 'around', 'evenly'].includes(value))\n        return `space-${value}`;\n    if (['start', 'end'].includes(value))\n        return `flex-${value}`;\n    return value;\n};\nconst getContainerStyles = (container) => {\n    if (!container)\n        return '';\n    if (container === true) {\n        return css `\n      display: flex;\n    `;\n    }\n    if (container && typeof container === 'object') {\n        const isRow = !container.direction || container.direction.includes('row');\n        const isReverse = container.direction && container.direction.includes('reverse');\n        return css `\n      display: ${container.inline ? 'inline-flex' : 'flex'};\n\n      ${container.pad !== undefined &&\n            css `\n        /* stylelint-disable function-name-case, function-whitespace-after */\n        padding: ${({ theme: { base: { spacing } } }) => (Array.isArray(container.pad) ? container.pad : [container.pad])\n                .map(p => `calc(${p} * ${spacing})`)\n                .join(' ')};\n\n        /* stylelint-enable function-name-case, function-whitespace-after */\n      `}\n\n      ${container.direction &&\n            css `\n        flex-direction: ${container.direction};\n      `}\n\n      ${container.justify &&\n            css `\n        justify-content: ${prefix(container.justify)};\n      `}\n\n      ${container.wrap &&\n            css `\n        flex-wrap: ${container.wrap};\n      `}\n\n      ${container.alignItems &&\n            css `\n        align-items: ${prefix(container.alignItems)};\n      `}\n\n      ${container.alignContent &&\n            css `\n        align-content: ${prefix(container.alignContent)};\n      `}\n\n      ${container.itemGap &&\n            css `\n          > * {\n            margin-${isRow ? 'inline-start' : 'block-start'}: calc(${container.itemGap} * ${props => props.theme.base.spacing});\n            ${isReverse ? ':last-child' : ':first-child'} {\n              margin-${isRow ? 'inline-start' : 'block-start'}: 0;\n            }\n          }\n        `}\n\n      ${container.gap !== undefined &&\n            css `\n        gap: calc(${container.gap} * ${props => props.theme.base.spacing});\n      `}\n\n      ${container.colGap !== undefined &&\n            css `\n        column-gap: calc(${container.colGap} * ${props => props.theme.base.spacing});\n      `}\n\n      ${container.rowGap !== undefined &&\n            css `\n        row-gap: calc(${container.rowGap} * ${props => props.theme.base.spacing});\n      `}\n    `;\n    }\n};\nconst getItemStyles = (item) => {\n    return css `\n    ${item &&\n        css `\n      max-width: 100%;\n      min-width: 0;\n\n      ${item.grow !== undefined &&\n            css `\n        flex-grow: ${item.grow};\n      `}\n\n      ${item.shrink !== undefined &&\n            css `\n        flex-shrink: ${item.shrink};\n      `}\n\n      ${item.alignSelf &&\n            css `\n        align-self: ${prefix(item.alignSelf)};\n      `}\n\n      ${item.basis &&\n            css `\n        flex-basis: ${item.basis};\n      `}\n    `}\n  `;\n};\nconst breakpointOrder = ['xs', 'sm', 'md', 'lg', 'xl'];\nexport const StyledFlex = styled.div(({ container, item, theme: { base: { breakpoints: themeBreakpoints } }, xs, sm, md, lg, xl }) => {\n    const breakpoints = {\n        xs,\n        sm,\n        md,\n        lg,\n        xl\n    };\n    return css `\n      ${getContainerStyles(container)}\n      ${getItemStyles(item)}\n\n    ${breakpointOrder.map(breakpoint => breakpoints[breakpoint] &&\n        css `\n            @media screen and (min-width: ${themeBreakpoints[breakpoint]}) {\n              ${getContainerStyles(breakpoints[breakpoint]?.container)}\n              ${getItemStyles(breakpoints[breakpoint]?.item)}\n            }\n          `)}\n    `;\n});\nStyledFlex.defaultProps = defaultThemeProp;\nconst Flex = forwardRef((props, ref) => {\n    return _jsx(StyledFlex, { ...props, ref: ref });\n});\nexport default Flex;\n//# sourceMappingURL=Flex.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { mix, rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { calculateFontSize } from '../../styles';\nexport const StyledFormControl = styled.div(({ theme: { base: { 'border-radius': baseRadius, 'font-size': baseFontSize, 'font-scale': baseFontScale, animation: { speed, timing }, palette }, components: { 'form-field': formField, 'form-control': { 'foreground-color': foreground, 'background-color': background, 'border-color': brd, 'border-radius': radius, 'border-width': borderWidth, ':hover': { 'border-color': hoverBorderColor }, ':focus': { 'border-color': focusBorderColor, 'box-shadow': shadow }, ':disabled': { 'border-color': disabledBorderColor, 'background-color': disabledBackgroundColor }, ':read-only': { 'border-color': readOnlyBorderColor, 'background-color': readOnlyBackgroundColor } } } }, status, hasSuggestion }) => {\n    const fontSize = calculateFontSize(baseFontSize, baseFontScale);\n    const borderColor = status && formField[status] ? formField[status]['status-color'] : brd;\n    const backgroundColor = hasSuggestion && status\n        ? mix(0.1, formField[status]['status-color'], palette['primary-background'])\n        : background;\n    return css `\n      color: ${foreground};\n      background-color: ${backgroundColor};\n      border-radius: calc(${baseRadius} * ${radius});\n      border-color: ${borderColor};\n      border-width: ${borderWidth};\n      border-style: solid;\n      transition: all ${timing.ease} ${speed};\n      &,\n      & > select {\n        outline: none;\n      }\n\n      &:disabled,\n      &[disabled] {\n        background-color: ${disabledBackgroundColor};\n        border-color: ${disabledBorderColor};\n        cursor: not-allowed;\n      }\n\n      &:focus:not([disabled]) {\n        border-color: ${focusBorderColor};\n        box-shadow: ${shadow};\n        ${hasSuggestion &&\n        css `\n          background-color: ${background};\n        `}\n      }\n\n      &:focus-within:not([disabled]) {\n        ${hasSuggestion &&\n        css `\n          background-color: ${background};\n        `}\n      }\n\n      &:hover:not([readonly]):not([disabled]):not(:focus, :focus-within) {\n        ${!status &&\n        css `\n          border-color: ${hoverBorderColor};\n        `}\n        ${hasSuggestion &&\n        css `\n          background-color: ${background};\n          box-shadow: 0 0 0 0.125rem ${rgba(borderColor, 0.2)};\n        `}\n      }\n\n      ${hasSuggestion &&\n        css `\n        border-end-end-radius: 0;\n      `}\n\n      &[readonly] {\n        background-color: ${readOnlyBackgroundColor};\n        border-color: ${readOnlyBorderColor};\n      }\n\n      @media (pointer: coarse) {\n        /* stylelint-disable-next-line unit-allowed-list */\n        font-size: max(${fontSize.s}, 16px);\n      }\n    `;\n});\nStyledFormControl.defaultProps = defaultThemeProp;\nconst FormControl = forwardRef((props, ref) => {\n    return _jsx(StyledFormControl, { ref: ref, ...props });\n});\nexport default FormControl;\n//# sourceMappingURL=FormControl.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { cloneElement, useEffect, useState, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { readableColor, rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport Actions from '../Actions';\nimport { useConsolidatedRef, useI18n, useUID } from '../../hooks';\nimport Label, { StyledLabel } from '../Label';\nimport { calculateFontSize, getHoverColors } from '../../styles';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\nimport { getFocusables, tryCatch } from '../../utils';\nimport Button from '../Button';\nimport Icon, { registerIcon } from '../Icon';\nimport * as warnSolidIcon from '../Icon/icons/warn-solid.icon';\nimport * as flagWaveSolidIcon from '../Icon/icons/flag-wave-solid.icon';\nimport * as checkIcon from '../Icon/icons/check.icon';\nimport AdditionalInfo from '../AdditionalInfo';\nregisterIcon(warnSolidIcon, flagWaveSolidIcon, checkIcon);\nconst StyledStatusIcon = styled(Icon)(({ theme, status }) => {\n    return css `\n      height: 1em;\n      width: 1em;\n      color: ${theme.components['form-field'][status]['status-color']};\n      vertical-align: baseline;\n      margin-inline-end: 0.5ch;\n    `;\n});\nStyledStatusIcon.defaultProps = defaultThemeProp;\nexport const StyledFormFieldInfo = styled.div(({ status, theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, spacing }, components: { 'form-field': formField } } }) => {\n    const { xxs: infoFontSize } = calculateFontSize(fontSize, fontScale);\n    return css `\n      max-width: max-content;\n      margin-top: calc(0.25 * ${spacing});\n      font-size: ${infoFontSize};\n      word-break: break-word;\n      ${status &&\n        formField[status] &&\n        css `\n        color: ${formField[status]['status-color']};\n      `}\n    `;\n});\nStyledFormFieldInfo.defaultProps = defaultThemeProp;\nconst StyledLabelRow = styled.div ``;\nexport const StyledFormField = styled.div(props => {\n    const { disabled, required, theme: { base: { palette: { urgent }, 'disabled-opacity': disabledOpacity, spacing } } } = props;\n    return css `\n    ${disabled &&\n        css `\n      opacity: ${disabledOpacity};\n      -webkit-user-select: none;\n      user-select: none;\n    `}\n    position: relative;\n    border: 0;\n\n    > ${StyledLabel}, > ${StyledLabelRow} {\n      margin-bottom: calc(0.25 * ${spacing});\n    }\n\n    > ${StyledLabel}, > ${StyledLabelRow} > ${StyledLabel} {\n      &::after {\n        display: ${required ? 'inline' : 'none'};\n        content: '\\\\00a0*';\n        vertical-align: top;\n        color: ${urgent};\n      }\n\n      ${disabled &&\n        css `\n        cursor: not-allowed;\n      `}\n    }\n  `;\n});\nStyledFormField.defaultProps = defaultThemeProp;\nconst StyledSuggestionButton = styled(Button)(({ theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, 'border-radius': baseRadius, spacing }, components: { 'form-control': { 'border-radius': radius, 'border-width': borderWidth }, 'form-field': formField } } }) => {\n    const { xxs: buttonFontSize } = calculateFontSize(fontSize, fontScale);\n    const backgroundColor = formField.pending['status-color'];\n    const hoverColors = getHoverColors(backgroundColor);\n    const color = tryCatch(() => readableColor(backgroundColor));\n    const borderColor = color ? rgba(color, 0.4) : color;\n    return css `\n      background-color: ${backgroundColor};\n      color: ${color};\n      font-size: ${buttonFontSize};\n      min-width: calc(3 * ${spacing});\n      min-height: calc(3 * ${spacing});\n      padding: 0 ${spacing};\n      border-radius: 0;\n      border: none;\n      &:first-child {\n        border-inline-end: ${borderWidth} solid ${borderColor};\n        border-end-start-radius: calc(${baseRadius} * ${radius});\n        margin-inline-start: calc(2 * ${spacing});\n      }\n      &:last-child {\n        border-end-end-radius: calc(${baseRadius} * ${radius});\n        margin-inline-start: 0;\n      }\n      &:hover {\n        background-color: ${hoverColors.background};\n      }\n\n      @media (pointer: coarse) {\n        min-height: 2rem;\n      }\n    `;\n});\nStyledSuggestionButton.defaultProps = defaultThemeProp;\nconst statusIconMap = { error: 'warn-solid', warning: 'flag-wave-solid', success: 'check' };\nconst FormField = forwardRef((props, ref) => {\n    const uid = useUID();\n    const { children: controlElement, id = uid, as = 'div', label, labelAs = 'label', labelFor = id, labelId, labelHidden = false, labelAfter = false, info, status, isRadioCheck, charLimitDisplay, required = false, disabled = false, readOnly = false, inline = false, actions, container, additionalInfo, onResolveSuggestion, ...restProps } = props;\n    const t = useI18n();\n    const labelAsLegend = labelAs === 'legend';\n    const hasSuggestion = status === 'pending' && !!onResolveSuggestion;\n    const consolidatedRef = useConsolidatedRef(ref);\n    const showAdditionalInfo = !!additionalInfo && !disabled && !labelHidden;\n    const labelAndInfo = (_jsxs(_Fragment, { children: [_jsxs(Label, { id: labelId, as: labelAs, htmlFor: labelAs === 'label' ? labelFor : undefined, labelHidden: labelHidden, onClick: (e) => {\n                    if (readOnly)\n                        e.preventDefault();\n                }, inline: inline, children: [status && status !== 'pending' && !labelHidden && (_jsx(StyledStatusIcon, { status: status, name: statusIconMap[status] })), label] }), showAdditionalInfo && (_jsx(AdditionalInfo, { heading: additionalInfo.heading, children: additionalInfo.content }))] }));\n    const labelRow = showAdditionalInfo && !isRadioCheck ? (_jsx(Flex, { as: StyledLabelRow, container: { justify: 'between', alignItems: 'end' }, item: { alignSelf: 'stretch' }, children: labelAndInfo })) : (labelAndInfo);\n    /*\n      We have to use an internal state and an effect to set the text value of info after the DOM element is rendered.\n      This is to ensure screen readers will announce info on errors when role is set to alert.\n      Needs testing to confirm. Currently the expected sequence would be:\n      - FormField renders with no error and no info\n      - user input triggers an error status\n      - props passed set error status and provide info text\n      - effect runs and sets live region state which renders and is announced\n    */\n    const [liveRegionInfo, setLiveRegionInfo] = useState(null);\n    useEffect(() => {\n        setLiveRegionInfo(info);\n    }, [info]);\n    // fieldset or single form control element\n    let content = labelAsLegend\n        ? controlElement\n        : cloneElement(controlElement, {\n            'aria-describedby': info && `${id}-info`\n        });\n    if (actions) {\n        content = (_jsxs(Flex, { container: { alignItems: 'center', gap: 0.5 }, children: [content, _jsx(Actions, { items: actions, menuAt: 3 })] }));\n    }\n    let infoContent = info ? (\n    /*\n      Region for additional info, help or error message.\n      Withholding aria-live=\"assertive\" to avoid iOS issue. See below.\n      https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions#Preferring_specialized_live_region_roles\n    */\n    _jsx(StyledFormFieldInfo, { status: status, role: status === 'error' || status === 'warning' ? 'alert' : undefined, id: `${id}-info`, children: liveRegionInfo })) : undefined;\n    if (charLimitDisplay) {\n        infoContent = (_jsxs(Flex, { container: { justify: infoContent ? 'between' : 'end', gap: 1 }, children: [infoContent, _jsx(Flex, { item: { shrink: 0 }, children: charLimitDisplay })] }));\n    }\n    if (hasSuggestion) {\n        const focusables = getFocusables(consolidatedRef);\n        infoContent = (_jsxs(Flex, { container: { alignItems: 'start', justify: 'between' }, children: [_jsxs(StyledFormFieldInfo, { status: status, id: `${id}-info`, children: [t('suggestion_info'), _jsx(VisuallyHiddenText, { \"aria-live\": 'polite', children: t('suggestion_assist') })] }), _jsxs(Flex, { container: { wrap: 'nowrap' }, children: [_jsx(StyledSuggestionButton, { onClick: () => {\n                                onResolveSuggestion(false);\n                                focusables[0]?.focus();\n                            }, \"aria-label\": t('reject_suggestion_button_a11y'), children: t('no') }), _jsx(StyledSuggestionButton, { onClick: () => {\n                                onResolveSuggestion(true);\n                                focusables[0]?.focus();\n                            }, \"aria-label\": t('accept_suggestion_button_a11y'), children: t('yes') })] })] }));\n    }\n    const onKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            const target = e.target;\n            if (!target.closest('button')) {\n                e.preventDefault();\n                onResolveSuggestion?.(true);\n            }\n        }\n    };\n    return (_jsxs(Flex, { ...restProps, container: {\n            direction: inline ? 'row' : 'column',\n            alignItems: inline ? 'center' : undefined,\n            ...container\n        }, as: StyledFormField, id: `${id}-field`, forwardedAs: as, required: required, disabled: disabled, readOnly: readOnly, onKeyDown: hasSuggestion ? onKeyDown : undefined, \"aria-describedby\": labelAsLegend && info ? `${id}-info` : undefined, ref: consolidatedRef, children: [(labelAsLegend || !labelAfter) && labelRow, content, !labelAsLegend && labelAfter && labelRow, !readOnly && infoContent] }));\n});\nexport default FormField;\n//# sourceMappingURL=FormField.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nconst prefix = (value) => {\n    if (['between', 'around', 'evenly'].includes(value))\n        return `space-${value}`;\n    return value;\n};\nconst getContainerStyles = (gridProps) => {\n    if (!gridProps)\n        return;\n    if (gridProps === true) {\n        return css `\n      display: grid;\n    `;\n    }\n    const { inline, pad, cols, autoCols, rows, autoRows, autoFlow, areas, template, colGap, rowGap, gap, justifyItems, justifyContent, alignItems, alignContent } = gridProps;\n    return css `\n    display: ${inline ? 'inline-grid' : 'grid'};\n\n    ${pad !== undefined &&\n        css `\n      /* stylelint-disable function-name-case, function-whitespace-after */\n      padding: ${({ theme: { base: { spacing } } }) => (Array.isArray(pad) ? pad : [pad]).map(p => `calc(${p} * ${spacing})`).join(' ')};\n\n      /* stylelint-enable function-name-case, function-whitespace-after */\n    `}\n\n    ${cols &&\n        css `\n      grid-template-columns: ${cols};\n    `}\n\n    ${autoCols &&\n        css `\n      grid-auto-columns: ${autoCols};\n    `}\n\n    ${rows &&\n        css `\n      grid-template-rows: ${rows};\n    `}\n\n    ${autoRows &&\n        css `\n      grid-auto-rows: ${autoRows};\n    `}\n\n    ${autoFlow &&\n        css `\n      grid-auto-flow: ${autoFlow};\n    `}\n\n    ${areas &&\n        css `\n      grid-template-areas: ${areas};\n    `}\n\n    ${template &&\n        css `\n      grid-template: ${template};\n    `}\n\n    ${gap !== undefined &&\n        css `\n      gap: calc(${gap} * ${props => props.theme.base.spacing});\n    `}\n\n    ${colGap !== undefined &&\n        css `\n      column-gap: calc(${colGap} * ${props => props.theme.base.spacing});\n    `}\n\n    ${rowGap !== undefined &&\n        css `\n      row-gap: calc(${rowGap} * ${props => props.theme.base.spacing});\n    `}\n\n    ${justifyItems &&\n        css `\n      justify-items: ${justifyItems};\n    `}\n\n    ${justifyContent &&\n        css `\n      justify-content: ${prefix(justifyContent)};\n    `}\n\n    ${alignItems &&\n        css `\n      align-items: ${alignItems};\n    `}\n\n    ${alignContent &&\n        css `\n      align-content: ${prefix(alignContent)};\n    `}\n  `;\n};\nconst getItemStyles = (props) => {\n    if (!props)\n        return;\n    const { colStart, colEnd, colStartEnd, rowStart, rowEnd, rowStartEnd, area, justifySelf, alignSelf } = props;\n    return css `\n    ${colStart &&\n        css `\n      grid-column-start: ${colStart};\n    `}\n\n    ${colEnd &&\n        css `\n      grid-column-end: ${colEnd};\n    `}\n\n    ${colStartEnd &&\n        css `\n      grid-column: ${colStartEnd};\n    `}\n\n    ${rowStart &&\n        css `\n      grid-row-start: ${rowStart};\n    `}\n\n    ${rowEnd &&\n        css `\n      grid-row-end: ${rowEnd};\n    `}\n\n    ${rowStartEnd &&\n        css `\n      grid-row: ${rowStartEnd};\n    `}\n\n    ${area &&\n        css `\n      grid-area: ${area};\n    `}\n\n    ${justifySelf &&\n        css `\n      justify-self: ${justifySelf};\n    `}\n\n    ${alignSelf &&\n        css `\n      align-self: ${alignSelf};\n    `}\n  `;\n};\nconst breakpointOrder = ['xs', 'sm', 'md', 'lg', 'xl'];\nexport const StyledGrid = styled.div(({ container, item, theme: { base: { breakpoints: themeBreakpoints } }, xs, sm, md, lg, xl }) => {\n    const breakpoints = {\n        xs,\n        sm,\n        md,\n        lg,\n        xl\n    };\n    return css `\n      ${getContainerStyles(container)}\n      ${getItemStyles(item)}\n\n    ${breakpointOrder.map(breakpoint => breakpoints[breakpoint] &&\n        css `\n            @media screen and (min-width: ${themeBreakpoints[breakpoint]}) {\n              ${getContainerStyles(breakpoints[breakpoint]?.container)}\n              ${getItemStyles(breakpoints[breakpoint]?.item)}\n            }\n          `)}\n    `;\n});\nStyledGrid.defaultProps = defaultThemeProp;\nconst Grid = forwardRef((props, ref) => {\n    return _jsx(StyledGrid, { ...props, ref: ref });\n});\nexport default Grid;\n//# sourceMappingURL=Grid.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport dompurify from 'dompurify';\nimport { StyledPopover } from '../Popover';\nimport { defaultThemeProp } from '../../theme';\nimport { calculateFontSize } from '../../styles';\nimport { sameOrigin } from '../../utils';\nexport const listStyles = css `\n  ul,\n  ol {\n    padding-inline-start: 2.5rem;\n  }\n\n  li {\n    margin: 0.5rem 0;\n  }\n\n  ul li {\n    ul {\n      margin-inline-start: 1rem;\n      list-style-type: circle;\n    }\n\n    ul ul {\n      margin-inline-start: 2rem;\n      list-style-type: square;\n    }\n\n    ul ul ul {\n      margin-inline-start: 3rem;\n      list-style-type: disc;\n    }\n  }\n\n  ol li {\n    ol {\n      margin-inline-start: 1rem;\n      list-style-type: lower-alpha;\n    }\n\n    ol ol {\n      margin-inline-start: 2rem;\n      list-style-type: lower-roman;\n    }\n\n    ol ol ol {\n      margin-inline-start: 3rem;\n      list-style-type: decimal;\n    }\n  }\n`;\nexport const getTableStyles = (theme) => css `\n  border-collapse: collapse;\n\n  td {\n    border: 0.0625rem solid ${theme.base.palette['border-line']};\n    min-width: 6.25rem;\n  }\n\n  tr:first-child {\n    td:first-child {\n      border-top-left-radius: 0.125rem;\n    }\n\n    td:last-child {\n      border-top-right-radius: 0.125rem;\n    }\n  }\n\n  tr:last-child {\n    td:first-child {\n      border-bottom-left-radius: 0.125rem;\n    }\n\n    td:last-child {\n      border-bottom-right-radius: 0.125rem;\n    }\n  }\n`;\nexport const getHtmlStyles = (theme) => {\n    const { base: { 'font-size': baseFontSize, 'font-scale': baseFontScale, palette }, components: { text } } = theme;\n    const fontSize = calculateFontSize(baseFontSize, baseFontScale);\n    return `\n    ${listStyles}\n    table {\n      ${getTableStyles(theme)}\n    }\n    img {\n      max-width: 100%;\n      height: auto;\n      border-radius: 0.25rem;\n    }\n    a {\n      color: ${palette.interactive};\n    }\n    pre {\n      white-space: break-spaces;\n    }\n    p {\n      min-height: ${fontSize[text.primary['font-size']]};\n    }\n    h1 {\n      font-size: ${fontSize[text.h1['font-size']]};\n      font-weight: ${text.h1['font-weight']};\n      min-height: ${fontSize[text.h1['font-size']]};\n    }\n    h2 {\n      font-size: ${fontSize[text.h2['font-size']]};\n      font-weight: ${text.h2['font-weight']};\n      min-height: ${fontSize[text.h2['font-size']]};\n    }\n    h3 {\n      font-size: ${fontSize[text.h3['font-size']]};\n      font-weight: ${text.h3['font-weight']};\n      min-height: ${fontSize[text.h3['font-size']]};\n    }\n    h4 {\n      font-size: ${fontSize[text.h4['font-size']]};\n      font-weight: ${text.h4['font-weight']};\n      min-height: ${fontSize[text.h4['font-size']]};\n    }\n    h5 {\n      font-size: ${fontSize[text.h5['font-size']]};\n      font-weight: ${text.h5['font-weight']};\n      min-height: ${fontSize[text.h5['font-size']]};\n    }\n    h6 {\n      font-size: ${fontSize[text.h6['font-size']]};\n      font-weight: ${text.h6['font-weight']};\n      min-height: ${fontSize[text.h6['font-size']]};\n    }\n  `;\n};\nexport const StyledHTML = styled.div(({ theme }) => {\n    return css `\n    width: 100%;\n    overflow-x: auto;\n    overflow-wrap: break-word;\n    ${getHtmlStyles(theme)}\n\n    ${StyledPopover} ul {\n      ul {\n        padding-inline-start: 0;\n      }\n      ol {\n        padding-inline-start: 0;\n      }\n    }\n\n    ${StyledPopover} li {\n      margin: 0;\n    }\n  `;\n});\nStyledHTML.defaultProps = defaultThemeProp;\nconst targetBlankSet = new WeakSet();\ndompurify.addHook('beforeSanitizeAttributes', node => {\n    // Can be passed text nodes\n    if (!(node instanceof HTMLElement || node instanceof SVGElement))\n        return;\n    node.removeAttribute('class');\n    if (node.tagName === 'A' &&\n        node.hasAttribute('href') &&\n        node.getAttribute('target') === '_blank') {\n        targetBlankSet.add(node);\n    }\n});\ndompurify.addHook('afterSanitizeAttributes', node => {\n    if (node.tagName === 'A' && node.hasAttribute('href')) {\n        const href = node.getAttribute('href');\n        let fullURL;\n        try {\n            fullURL = new URL(href, window.location.href);\n        }\n        catch (e) {\n            return;\n        }\n        if (!sameOrigin(window.location, fullURL)) {\n            node.setAttribute('target', '_blank');\n            node.setAttribute('rel', 'noopener');\n        }\n        else if (targetBlankSet.has(node)) {\n            node.setAttribute('target', '_blank');\n            targetBlankSet.delete(node);\n        }\n    }\n});\nconst HTML = forwardRef(({ content, customTags, ...restProps }, ref) => {\n    const [mounted, setMounted] = useState(false);\n    const sanitizedHtml = useMemo(() => {\n        // Don't render content on the server at all.\n        return mounted\n            ? dompurify.sanitize(content, {\n                CUSTOM_ELEMENT_HANDLING: {\n                    tagNameCheck: customTags ? tagName => customTags.includes(tagName) : null\n                }\n            })\n            : '';\n    }, [content, customTags, mounted]);\n    useEffect(() => {\n        setMounted(true);\n    }, []);\n    return (_jsx(StyledHTML, { ...restProps, dangerouslySetInnerHTML: { __html: sanitizedHtml }, ref: ref }));\n});\nexport default HTML;\n//# sourceMappingURL=HTML.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect } from 'react';\nimport styled from 'styled-components';\nconst iconRegistry = new Map();\nexport const registerIcon = (...icons) => {\n    icons.forEach(({ name, ...iconDef }) => {\n        if (!iconRegistry.has(name))\n            iconRegistry.set(name, iconDef);\n    });\n};\nexport const forceRegisterIcon = (...icons) => {\n    icons.forEach(({ name, ...iconDef }) => {\n        iconRegistry.set(name, iconDef);\n    });\n};\nexport const StyledIcon = styled.svg `\n  display: inline-block;\n  fill: currentColor;\n  height: 1.125rem;\n  width: 1.125rem;\n  vertical-align: middle;\n`;\nconst emptyIconDefinition = Object.freeze({ Component: () => null });\nconst Icon = forwardRef(({ name, ...restProps }, ref) => {\n    const [iconDef, setIconDef] = useState(iconRegistry.get(name) ?? emptyIconDefinition);\n    useEffect(() => {\n        if (iconRegistry.has(name)) {\n            setIconDef(iconRegistry.get(name));\n            return;\n        }\n        const controller = new AbortController();\n        (async () => {\n            try {\n                const module = await import(`./icons/${encodeURIComponent(name)}.icon`);\n                if (module.name !== name || !module.Component)\n                    throw new Error('Malformed icon definition');\n                registerIcon(module);\n            }\n            catch {\n                registerIcon({ name, ...emptyIconDefinition });\n            }\n            if (!controller.signal.aborted)\n                setIconDef(iconRegistry.get(name) ?? emptyIconDefinition);\n        })();\n        return () => controller.abort();\n    }, [name]);\n    return (_jsx(StyledIcon, { role: 'presentation', ...restProps, viewBox: iconDef.viewBox, ref: ref, children: _jsx(iconDef.Component, {}) }));\n});\nexport default Icon;\n//# sourceMappingURL=Icon.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled from 'styled-components';\nexport const StyledImage = styled.img `\n  max-width: 100%;\n`;\nconst Image = forwardRef((props, ref) => {\n    const { alt, ...restProps } = props;\n    return _jsx(StyledImage, { ...restProps, alt: alt, ref: ref });\n});\nexport default Image;\n//# sourceMappingURL=Image.js.map","import styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { StyledFormControl } from '../FormControl';\nexport const StyledRangeInputContainer = styled.div `\n  gap: 1rem;\n\n  ${StyledFormControl} {\n    position: relative;\n  }\n\n  > :first-child {\n    > ${StyledFormControl}:after {\n      content: '-';\n      position: absolute;\n      width: 1rem;\n      inset-inline-end: -1rem;\n      text-align: center;\n    }\n  }\n\n  > ${StyledFormControl}:first-child:after {\n    content: '-';\n    position: absolute;\n    width: 1rem;\n    inset-inline-end: -1rem;\n    text-align: center;\n  }\n\n  > * {\n    flex-grow: 1;\n  }\n`;\nStyledRangeInputContainer.defaultProps = defaultThemeProp;\nconst StyledInput = styled.input(({ theme: { base, components } }) => {\n    return css `\n    width: 100%;\n    height: ${components.input.height};\n    min-height: ${base['hit-area']['mouse-min']};\n    padding: 0 ${components.input.padding};\n    appearance: none;\n    -webkit-appearance: none;\n    text-align: inherit;\n\n    @media (pointer: coarse) {\n      min-height: ${base['hit-area']['finger-min']};\n    }\n  `;\n});\nStyledInput.defaultProps = defaultThemeProp;\nexport default StyledInput;\n//# sourceMappingURL=Input.styles.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { hideVisually, readableColor, rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nexport const StyledLabel = styled.label(({ theme, labelHidden }) => {\n    const color = tryCatch(() => {\n        return rgba(readableColor(theme.base.palette['primary-background']), theme.base.transparency['transparent-3']);\n    });\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return labelHidden\n        ? hideVisually\n        : css `\n          max-width: max-content;\n          font-size: ${fontSize[theme.components.label['font-size']]};\n          font-weight: ${theme.base['font-weight']['semi-bold']};\n          color: ${color};\n        `;\n});\nStyledLabel.defaultProps = defaultThemeProp;\nconst Label = forwardRef(({ children, labelHidden = false, htmlFor, ...restProps }, ref) => {\n    return (_jsx(StyledLabel, { ref: ref, labelHidden: labelHidden, htmlFor: htmlFor === '' ? undefined : htmlFor, ...restProps, children: children }));\n});\nexport default Label;\n//# sourceMappingURL=Label.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Button from '../Button';\nimport Flex from '../Flex';\nimport Icon, { StyledIcon, registerIcon } from '../Icon';\nimport * as warnIcon from '../Icon/icons/warn.icon';\nimport Text from '../Text';\nimport { useI18n } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nregisterIcon(warnIcon);\nexport const StyledErrorState = styled.div(({ theme }) => {\n    return css `\n    height: 100%;\n\n    ${StyledIcon} {\n      font-size: 1.5rem;\n      height: 1.5rem;\n      width: 1.5rem;\n      color: ${theme.base.palette.urgent};\n    }\n  `;\n});\nStyledErrorState.defaultProps = defaultThemeProp;\nconst ErrorState = forwardRef((props, ref) => {\n    const t = useI18n();\n    const { message = t('unknown_error'), onRetry, ...restProps } = props;\n    return (_jsxs(Flex, { ...restProps, as: StyledErrorState, ref: ref, container: { direction: 'column', alignItems: 'center', justify: 'center', gap: 1 }, children: [_jsx(Icon, { name: 'warn' }), _jsx(Text, { variant: 'secondary', children: message }), onRetry && (_jsx(Button, { variant: 'secondary', onClick: onRetry, children: t('try_again') }))] }));\n});\nexport default ErrorState;\n//# sourceMappingURL=ErrorState.js.map","import styled, { css } from 'styled-components';\nimport { hideVisually, rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nimport Image from '../Image';\nimport Button from '../Button';\nimport BareButton from '../Button/BareButton';\nimport { StyledIcon } from '../Icon';\nimport { StyledMetaList } from '../MetaList/MetaList';\nimport { StyledErrorState } from '../ErrorState';\nimport { StyledText } from '../Text';\nimport { useDirection } from '../../hooks';\nimport Backdrop from '../Backdrop';\nexport const StyledHeader = styled.header(({ theme }) => {\n    const color = tryCatch(() => rgba(theme.base.palette.light, theme.base.transparency['transparent-2']));\n    return css `\n    position: relative;\n    width: 100%;\n    padding: ${theme.base.spacing};\n    color: ${color};\n\n    ${StyledMetaList} {\n      justify-content: center;\n      li {\n        color: ${color};\n      }\n    }\n  `;\n});\nStyledHeader.defaultProps = defaultThemeProp;\nexport const StyledCountTracker = styled.div(({ theme }) => {\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    font-size: ${fontSize.xs};\n    text-align: center;\n    min-width: calc(2 * ${theme.base['hit-area']['mouse-min']});\n\n    @media (pointer: coarse) {\n      min-width: calc(2 * ${theme.base['hit-area']['finger-min']});\n    }\n  `;\n});\nStyledCountTracker.defaultProps = defaultThemeProp;\nexport const StyledInfo = styled.div(({ theme }) => {\n    return css `\n    color: ${theme.base.palette.light};\n    font-weight: ${theme.base['font-weight']['semi-bold']};\n  `;\n});\nStyledInfo.defaultProps = defaultThemeProp;\nexport const StyledNavButton = styled(BareButton)(({ theme }) => {\n    const bg = tryCatch(() => rgba(theme.base.colors.gray.medium, 0.5));\n    const hoverBg = tryCatch(() => rgba(theme.base.colors.gray.medium, 0.7));\n    const { rtl } = useDirection();\n    return css `\n    position: absolute;\n    z-index: 1;\n    inset-block: 0;\n    min-width: ${theme.base['hit-area']['mouse-min']};\n    color: ${theme.base.palette['foreground-color']};\n    box-shadow: none;\n    border-radius: 0;\n\n    @media (pointer: coarse) {\n      min-width: ${theme.base['hit-area']['finger-min']};\n    }\n\n    &[hidden] {\n      display: none;\n    }\n\n    & > span {\n      display: inline-block;\n      background-color: ${bg};\n\n      ${StyledIcon} {\n        color: ${theme.base.palette.light};\n        width: 2rem;\n        height: 3rem;\n\n        ${rtl &&\n        css `\n          transform: rotateZ(180deg);\n        `}\n      }\n    }\n\n    &:nth-of-type(1) {\n      inset-inline-start: 0;\n      text-align: start;\n      & > span {\n        border-start-end-radius: calc(${theme.base['border-radius']} / 2);\n        border-end-end-radius: calc(${theme.base['border-radius']} / 2);\n      }\n    }\n\n    &:nth-of-type(2) {\n      inset-inline-end: 0;\n      text-align: end;\n      & > span {\n        border-start-start-radius: calc(${theme.base['border-radius']} / 2);\n        border-end-start-radius: calc(${theme.base['border-radius']} / 2);\n      }\n    }\n\n    &:hover > span {\n      background-color: ${hoverBg};\n    }\n\n    &:focus > span {\n      box-shadow: ${theme.base.shadow['focus-inverted']};\n    }\n  `;\n});\nStyledNavButton.defaultProps = defaultThemeProp;\nexport const StyledActionButton = styled(Button)(({ theme }) => {\n    return css `\n    padding: ${theme.base.spacing};\n    color: ${theme.base.palette.light};\n\n    &:focus:enabled {\n      box-shadow: ${theme.base.shadow['focus-inverted']};\n    }\n  `;\n});\nStyledActionButton.defaultProps = defaultThemeProp;\nexport const StyledImageContainer = styled.div(({ theme }) => {\n    return css `\n    position: relative;\n\n    & > div {\n      position: absolute;\n      inset-block-start: 0;\n      inset-block-end: calc(2 * ${theme.base.spacing});\n      inset-inline: 0;\n    }\n\n    ${StyledErrorState} {\n      margin: auto;\n      & > ${StyledText} {\n        color: ${theme.base.palette.light};\n      }\n    }\n  `;\n});\nStyledImageContainer.defaultProps = defaultThemeProp;\nexport const StyledPreviewRegion = styled.div `\n  position: relative;\n  width: 100%;\n`;\nexport const StyledImage = styled(Image) `\n  display: block;\n  max-width: 100%;\n  max-height: 100%;\n  margin: auto;\n`;\nexport const StyledLiveRegion = styled.div `\n  ${hideVisually}\n`;\nexport const StyledLightbox = styled(Backdrop) `\n  &:focus {\n    outline: none;\n  }\n`;\n//# sourceMappingURL=Lightbox.styles.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useRef, useState, forwardRef } from 'react';\nimport { cap } from '../../utils';\nimport Flex from '../Flex';\nimport MetaList from '../MetaList';\nimport Icon from '../Icon';\nimport Text from '../Text';\nimport { useConsolidatedRef, useDirection, useEvent, useFocusTrap, useI18n, useScrollToggle } from '../../hooks';\nimport ErrorState from '../ErrorState';\nimport { StyledHeader, StyledCountTracker, StyledInfo, StyledActionButton, StyledPreviewRegion, StyledNavButton, StyledImageContainer, StyledImage, StyledLiveRegion, StyledLightbox } from './Lightbox.styles';\nconst Lightbox = forwardRef(({ items, defaultIndex = 0, cycle, onItemLoad, onItemError, onNavigate, onItemDownload, onAfterClose, ...restProps }, refArg) => {\n    const t = useI18n();\n    const { start, end } = useDirection();\n    const [currentIndex, setCurrentIndex] = useState(defaultIndex);\n    const currentItem = items[currentIndex];\n    const { disableScroll, enableScroll } = useScrollToggle();\n    const lightboxRef = useConsolidatedRef(refArg);\n    const headerRef = useRef(null);\n    const closeButtonRef = useRef(null);\n    const prevButtonRef = useRef(null);\n    const nextButtonRef = useRef(null);\n    const [open, setOpen] = useState(true);\n    const imageRef = useConsolidatedRef(currentItem.ref);\n    const [error, setError] = useState(false);\n    const [liveText, setLiveText] = useState('');\n    const countTrackerText = items.length > 1 ? t('x_of_y', [currentIndex + 1, items.length]) : '';\n    const close = () => {\n        setOpen(false);\n    };\n    const navigate = (direction) => {\n        if (direction === 1) {\n            if (currentIndex < items.length - 1) {\n                setCurrentIndex(cur => cur + 1);\n                setError(false);\n            }\n            else if (cycle) {\n                setCurrentIndex(0);\n                setError(false);\n            }\n        }\n        else if (currentIndex > 0) {\n            setCurrentIndex(cur => cur - 1);\n            setError(false);\n        }\n        else if (cycle) {\n            setCurrentIndex(items.length - 1);\n            setError(false);\n        }\n    };\n    const keyDownHandler = (e) => {\n        if (e.repeat)\n            return;\n        if (e.key === 'Escape') {\n            close();\n        }\n        else if (e.key === `Arrow${cap(end)}`) {\n            navigate(1);\n        }\n        else if (e.key === `Arrow${cap(start)}`) {\n            navigate(-1);\n        }\n    };\n    useEvent('keydown', keyDownHandler);\n    useFocusTrap(lightboxRef);\n    useEffect(() => {\n        setLiveText(`${currentItem.name}. ${countTrackerText ? `${countTrackerText}.` : ''} ${currentItem.description}.`);\n    }, [currentItem.name, countTrackerText, currentItem.description]);\n    useEffect(() => {\n        lightboxRef.current?.focus();\n    }, []);\n    return (_jsxs(StyledLightbox, { ...restProps, tabIndex: -1, ref: lightboxRef, open: open, role: 'dialog', \"aria-modal\": 'true', container: { alignItems: 'start', justify: 'start', direction: 'column' }, alpha: 0.9, variant: 'dark', transitionSpeed: 'slow', onBeforeTransitionIn: disableScroll, onAfterTransitionOut: () => {\n            enableScroll();\n            onAfterClose?.();\n        }, children: [_jsxs(Flex, { as: StyledHeader, ref: headerRef, container: {\n                    justify: 'between',\n                    alignItems: 'center',\n                    gap: 2\n                }, onMouseDown: (e) => {\n                    if (e.button !== 0)\n                        return;\n                    if (e.target === e.currentTarget)\n                        close();\n                }, children: [_jsx(StyledCountTracker, { \"aria-hidden\": 'true', children: countTrackerText }), _jsxs(Flex, { as: StyledInfo, container: {\n                            wrap: 'wrap',\n                            alignItems: 'center',\n                            justify: 'center',\n                            colGap: 2,\n                            rowGap: 0.5\n                        }, children: [_jsx(Text, { variant: 'primary', as: 'h2', children: currentItem.name }), currentItem.metadata && _jsx(MetaList, { items: currentItem.metadata })] }), _jsxs(Flex, { container: true, children: [onItemDownload && (_jsx(StyledActionButton, { variant: 'simple', \"aria-label\": t('download'), icon: true, onClick: () => onItemDownload(currentItem.id), children: _jsx(Icon, { name: 'download' }) })), _jsx(StyledActionButton, { variant: 'simple', ref: closeButtonRef, \"aria-label\": t('close'), icon: true, onClick: close, children: _jsx(Icon, { name: 'times' }) })] })] }), _jsxs(Flex, { container: { justify: 'between' }, as: StyledPreviewRegion, item: { grow: 1, shrink: 0 }, children: [items.length > 1 && (_jsx(StyledNavButton, { ref: prevButtonRef, variant: 'simple', \"aria-label\": t('pagination_prev'), hidden: !cycle && currentIndex === 0, icon: true, onClick: () => {\n                            navigate(-1);\n                        }, children: _jsx(\"span\", { children: _jsx(Icon, { name: 'caret-left' }) }) })), _jsx(Flex, { item: { grow: 1 }, as: StyledImageContainer, children: _jsx(Flex, { container: { alignItems: 'center' }, onMouseDown: (e) => {\n                                if (e.button !== 0)\n                                    return;\n                                if (e.target === e.currentTarget)\n                                    close();\n                            }, children: error ? (_jsx(ErrorState, { message: t('image_load_error') })) : (_jsx(StyledImage, { ref: imageRef, src: currentItem.src, alt: currentItem.description, onLoad: (e) => {\n                                    onItemLoad?.(currentItem.id, e);\n                                }, onError: (e) => {\n                                    onItemError?.(currentItem.id, e);\n                                    setError(true);\n                                } })) }) }), items.length > 1 && (_jsx(StyledNavButton, { ref: nextButtonRef, variant: 'simple', \"aria-label\": t('pagination_next'), hidden: !cycle && currentIndex === items.length - 1, icon: true, onClick: () => {\n                            navigate(1);\n                        }, children: _jsx(\"span\", { children: _jsx(Icon, { name: 'caret-right' }) }) }))] }), _jsx(StyledLiveRegion, { \"aria-live\": 'polite', \"aria-label\": liveText })] }));\n});\nexport default Lightbox;\n//# sourceMappingURL=Lightbox.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport useOS from '../../hooks/useOS';\nconst osxKeyMapper = {\n    Command: '⌘',\n    Option: '⌥',\n    Alt: '⌥',\n    Control: '⌃',\n    Return: '↵',\n    Delete: 'Del'\n};\nconst windowsKeyMapper = {\n    Control: 'Ctrl',\n    Alt: 'Alt',\n    Windows: '⊞',\n    Backspace: 'Backspace',\n    Option: 'Alt'\n};\nconst generalKeyMapper = {\n    'Page up': 'Pg up',\n    'Page down': 'Pg dn',\n    Ins: 'Insert'\n};\nexport const StyledKeyboard = styled.kbd(({ theme: { base, components: { text: { primary }, badges: { keyboard } } } }) => {\n    return css `\n      background-color: ${keyboard['background-color']};\n      color: ${base.palette['foreground-color']};\n      display: inline-block;\n      position: relative;\n      font-family: ${base['font-family']};\n      font-weight: ${primary['font-weight']};\n      overflow: hidden;\n      white-space: nowrap;\n      padding: 0.125rem;\n      border: 0.0125rem solid ${keyboard['border-color']};\n      border-radius: calc(${base['border-radius']} / 4);\n      text-transform: capitalize;\n      text-align: center;\n      min-width: 1.25rem;\n      height: 1.25rem;\n      text-overflow: ellipsis;\n      line-height: 1rem;\n      inset-block-start: calc(1.25rem / 4 - 0.125rem);\n    `;\n});\nStyledKeyboard.defaultProps = defaultThemeProp;\nconst Keyboard = ({ keyName, ...restProps }) => {\n    const { windows: isWindows } = useOS();\n    return (_jsx(StyledKeyboard, { ...restProps, \"aria-label\": keyName, children: (isWindows && windowsKeyMapper[keyName]) ||\n            osxKeyMapper[keyName] ||\n            generalKeyMapper[keyName] ||\n            keyName }));\n};\nexport default Keyboard;\n//# sourceMappingURL=Keyboard.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useRef, useContext, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { readableColor } from 'polished';\nimport Button from '../Button';\nimport Popover from '../Popover';\nimport BareButton from '../Button/BareButton';\nimport { defaultThemeProp } from '../../theme';\nimport { useBreakpoint, useConsolidatedRef, useI18n, useUID, useModalContext, useOS } from '../../hooks';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nimport AppShellContext from '../AppShell/AppShellContext';\nimport { Keyboard } from '../Badges';\nimport Text, { StyledText } from '../Text';\nimport { StyledKeyboard } from '../Badges/Keyboard';\nimport Flex from '../Flex';\nexport const StyledLinkPopover = styled.div(({ theme, preview }) => css `\n    background-color: ${theme.components.tooltip['background-color']};\n    ${preview &&\n    css `\n      padding: ${theme.base.spacing};\n    `}\n  `);\nStyledLinkPopover.defaultProps = defaultThemeProp;\nexport const StyledLinkPopoverBtn = styled(BareButton)(({ theme }) => {\n    const contrastColor = tryCatch(() => readableColor(theme.base.palette.interactive));\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    z-index: 1;\n    padding: 0 ${theme.base.spacing};\n    min-height: 1.5rem;\n    line-height: 1;\n    color: ${contrastColor};\n    font-size: ${fontSize.xs};\n    text-decoration: none;\n\n    /* FIXME: Button selector specificity... */\n    & + & {\n      margin: 0;\n    }\n\n    & + &::before {\n      content: '';\n      position: absolute;\n      inset-inline-start: 0;\n      inset-block: 0;\n      width: 1px; /* stylelint-disable-line unit-allowed-list */\n      background-color: ${contrastColor};\n      opacity: ${theme.base.transparency['transparent-3']};\n    }\n\n    &:hover,\n    &:active {\n      text-decoration: underline;\n    }\n\n    &:focus {\n      box-shadow: inset 0 0 0 0.0625rem ${theme.base.palette.light},\n        0 0 0.125rem 0.0625rem ${theme.base.palette.interactive};\n    }\n  `;\n});\nStyledLinkPopoverBtn.defaultProps = defaultThemeProp;\nexport const StyledLinkPreviewPopoverBtn = styled(StyledLinkPopoverBtn)(({ theme }) => {\n    return css `\n    width: 100%;\n    padding: unset;\n\n    &:hover,\n    &:active {\n      text-decoration: none;\n      ${StyledText} span {\n        text-decoration: underline;\n      }\n    }\n\n    ${StyledText} {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n\n    ${StyledKeyboard} {\n      color: ${theme.base.palette.light};\n      background-color: ${theme.base.colors.gray.dark};\n      border-color: ${theme.base.colors.gray.medium};\n      inset-block-start: unset;\n\n      &:first-of-type {\n        margin-inline: ${theme.base.spacing};\n      }\n    }\n  `;\n});\nStyledLinkPreviewPopoverBtn.defaultProps = defaultThemeProp;\nexport const StyledLink = styled(Button) ``;\nStyledLink.defaultProps = defaultThemeProp;\nconst Link = forwardRef(({ href, variant = 'link', previewable, onPreview, ...restProps }, ref) => {\n    const { initialized: inModal } = useModalContext();\n    const { previewTriggerRef } = useContext(AppShellContext);\n    const uid = useUID();\n    const linkRef = useConsolidatedRef(ref);\n    const [popover, setPopover] = useState(false);\n    const [popoverHideDelay, setPopoverHideDelay] = useState('short');\n    const [previewPopover, setPreviewPopover] = useState(false);\n    const previewBtnRef = useRef(null);\n    const isSmallOrAbove = useBreakpoint('sm');\n    const t = useI18n();\n    const { macintosh } = useOS();\n    const contextMenuOpened = useRef(false);\n    const showPopover = () => {\n        if (isSmallOrAbove) {\n            setPopover(true);\n            setPreviewPopover(false);\n        }\n    };\n    const showPreviewPopover = () => {\n        if (isSmallOrAbove && !popover && !contextMenuOpened.current)\n            setPreviewPopover(true);\n    };\n    const hidePopover = () => {\n        setPopover(false);\n    };\n    const hidePreviewPopover = () => {\n        setPreviewPopover(false);\n    };\n    const onEnterLink = () => {\n        if (previewable)\n            showPopover();\n    };\n    const onFocusLink = () => {\n        if (previewable)\n            showPreviewPopover();\n    };\n    const onBlurLink = () => {\n        contextMenuOpened.current = false;\n        hidePreviewPopover();\n    };\n    const onPreviewClick = () => {\n        previewTriggerRef.current = linkRef.current;\n        onPreview?.({ href });\n    };\n    const onKeyUp = (e) => {\n        if (e.getModifierState('Alt') && e.code === 'KeyP') {\n            onPreviewClick();\n        }\n    };\n    useEffect(() => {\n        if (popoverHideDelay === 'none' && !popover && !previewPopover) {\n            setPopoverHideDelay('short');\n        }\n    }, [popoverHideDelay, popover, previewPopover]);\n    return (_jsxs(_Fragment, { children: [_jsx(StyledLink, { href: href, variant: variant, ref: linkRef, ...restProps, onMouseEnter: onEnterLink, onMouseLeave: hidePopover, onFocus: onFocusLink, onBlur: onBlurLink, onKeyUp: onKeyUp, onContextMenu: () => {\n                    contextMenuOpened.current = true;\n                    setPopoverHideDelay('none');\n                    setPreviewPopover(false);\n                    setPopover(false);\n                }, \"aria-describedby\": previewable ? `${uid}-preview-instructions` : undefined }), !inModal && (_jsx(Popover, { show: previewPopover, groupId: 'link_preview', showDelay: 'short', hideDelay: popoverHideDelay, placement: 'bottom', target: linkRef.current, onMouseEnter: showPreviewPopover, onMouseLeave: hidePreviewPopover, as: StyledLinkPopover, arrow: true, preview: true, onHide: hidePreviewPopover, children: _jsx(StyledLinkPreviewPopoverBtn, { preview: true, type: 'button', ref: previewBtnRef, onClick: onPreviewClick, tabIndex: '-1', children: _jsxs(Text, { children: [_jsx(\"span\", { children: t('preview') }), _jsxs(Flex, { container: { inline: true, justify: 'end' }, children: [_jsx(Keyboard, { keyName: 'Alt' }), _jsx(Keyboard, { keyName: 'P' })] })] }) }) })), _jsxs(Popover, { show: popover, groupId: 'link_preview', showDelay: 'short', hideDelay: popoverHideDelay, placement: 'bottom', target: linkRef.current, onMouseEnter: showPopover, onMouseLeave: hidePopover, as: StyledLinkPopover, arrow: true, children: [!inModal && (_jsx(StyledLinkPopoverBtn, { preview: true, type: 'button', ref: previewBtnRef, onClick: onPreviewClick, tabIndex: '-1', children: t('preview') })), _jsx(StyledLinkPopoverBtn, { forwardedAs: 'a', href: href, target: '_blank', rel: 'noreferrer', tabIndex: '-1', children: t('link_open_in_tab_text') })] }), previewable && (_jsx(\"span\", { id: `${uid}-preview-instructions`, hidden: true, children: t('preview_link_instruction', [macintosh ? 'option' : 'alt']) }))] }));\n});\nexport default Link;\n//# sourceMappingURL=Link.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledMark = styled.mark(({ theme }) => {\n    return css `\n    color: ${theme.base.colors.black};\n    background-color: ${theme.components.mark['background-color']};\n    font-weight: ${theme.components.mark['font-weight']};\n  `;\n});\nStyledMark.defaultProps = defaultThemeProp;\nconst Mark = props => {\n    return _jsx(StyledMark, { ...props });\n};\nexport default Mark;\n//# sourceMappingURL=Mark.js.map","import { hideVisually, mix, readableColor, rgba } from 'polished';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { StyledEmptyState } from '../EmptyState';\nimport { StyledIcon } from '../Icon';\nimport { StyledGrid } from '../Grid';\nimport { StyledBareButton } from '../Button/BareButton';\nimport { tryCatch } from '../../utils';\nimport { StyledText } from '../Text';\nimport { StyledVisuallyHiddenText } from '../VisuallyHiddenText/VisuallyHiddenText';\nimport Button from '../Button';\nconst listMaxHeight = '50vh';\nexport const StyledExpandButton = styled(Button) `\n  align-self: center;\n`;\nexport const StyledItemLabel = styled.label(({ theme }) => {\n    const hoverCheckColor = tryCatch(() => rgba(theme.components['radio-check'][':checked']['background-color'], theme.base.transparency['transparent-5']));\n    const checkedBackground = theme.components['radio-check'][':checked']['background-color'];\n    const checkedForeground = tryCatch(() => readableColor(checkedBackground));\n    return css `\n    padding: calc(0.5 * ${theme.base.spacing}) ${theme.base.spacing};\n    cursor: pointer;\n\n    &:hover {\n      & > input[type='radio']:not(:checked) + ${StyledIcon} {\n        color: ${hoverCheckColor};\n      }\n\n      & > input[type='checkbox'] + ${StyledIcon} {\n        border-color: ${theme.components['form-control'][':hover']['border-color']};\n      }\n    }\n\n    > ${StyledGrid} {\n      flex-grow: 1;\n    }\n\n    > input {\n      ${hideVisually}\n\n      & + ${StyledIcon} {\n        margin-inline-start: 0;\n        flex-shrink: 0;\n      }\n\n      &[type='radio'] + ${StyledIcon} {\n        color: transparent;\n      }\n\n      &[type='radio']:checked + ${StyledIcon} {\n        color: ${checkedBackground};\n      }\n\n      &[type='checkbox'] + ${StyledIcon} {\n        border: 0.0625rem solid ${theme.components['radio-check']['border-color']};\n        border-radius: min(\n          calc(${theme.base['border-radius']} * ${theme.components.checkbox['border-radius']}),\n          0.25rem\n        );\n        color: transparent;\n        background-color: ${theme.components['radio-check']['background-color']};\n      }\n\n      &[type='checkbox']:checked + ${StyledIcon} {\n        background-color: ${checkedBackground};\n        border-color: ${theme.components['radio-check'][':checked']['border-color']};\n        color: ${checkedForeground};\n      }\n    }\n  `;\n});\nStyledItemLabel.defaultProps = defaultThemeProp;\nexport const StyledMenuItem = styled.li(({ theme: { base, components }, isParentItem }) => {\n    const activeColor = tryCatch(() => mix(0.85, base.palette['primary-background'], base.palette.interactive));\n    const hoverColor = tryCatch(() => mix(0.95, base.palette['primary-background'], base.palette.interactive));\n    return css `\n      min-height: ${base['hit-area']['mouse-min']};\n\n      @media (pointer: coarse) {\n        min-height: ${base['hit-area']['finger-min']};\n      }\n\n      &:focus-within {\n        background-color: ${activeColor};\n      }\n\n      &:hover:not([aria-disabled='true']) {\n        background-color: ${hoverColor};\n      }\n\n      > button:first-child,\n      > a:first-child {\n        display: block;\n        width: 100%;\n        padding: calc(0.5 * ${base.spacing}) ${base.spacing};\n        text-align: start;\n        text-decoration: none;\n        color: inherit;\n        ${isParentItem &&\n        css `\n          padding-inline-start: calc(1.125rem + 2 * ${base.spacing});\n        `}\n      }\n\n      &[aria-disabled='true'] {\n        label,\n        ${StyledBareButton} {\n          background-color: ${components['form-control'][':disabled']['background-color']};\n          opacity: ${base['disabled-opacity']};\n        }\n      }\n    `;\n});\nStyledMenuItem.defaultProps = defaultThemeProp;\nexport const StyledAncestors = styled.div `\n  ${StyledIcon} {\n    width: 1em;\n    height: 1em;\n  }\n\n  & > ${StyledText} {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\nexport const StyledVisibilityHidden = styled.p `\n  ${hideVisually}\n`;\nexport const StyledSeparator = styled.li(({ theme }) => {\n    return css `\n    height: 0.0625rem;\n    background-color: ${theme.base.palette['border-line']};\n    margin: ${theme.base.spacing} 0;\n  `;\n});\nStyledSeparator.defaultProps = defaultThemeProp;\nexport const StyledMenuGroupList = styled.ul(({ theme }) => {\n    return css `\n    ${StyledMenuItem} button {\n      padding-inline-start: calc(1.5 * ${theme.base.spacing});\n    }\n  `;\n});\nStyledMenuGroupList.defaultProps = defaultThemeProp;\nexport const StyledMenuGroupHeader = styled.div(({ theme }) => {\n    return css `\n    min-height: ${theme.base['hit-area']['mouse-min']};\n    font-weight: ${theme.base['font-weight']['semi-bold']};\n    background-color: ${theme.base.palette['secondary-background']};\n\n    @media (pointer: coarse) {\n      min-height: ${theme.base['hit-area']['finger-min']};\n    }\n  `;\n});\nStyledMenuGroupHeader.defaultProps = defaultThemeProp;\nexport const StyledMenuListHeader = styled.legend(({ theme: { base } }) => {\n    const hoverColor = tryCatch(() => mix(0.95, base.palette['primary-background'], base.palette.interactive));\n    const activeColor = tryCatch(() => mix(0.85, base.palette['primary-background'], base.palette.interactive));\n    return css `\n    width: 100%;\n    background-color: ${base.palette['primary-background']};\n\n    &:first-child {\n      border-top-left-radius: inherit;\n      border-top-right-radius: inherit;\n    }\n\n    &:last-child {\n      border-bottom-left-radius: inherit;\n      border-bottom-right-radius: inherit;\n    }\n\n    &:focus-within {\n      box-shadow: inset ${base.shadow.focus};\n      background-color: ${activeColor};\n    }\n\n    &:hover:not([aria-disabled='true']):not([data-current='true']) {\n      background-color: ${hoverColor};\n    }\n\n    & > ${StyledBareButton}, & > button {\n      color: ${base.palette['foreground-color']};\n      width: 100%;\n      padding: calc(0.5 * ${base.spacing}) ${base.spacing};\n      text-align: start;\n      border-radius: inherit;\n\n      > ${StyledGrid} {\n        grid-column-gap: ${base.spacing};\n      }\n\n      ${StyledIcon} {\n        /* Fixes vertical align issue increasing box size beyond square */\n        display: block;\n      }\n    }\n  `;\n});\nStyledMenuListHeader.defaultProps = defaultThemeProp;\nexport const StyledMenuList = styled.ul(({ theme }) => css `\n    overflow-x: hidden;\n    overflow-y: auto;\n    list-style: none;\n    height: 100%;\n    border-radius: inherit;\n\n    ${StyledEmptyState} {\n      padding: ${theme.base.spacing};\n      height: auto;\n    }\n\n    li:not(:first-child):not([role='presentation']) > ${StyledMenuGroupHeader} {\n      margin-block-start: ${theme.base.spacing};\n    }\n  `);\nStyledMenuList.defaultProps = defaultThemeProp;\nexport const StyledMenuListContainer = styled.fieldset(({ theme }) => {\n    return css `\n    background-color: ${theme.base.palette['primary-background']};\n    max-height: ${listMaxHeight};\n    border: 0;\n    border-radius: inherit;\n  `;\n});\nStyledMenuListContainer.defaultProps = defaultThemeProp;\nexport const StyledFlyoutMenuListContainer = styled(StyledMenuListContainer) `\n  min-width: 10rem;\n`;\nexport const StyledLoadingItem = styled.li `\n  display: block;\n  position: relative;\n  height: 2.8rem;\n`;\nexport const StyledMenuListWrapper = styled.div(({ theme }) => css `\n    position: relative;\n    overflow: hidden;\n    transition: height ${theme.base.animation.speed} ${theme.base.animation.timing.ease};\n    max-height: ${listMaxHeight};\n\n    & > fieldset:first-child {\n      position: relative;\n    }\n\n    &:first-child {\n      border-top-left-radius: inherit;\n      border-top-right-radius: inherit;\n    }\n\n    &:last-child {\n      border-bottom-left-radius: inherit;\n      border-bottom-right-radius: inherit;\n    }\n  `);\nStyledMenuListWrapper.defaultProps = defaultThemeProp;\nexport const StyledMenu = styled.div(({ theme }) => {\n    const borderStyle = `0.0625rem solid ${theme.base.palette['border-line']}`;\n    const activeColor = tryCatch(() => mix(0.85, theme.base.palette['primary-background'], theme.base.palette.interactive));\n    return css `\n    &:first-child {\n      border-top-left-radius: inherit;\n      border-top-right-radius: inherit;\n    }\n\n    &:last-child {\n      border-bottom-left-radius: inherit;\n      border-bottom-right-radius: inherit;\n    }\n\n    &[data-active-scope='true'] [data-current='true'] {\n      background-color: ${activeColor};\n    }\n\n    ${StyledVisuallyHiddenText}:first-child {\n      + ${StyledMenuListWrapper}, + header {\n        border-top-left-radius: inherit;\n        border-top-right-radius: inherit;\n      }\n    }\n\n    > header,\n    > footer {\n      padding: ${theme.base.spacing};\n    }\n\n    > header {\n      border-bottom: ${borderStyle};\n    }\n\n    > footer {\n      border-top: ${borderStyle};\n    }\n  `;\n});\nStyledMenu.defaultProps = defaultThemeProp;\n//# sourceMappingURL=Menu.styles.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useCallback, forwardRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useOuterEvent, useConsolidatedRef, usePrevious } from '../../hooks';\nimport { reflow } from '../../utils';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledDrawer = styled.div(props => {\n    const { state, shadow, position, placement, transitionSpeed, size, theme } = props;\n    let dimension = 'horizontal';\n    let axis = 'X';\n    let anchor = 'top';\n    if (placement === 'top' || placement === 'bottom') {\n        dimension = 'vertical';\n        axis = 'Y';\n        anchor = 'left';\n    }\n    const translate = state === 'open' || state === 'opening' ? 0 : '100%';\n    const speed = transitionSpeed || theme.base.animation.speed;\n    return css `\n    z-index: ${theme.base['z-index'].drawer};\n    position: ${position};\n    ${placement}: 0;\n    ${anchor}: 0;\n    height: ${dimension === 'vertical' ? size : '100%'};\n    width: ${dimension === 'horizontal' ? size : '100%'};\n    transition-property: transform, box-shadow, opacity;\n    transition-duration: max(${speed}, 0.0001s);\n    transition-timing-function: ${theme.base.animation.timing.ease};\n    transform: ${state === 'open'\n        ? 'none'\n        : `translate${axis}(${placement === 'top' || placement === 'left' ? '-' : ''}${translate})`};\n\n    ${shadow &&\n        css `\n      box-shadow: ${theme.base.shadow.high};\n    `}\n  `;\n});\nStyledDrawer.defaultProps = defaultThemeProp;\nconst Drawer = forwardRef((props, ref) => {\n    const { open = false, shadow = false, position = 'absolute', children, placement = 'right', transitionSpeed, size = '100%', onAfterOpen, onAfterClose, onBeforeOpen, onBeforeClose, onOuterClick, nullWhenClosed = false, ...restProps } = props;\n    const drawerRef = useConsolidatedRef(ref);\n    const [state, setState] = useState(open ? 'open' : 'closed');\n    let prevState = usePrevious(state);\n    if (!prevState)\n        prevState = state;\n    useOuterEvent('mousedown', [drawerRef.current], useCallback(() => {\n        if (open)\n            onOuterClick?.();\n    }, [open, onOuterClick]));\n    useEffect(() => {\n        if (open && (state === 'closed' || state === 'closing')) {\n            onBeforeOpen?.();\n            reflow(drawerRef.current);\n            setState('opening');\n        }\n        else if (!open && (state === 'open' || state === 'opening')) {\n            onBeforeClose?.();\n            setState('closing');\n        }\n        else if (open && state === 'open' && prevState !== 'open') {\n            onAfterOpen?.();\n        }\n        else if (!open && state === 'closed' && prevState !== 'closed') {\n            onAfterClose?.();\n        }\n    }, [open, state, prevState, onBeforeOpen, onBeforeClose, onAfterOpen, onAfterClose]);\n    const onTransitionEnd = useCallback((e) => {\n        if (e.target !== drawerRef.current || e.propertyName !== 'transform')\n            return;\n        setState(open ? 'open' : 'closed');\n    }, [open]);\n    return state === 'closed' && !open && nullWhenClosed ? null : (_jsx(StyledDrawer, { ref: drawerRef, position: position, shadow: shadow && open, transitionSpeed: transitionSpeed, placement: placement, size: size, open: open, state: state, onTransitionEnd: onTransitionEnd, ...restProps, children: children }));\n});\nexport default Drawer;\n//# sourceMappingURL=Drawer.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { useConsolidatedRef, useUID, useFocusWithin, useDirection } from '../../hooks';\nimport Button, { StyledButton } from '../Button';\nimport Popover, { StyledPopover } from '../Popover';\nimport Menu from '../Menu';\nimport Icon, { registerIcon } from '../Icon';\nimport * as arrowMicroDownIcon from '../Icon/icons/arrow-micro-down.icon';\nimport Text from '../Text';\nimport { Count } from '../Badges';\nregisterIcon(arrowMicroDownIcon);\nconst StyledMenuButton = styled.button(({ theme: { base: { spacing } } }) => {\n    return css `\n      gap: ${spacing};\n      flex-shrink: 0;\n      white-space: nowrap;\n\n      & + ${StyledPopover} + ${StyledButton} {\n        margin-inline-start: ${spacing};\n      }\n    `;\n});\nStyledMenuButton.defaultProps = defaultThemeProp;\nconst StyledMenuButtonPopover = styled(Popover) `\n  min-width: 20ch;\n`;\nconst MenuButton = forwardRef((props, ref) => {\n    const uid = useUID();\n    const { id = uid, text, menu, popover, onClick, onKeyDown, icon, count, iconOnly = false, ...restProps } = props;\n    const [isOpen, setIsOpen] = useState(false);\n    const buttonRef = useConsolidatedRef(ref);\n    const popoverRef = useConsolidatedRef(popover?.ref);\n    const menuRef = useConsolidatedRef(menu?.ref);\n    // FIXME: Type assertion required for issue in useFocusWithin generic\n    useFocusWithin([popoverRef, buttonRef], useCallback(isFocused => {\n        if (!isFocused)\n            setIsOpen(false);\n    }, []));\n    const { rtl } = useDirection();\n    return (_jsxs(_Fragment, { children: [_jsxs(Button, { as: StyledMenuButton, ...restProps, id: id, ref: buttonRef, \"aria-expanded\": isOpen, \"aria-haspopup\": 'menu', \"aria-controls\": `${id}-popover`, \"aria-label\": text, label: iconOnly && !isOpen ? text : undefined, onClick: (e) => {\n                    // clickCount is 0 when triggered by keyboard.\n                    const clickCount = e.detail;\n                    // Close the menu if it is open and either:\n                    //   It is a *mouse* click on the button.\n                    //   Or, the menu mode is not multiselect.\n                    if (isOpen && (clickCount > 0 || menu?.mode !== 'multi-select')) {\n                        setIsOpen(false);\n                    }\n                    else {\n                        setIsOpen(true);\n                    }\n                    onClick?.(e);\n                }, onKeyDown: (e) => {\n                    if (e.key === 'Escape')\n                        setIsOpen(false);\n                    onKeyDown?.(e);\n                }, icon: iconOnly, children: [icon && _jsx(Icon, { name: icon }), !iconOnly && (_jsxs(Text, { children: [text, \" \", count !== undefined && _jsx(Count, { children: count }), text && _jsx(Icon, { name: 'arrow-micro-down' })] }))] }), _jsx(StyledMenuButtonPopover, { placement: rtl ? 'bottom-end' : 'bottom-start', id: `${id}-popover`, ...popover, hideOnTargetHidden: true, show: !!menu && isOpen, target: buttonRef.current, ref: popoverRef, children: menu && (_jsx(Menu, { ...menu, ref: menuRef, items: menu.items, onItemClick: (itemId, e) => {\n                        if (menu.mode !== 'multi-select' &&\n                            e\n                                .detail > 0) {\n                            setIsOpen(false);\n                        }\n                        menu.onItemClick?.(itemId, e);\n                    }, focusControlEl: buttonRef.current || undefined })) })] }));\n});\nexport default MenuButton;\n//# sourceMappingURL=MenuButton.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Text from '../Text';\nimport Flex from '../Flex';\nexport const StyledMetaList = styled.ul(({ wrapItems }) => {\n    return css `\n    list-style: none;\n    overflow: hidden;\n\n    ${!wrapItems &&\n        css `\n      white-space: nowrap;\n    `}\n  `;\n});\nexport const StyledMetaListItem = styled.li(({ wrapItems }) => {\n    return css `\n    min-width: 0;\n    display: inline-block;\n\n    ${wrapItems\n        ? css `\n          overflow-wrap: break-word;\n        `\n        : css `\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        `}\n\n    &[role='separator'] {\n      -webkit-user-select: none;\n      user-select: none;\n    }\n  `;\n});\nconst MetaList = forwardRef((props, ref) => {\n    const { items, wrapItems = true, ...restProps } = props;\n    return (_jsx(Flex, { as: StyledMetaList, container: { colGap: 0.5, alignItems: 'center', wrap: wrapItems ? 'wrap' : 'nowrap' }, wrapItems: wrapItems, ref: ref, ...restProps, children: items.flatMap((item, i, arr) => item\n            ? [\n                _jsx(Text, { as: StyledMetaListItem, variant: 'secondary', wrapItems: wrapItems, children: item }, `${i + 0}`)\n            ].concat(i !== arr.length - 1\n                ? [\n                    _jsx(Text, { as: StyledMetaListItem, role: 'separator', variant: 'secondary', children: \"\\u2022\" }, `${i + 0}-sep`)\n                ]\n                : [])\n            : []) }));\n});\nexport default MetaList;\n//# sourceMappingURL=MetaList.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nconst StyledDockedModals = styled.div(({ theme }) => {\n    return css `\n    position: fixed;\n    z-index: ${theme.base['z-index'].modal};\n    bottom: 0;\n    right: 0;\n    pointer-events: none;\n    width: 100%;\n  `;\n});\nStyledDockedModals.defaultProps = defaultThemeProp;\nconst DockedModals = forwardRef((props, ref) => {\n    return (_jsx(Flex, { container: { justify: 'end', alignItems: 'end', gap: 2, pad: [0, 2] }, as: StyledDockedModals, ...props, ref: ref }));\n});\nexport default DockedModals;\n//# sourceMappingURL=DockedModals.js.map","import styled, { css } from 'styled-components';\nimport { StyledFormControl } from '../FormControl';\nimport StyledInput from '../Input/Input.styles';\nimport { StyledText } from '../Text/Text';\nimport { defaultThemeProp } from '../../theme';\nimport { StyledButton } from '../Button';\nimport { StyledFlex } from '../Flex';\nexport const StyledStepperInput = styled(StyledFormControl)(props => {\n    const { theme: { base: { spacing, 'border-radius': baseBorderRadius, palette }, components: { input: { height }, 'form-control': { 'border-radius': formBorderRadius, 'foreground-color': fgColor, 'border-width': borderWidth, ':focus': { 'border-color': focusBorderColor, 'box-shadow': shadow } } } }, size } = props;\n    return css `\n    &:focus-within:not([disabled]) {\n      border-color: ${focusBorderColor};\n      box-shadow: ${shadow};\n    }\n    ${StyledFlex} {\n      overflow: auto;\n      margin-inline-start: ${spacing};\n      margin-inline-end: ${spacing};\n    }\n    ${StyledInput} {\n      color: ${fgColor};\n      width: ${size}ch;\n      min-width: 1ch;\n      outline: none;\n      border: 0;\n      padding: 0;\n      background-color: ${palette['primary-background']};\n      &:focus:not([disabled]) {\n        box-shadow: none;\n      }\n    }\n    ${StyledText} {\n      padding: 0 calc(0.5 * ${spacing});\n      white-space: nowrap;\n    }\n    > ${StyledButton} {\n      border-radius: calc(${baseBorderRadius} * ${formBorderRadius});\n      margin-inline-start: auto;\n      border: 0;\n      &:enabled {\n        color: ${fgColor};\n      }\n      min-height: calc(${height} - 2 * ${borderWidth});\n      height: calc(${height} - 2 * ${borderWidth});\n    }\n  `;\n});\nStyledStepperInput.defaultProps = defaultThemeProp;\nconst StyledNumberInput = styled(StyledFormControl)(props => {\n    const { readOnly, theme: { base: { spacing, palette }, components: { 'form-control': { 'foreground-color': fgColor, ':focus': { 'border-color': focusBorderColor, 'box-shadow': shadow }, ':read-only': { 'background-color': readOnlyBackgroundColor } } } } } = props;\n    return css `\n    padding: 0 calc(0.5 * ${spacing});\n    &:focus-within:not([disabled]) {\n      border-color: ${focusBorderColor};\n      box-shadow: ${shadow};\n    }\n    ${StyledInput} {\n      color: ${fgColor};\n      outline: none;\n      border: 0;\n      padding: 0 calc(0.5 * ${spacing});\n      background-color: ${readOnly ? readOnlyBackgroundColor : palette['primary-background']};\n      &:focus:not([disabled]) {\n        box-shadow: none;\n      }\n    }\n    ${StyledText} {\n      padding: 0 calc(0.5 * ${spacing});\n      white-space: nowrap;\n    }\n  `;\n});\nStyledNumberInput.defaultProps = defaultThemeProp;\nexport default StyledNumberInput;\n//# sourceMappingURL=NumberInput.styles.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nconst defaultProps = {\n    tabId: ''\n};\nexport const StyledTabPanel = styled.div(({ current }) => {\n    return css `\n    min-width: 0;\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n\n    ${!current &&\n        css `\n      display: none;\n    `}\n  `;\n});\nconst TabPanel = forwardRef(({ tabId, currentTabId, children, ...restProps }, ref) => {\n    return (_jsx(StyledTabPanel, { ...restProps, current: currentTabId && tabId ? currentTabId === tabId : true, role: 'tabpanel', \"aria-labelledby\": `${tabId}`, id: `${tabId}-panel`, ref: ref, children: children }));\n});\nTabPanel.defaultProps = defaultProps;\nexport default TabPanel;\n//# sourceMappingURL=TabPanel.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { transparentize } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils/utils';\nimport { StyledCount } from '../Badges/Count';\nimport BareButton from '../Button/BareButton';\nconst activeStyle = (color) => css `\n  ::after {\n    display: block;\n    background-color: ${color};\n  }\n`;\nconst getHorizontalStyles = ({ selected, theme, inverted }) => {\n    const primaryColor = inverted\n        ? theme.components.tabs.inverted.foreground\n        : theme.components.tabs.base.foreground;\n    const lightenedColor = tryCatch(() => transparentize(0.3, primaryColor)) ?? '';\n    const { spacing } = theme.base;\n    return css `\n    align-items: center;\n    display: flex;\n    flex-direction: row;\n    height: calc(4 * ${spacing});\n    padding: 0 calc(2 * ${spacing});\n    border: none;\n    text-decoration: none;\n\n    span:first-of-type {\n      color: ${selected ? primaryColor : theme.base.palette['foreground-color']};\n      display: inline-block;\n\n      ::before {\n        content: attr(data-content);\n        display: block;\n        font-weight: bold;\n        height: 0;\n        overflow: hidden;\n        visibility: hidden;\n      }\n    }\n\n    &:first-child {\n      margin-left: 0;\n    }\n\n    ::after {\n      background: ${selected ? primaryColor : lightenedColor};\n      display: ${selected ? 'block' : 'none'};\n      content: '';\n      position: absolute;\n      height: 0.125rem;\n      bottom: 0;\n      left: 0;\n      right: 0;\n    }\n\n    &:hover&:not(:disabled) {\n      ${activeStyle(lightenedColor)}\n      text-decoration: none;\n    }\n\n    &:focus,\n    &:not([disabled]):focus {\n      ${activeStyle(lightenedColor)}\n      box-shadow: inset ${theme.base.shadow.focus};\n      text-decoration: none;\n    }\n\n    ${StyledCount} {\n      margin-inline-start: calc(0.5 * ${spacing});\n    }\n  `;\n};\nconst getVerticalStyles = ({ selected, theme }) => {\n    const borderColor = theme.base.palette['border-line'];\n    const primaryColor = theme.base.palette.interactive;\n    const lightenedColor = tryCatch(() => transparentize(0.5, primaryColor)) ?? '';\n    const { spacing } = theme.base;\n    return css `\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-style: solid;\n    color: ${theme.base.palette['foreground-color']};\n    border-width: 0.0625rem 0;\n    border-color: ${borderColor};\n    height: calc(5.5 * ${spacing});\n    margin-top: -0.0625rem;\n    padding: 0 calc(2 * ${spacing});\n    text-decoration: none;\n\n    &:first-child {\n      border-top: 0.0625rem solid ${borderColor};\n    }\n\n    ::after {\n      content: '';\n      position: absolute;\n      display: ${selected ? 'block' : 'none'};\n      top: 0;\n      bottom: 0;\n      right: 0;\n      width: 0.25rem;\n      background: ${primaryColor};\n    }\n\n    &:hover&:not(:disabled) {\n      ${activeStyle(lightenedColor)}\n      text-decoration: none;\n    }\n\n    &:focus,\n    &:not([disabled]):focus {\n      ${activeStyle(primaryColor)}\n      box-shadow: inset 0 0 0 0.0625rem ${primaryColor};\n      text-decoration: none;\n    }\n  `;\n};\nexport const StyledTab = styled(BareButton) `\n  position: relative;\n  background: none;\n  cursor: pointer;\n\n  ${props => props.tabType === 'horizontal' ? getHorizontalStyles(props) : getVerticalStyles(props)}\n  ${props => props.selected &&\n    css `\n      font-weight: bold;\n    `}\n  white-space: nowrap;\n\n  & + & {\n    margin-inline-start: 0;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: ${props => props.theme.base['disabled-opacity']};\n  }\n`;\nStyledTab.defaultProps = defaultThemeProp;\nconst Tab = forwardRef(({ selected, inverted, content, count, type, disabled, ...restProps }, ref) => {\n    return (_jsxs(StyledTab, { ref: ref, selected: selected, inverted: inverted, tabType: type, disabled: disabled, type: 'button', ...restProps, children: [_jsx(\"span\", { \"data-content\": content, children: content }), count] }));\n});\nexport default Tab;\n//# sourceMappingURL=Tab.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport Link from '../Link';\nimport Count from '../Badges/Count';\nimport Tab from './Tab';\nexport const StyledTabs = styled.div(({ type, theme }) => css `\n    position: relative;\n    overflow: ${type === 'horizontal' ? 'auto' : 'visible'};\n    ${type === 'horizontal' &&\n    css `\n      border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};\n      height: max-content;\n    `}\n  `);\nStyledTabs.defaultProps = defaultThemeProp;\n/**\n * The tabs component will take a list of tab data objects and render out a list of tabs in either vertical or horizontal direction.\n * The tabs component handles which tab is active but will give you a callback function that allows you to make changes when a new tab is activated\n */\nconst Tabs = forwardRef(({ tabs = [], type = 'horizontal', currentTabId, onTabClick, inverted = false, ...restProps }, ref) => {\n    // Used to keep a reference for every tab in order to focus them with key presses\n    const tabRefs = useRef([]);\n    // Handles arrow keypresses for changing the focus\n    const changeTabFocus = (event, index) => {\n        if (tabRefs.current?.length) {\n            const { key } = event;\n            if (key === 'ArrowRight' || key === 'ArrowDown') {\n                const nextIndex = index + 1 < tabs.length ? index + 1 : 0;\n                const nextTab = tabRefs.current[nextIndex];\n                if (!nextTab?.disabled) {\n                    nextTab?.focus();\n                }\n                else {\n                    changeTabFocus(event, nextIndex);\n                }\n            }\n            else if (key === 'ArrowLeft' || key === 'ArrowUp') {\n                const prevIndex = index === 0 ? tabs.length - 1 : index - 1;\n                const prevTab = tabRefs.current[prevIndex];\n                if (!prevTab?.disabled) {\n                    prevTab?.focus();\n                }\n                else {\n                    changeTabFocus(event, prevIndex);\n                }\n            }\n        }\n    };\n    let badgeVariant;\n    if (inverted) {\n        badgeVariant = 'inverted';\n    }\n    else {\n        badgeVariant = 'default';\n    }\n    return (_jsx(Flex, { ...restProps, container: {\n            direction: type !== 'horizontal' ? 'column' : undefined\n        }, item: { shrink: 0 }, as: StyledTabs, ref: ref, type: type, role: 'tablist', \"aria-orientation\": type, children: tabs.map((tab, i) => {\n            const { href, name, count, id, disabled } = tab;\n            const selected = id === currentTabId;\n            return (_jsx(Tab, { id: id, \"aria-selected\": selected, \"aria-controls\": `${id}-panel`, content: name, count: typeof count === 'number' && _jsx(Count, { variant: badgeVariant, children: count }), href: href, inverted: inverted || false, selected: selected, onClick: (event) => {\n                    onTabClick?.(id, event);\n                }, role: 'tab', ref: (el) => {\n                    tabRefs.current[i] = el;\n                }, onKeyDown: (e) => {\n                    if (['ArrowRight', 'ArrowDown', 'ArrowLeft', 'ArrowUp'].includes(e.key)) {\n                        e.preventDefault();\n                    }\n                }, onKeyUp: (e) => {\n                    changeTabFocus(e, i);\n                }, as: href ? Link : undefined, tabIndex: selected ? undefined : -1, \"aria-label\": name, type: type, disabled: disabled }, id));\n        }) }));\n});\nexport default Tabs;\n//# sourceMappingURL=Tabs.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, Fragment, useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rgba } from 'polished';\nimport { useElement, useConsolidatedRef, useDirection } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport { debounce, tryCatch } from '../../utils';\nimport Button, { StyledButton } from '../Button';\nimport Flex from '../Flex';\nimport Link, { StyledLink } from '../Link';\nimport Icon, { StyledIcon, registerIcon } from '../Icon';\nimport * as caretLeftIcon from '../Icon/icons/caret-left.icon';\nimport * as caretRightIcon from '../Icon/icons/caret-right.icon';\nimport MenuButton from '../MenuButton';\nimport Text, { StyledText } from '../Text';\nregisterIcon(caretLeftIcon, caretRightIcon);\nconst StyledSeparator = styled(Icon)(({ theme }) => {\n    const color = tryCatch(() => rgba(theme.base.palette['foreground-color'], theme.base.transparency['transparent-2']));\n    return css `\n    color: ${color};\n  `;\n});\nexport const StyledBreadcrumbs = styled.div(({ theme, oneItemRemaining }) => css `\n    white-space: nowrap;\n    overflow: visible;\n    visibility: hidden;\n\n    ${StyledIcon} {\n      width: 1em;\n      height: 1em;\n      flex-shrink: 0;\n    }\n\n    ${StyledLink},\n    ${StyledButton},\n    ${StyledText} {\n      max-width: ${theme.base['content-width'].md};\n    }\n\n    ${oneItemRemaining &&\n    css `\n      & > :last-child {\n        text-overflow: ellipsis;\n        overflow: hidden;\n      }\n    `}\n  `);\nStyledBreadcrumbs.defaultProps = defaultThemeProp;\nconst getEllipsisStyles = ({ theme }) => {\n    return css `\n    min-width: ${theme.base['content-width'].xs};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `;\n};\nconst StyledEllipsizedLink = styled(Link)(getEllipsisStyles);\nStyledEllipsizedLink.defaultProps = defaultThemeProp;\nconst StyledEllipsizedButton = styled(Button)(getEllipsisStyles);\nStyledEllipsizedButton.defaultProps = defaultThemeProp;\nconst StyledEllipsizedText = styled(Text)(getEllipsisStyles);\nStyledEllipsizedText.defaultProps = defaultThemeProp;\nconst Breadcrumbs = forwardRef(({ path, ...restProps }, ref) => {\n    const [breadcrumbsEl, setBreadcrumbsEl] = useElement();\n    const [numMenuItems, setNumMenuItems] = useState(0);\n    const minInlineWidth = useRef(0);\n    const breadcrumbRef = useConsolidatedRef(setBreadcrumbsEl, ref);\n    const debouncedResize = debounce((entries) => {\n        if (entries[0].contentRect.width > minInlineWidth.current) {\n            setNumMenuItems(curr => {\n                if (curr === 0)\n                    return curr;\n                return curr - 1;\n            });\n        }\n    }, 100);\n    const resizeObserver = new ResizeObserver(debouncedResize);\n    const intersectionObserver = new IntersectionObserver(entries => {\n        if (entries[0].intersectionRatio < 1 && numMenuItems < path.length - 1) {\n            if (entries[0].rootBounds)\n                minInlineWidth.current = entries[0].rootBounds.width + 1;\n            setNumMenuItems(curr => {\n                if (curr === path.length - 1)\n                    return curr;\n                return curr + 1;\n            });\n        }\n        else if (breadcrumbsEl)\n            breadcrumbsEl.style.visibility = 'visible';\n    }, { root: breadcrumbsEl, threshold: 1 });\n    useEffect(() => {\n        if (breadcrumbsEl && breadcrumbsEl.lastChild) {\n            intersectionObserver.observe(breadcrumbsEl.lastChild);\n            resizeObserver.observe(breadcrumbsEl);\n            return () => {\n                intersectionObserver.disconnect();\n                resizeObserver.disconnect();\n            };\n        }\n    }, [breadcrumbsEl, numMenuItems]);\n    const { end } = useDirection();\n    return (_jsxs(Flex, { ...restProps, container: { gap: 0.5, alignItems: 'center' }, as: StyledBreadcrumbs, oneItemRemaining: numMenuItems === path.length - 1, ref: breadcrumbRef, children: [numMenuItems > 0 && (_jsxs(_Fragment, { children: [_jsx(MenuButton, { text: 'Links', iconOnly: true, variant: 'link', icon: 'folder-hierarchy-solid', menu: { items: path.slice(0, numMenuItems).reverse() } }), _jsx(StyledSeparator, { name: `caret-${end}` })] })), path.slice(numMenuItems).map((crumb, index) => {\n                const { id, primary, visual, href, onClick, ...restCrumbProps } = crumb;\n                let Comp;\n                if (href)\n                    Comp = (_jsxs(Link, { href: href, as: primary.length > 60 ? StyledEllipsizedLink : undefined, onClick: (e) => {\n                            onClick?.(id, e);\n                        }, ...restCrumbProps, children: [visual, \" \", primary] }, id));\n                else if (onClick)\n                    Comp = (_jsxs(Button, { variant: 'link', as: primary.length > 60 ? StyledEllipsizedButton : undefined, onClick: (e) => {\n                            onClick(id, e);\n                        }, ...restCrumbProps, children: [visual, \" \", primary] }, id));\n                else\n                    Comp = (_jsxs(Text, { as: primary.length > 60 ? StyledEllipsizedText : undefined, ...restCrumbProps, children: [visual, \" \", primary] }, id));\n                if (index === path.slice(numMenuItems).length - 1)\n                    return Comp;\n                return (_jsxs(Fragment, { children: [Comp, _jsx(StyledSeparator, { name: `caret-${end}` })] }, id));\n            })] }));\n});\nexport default Breadcrumbs;\n//# sourceMappingURL=Breadcrumbs.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { getContrast, readableColor } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport Icon, { registerIcon } from '../Icon';\nimport * as timesIcon from '../Icon/icons/times.icon';\nimport * as checkIcon from '../Icon/icons/check.icon';\nimport * as bulbSolidIcon from '../Icon/icons/bulb-solid.icon';\nimport * as warnSolidIcon from '../Icon/icons/warn-solid.icon';\nimport * as flagWaveSolidIcon from '../Icon/icons/flag-wave-solid.icon';\nimport Button from '../Button';\nimport { tryCatch } from '../../utils';\nimport { useI18n } from '../../hooks';\nimport Flex from '../Flex';\nimport Text from '../Text';\nregisterIcon(timesIcon, checkIcon, bulbSolidIcon, warnSolidIcon, flagWaveSolidIcon);\nexport const StyledBannerMessages = styled.ul(({ theme, inline }) => {\n    return css `\n    list-style-position: inside;\n    ${inline &&\n        css `\n      display: inline-block;\n      margin-inline-end: ${theme.base.spacing};\n    `}\n  `;\n});\nStyledBannerMessages.defaultProps = defaultThemeProp;\nexport const StyledBannerContent = styled.div(({ theme, hasDismiss }) => {\n    return css `\n    position: relative;\n    padding: calc(1.5 * ${theme.base.spacing});\n    border: 0.0625rem solid ${theme.base.palette['border-line']};\n    border-inline-start: none;\n    border-start-end-radius: ${theme.components.card['border-radius']};\n    border-end-end-radius: ${theme.components.card['border-radius']};\n\n    ${hasDismiss &&\n        css `\n      border-inline-end: none;\n      padding-inline-end: calc(0.75 * ${theme.base.spacing});\n      border-radius: 0;\n    `}\n  `;\n});\nStyledBannerContent.defaultProps = defaultThemeProp;\nexport const StyledBannerMessage = styled.li(({ inline, theme }) => {\n    return css `\n    color: ${theme.base.palette['foreground-color']};\n    word-break: break-word;\n\n    ${inline &&\n        css `\n      display: inline-block;\n      margin-inline-end: ${theme.base.spacing};\n    `}\n  `;\n});\nStyledBannerMessage.defaultProps = defaultThemeProp;\nexport const StyledBannerDismissColumn = styled.div(({ theme }) => {\n    return css `\n    border-start-end-radius: ${theme.components.card['border-radius']};\n    border-end-end-radius: ${theme.components.card['border-radius']};\n    border: 0.0625rem solid ${theme.base.palette['border-line']};\n    border-inline-start: none;\n  `;\n});\nStyledBannerDismissColumn.defaultProps = defaultThemeProp;\nexport const StyledBannerDismissButton = styled(Button) ``;\nexport const StyledBannerStatus = styled.div(({ variant, theme }) => {\n    const { background: bg } = theme.components.banner[variant];\n    const color = tryCatch(() => getContrast(bg, theme.base.palette['primary-background']) >= 3\n        ? theme.base.palette['primary-background']\n        : readableColor(bg));\n    return css `\n    background-color: ${bg};\n    width: 3.125rem;\n    color: ${color};\n    border-start-start-radius: ${theme.components.card['border-radius']};\n    border-end-start-radius: ${theme.components.card['border-radius']};\n    font-size: 1.25rem;\n  `;\n});\nStyledBannerStatus.defaultProps = defaultThemeProp;\nexport const StyledBanner = styled.div(({ theme }) => {\n    return css `\n    background: ${theme.components.card.background};\n    border-radius: ${theme.components.card['border-radius']};\n  `;\n});\nStyledBanner.defaultProps = defaultThemeProp;\nconst Banner = forwardRef(({ variant, heading, headingTag = 'h2', messages, onDismiss, action, id, ...restProps }, ref) => {\n    const inline = messages.length === 1;\n    const singleLine = inline && !heading;\n    const hasDismiss = !!onDismiss;\n    let bannerIcon = 'warn-solid';\n    let role = 'alert';\n    let ariaLive = 'assertive';\n    if (variant === 'info') {\n        bannerIcon = 'bulb-solid';\n        ariaLive = 'polite';\n        role = undefined;\n    }\n    else if (variant === 'success') {\n        bannerIcon = 'check';\n        ariaLive = 'polite';\n        role = undefined;\n    }\n    else if (variant === 'warning') {\n        bannerIcon = 'flag-wave-solid';\n    }\n    const t = useI18n();\n    return (_jsxs(Flex, { ...restProps, container: true, as: StyledBanner, role: role, \"aria-live\": ariaLive, id: id, ref: ref, children: [_jsx(Flex, { container: { justify: 'center', alignItems: 'center' }, item: { shrink: 0 }, as: StyledBannerStatus, variant: variant, children: _jsx(Icon, { name: bannerIcon }) }), _jsxs(Flex, { container: singleLine ? { alignItems: 'center' } : { direction: 'column', gap: 1 }, item: { grow: 1 }, as: StyledBannerContent, hasDismiss: hasDismiss, children: [heading && (_jsx(Text, { variant: 'h4', as: headingTag, children: heading })), _jsx(StyledBannerMessages, { inline: inline, children: messages.map((msg, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        _jsx(StyledBannerMessage, { inline: inline, children: msg }, `${msg}+${index}`))) }), action] }), onDismiss && (_jsx(Flex, { container: {\n                    direction: 'column',\n                    justify: singleLine ? 'center' : undefined,\n                    pad: [singleLine ? 0.5 : 1, 0.5, 0.5, 0]\n                }, as: StyledBannerDismissColumn, children: _jsx(StyledBannerDismissButton, { variant: 'simple', icon: true, onClick: () => onDismiss(id), \"aria-label\": t('banner_dismiss_button_label_a11y'), children: _jsx(Icon, { name: 'times' }) }) }))] }));\n});\nexport default Banner;\n//# sourceMappingURL=Banner.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useRef, useContext, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { readableColor } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport Grid from '../Grid';\nimport Text from '../Text';\nimport SummaryItem from '../SummaryItem';\nimport Icon from '../Icon';\nimport { tryCatch } from '../../utils';\nimport Tabs, { TabPanel } from '../Tabs';\nimport Flex from '../Flex';\nimport { useBreakpoint, useElement, useScrollStick, useConsolidatedRef } from '../../hooks';\nimport Breadcrumbs, { StyledBreadcrumbs } from '../Breadcrumbs';\nimport AppShellContext from '../AppShell/AppShellContext';\nimport { StyledBanner } from '../Banner/Banner';\nimport { StyledTabs } from '../Tabs/Tabs';\nexport const StyledPageIcon = styled(Flex)(({ theme }) => {\n    const bgColor = theme.base.palette['brand-primary'];\n    const color = tryCatch(() => readableColor(bgColor));\n    return css `\n    height: calc(4 * ${theme.base.spacing});\n    width: calc(4 * ${theme.base.spacing});\n    background: ${bgColor};\n    color: ${color};\n    border-radius: calc(0.5 * ${theme.base['border-radius']});\n  `;\n});\nStyledPageIcon.defaultProps = defaultThemeProp;\nexport const StyledPageHeader = styled.header(({ theme }) => {\n    return css `\n    ${StyledBreadcrumbs} {\n      margin-block-end: ${theme.base.spacing};\n    }\n\n    ${StyledBanner},\n    ${StyledTabs} {\n      margin-block-start: calc(2 * ${theme.base.spacing});\n    }\n  `;\n});\nStyledPageHeader.defaultProps = defaultThemeProp;\nexport const StyledRegion = styled.div ``;\nStyledRegion.defaultProps = defaultThemeProp;\nexport const StyledRegions = styled.div(({ pad, theme }) => {\n    const spacing = theme.base.spacing;\n    return css `\n    flex-grow: 1;\n    max-width: 100%;\n\n    ${pad &&\n        css `\n      padding: 0 calc(2 * ${spacing}) calc(2 * ${spacing});\n    `}\n  `;\n});\nStyledRegions.defaultProps = defaultThemeProp;\nexport const StyledContent = styled.div ``;\nStyledContent.defaultProps = defaultThemeProp;\nexport const StyledScrollableTabPanel = styled(TabPanel)(() => {\n    return css `\n    height: 100%;\n    overflow: auto;\n  `;\n});\nStyledScrollableTabPanel.defaultProps = defaultThemeProp;\nexport const StyledPageLayout = styled.div(({ theme, scrollContent, minContentHeight }) => {\n    const emptyContentHeight = minContentHeight ? `${minContentHeight}px` : undefined;\n    return css `\n    --content-height-in-view: ${emptyContentHeight};\n    position: relative;\n    min-height: inherit;\n    background-color: ${theme.base.palette['app-background']};\n\n    ${scrollContent &&\n        css `\n      ${StyledContent} {\n        position: relative;\n      }\n\n      ${StyledRegions} {\n        position: absolute;\n        height: 100%;\n        width: 100%;\n        overflow: auto;\n      }\n    `}\n  `;\n});\nStyledPageLayout.defaultProps = defaultThemeProp;\nconst PageLayout = forwardRef(({ regions, cols = `repeat(${regions.length}, minmax(0, 1fr))`, title, icon, path, actions, banners, tabs, as, header, regionsRef, scrollContent = false, ...restProps }, ref) => {\n    const [contentEl, setContentEl] = useElement();\n    const isMediumOrAbove = useBreakpoint('md');\n    const hasSideBySideColumns = regions.length > 1 && isMediumOrAbove;\n    const { headerEl } = useContext(AppShellContext);\n    const consolidatedRegionRef = useConsolidatedRef(regionsRef);\n    const scrollStickOptions = useRef({\n        elements: []\n    });\n    scrollStickOptions.current.scrollContainer = scrollContent && contentEl ? contentEl : undefined;\n    scrollStickOptions.current.offset = (headerEl?.offsetHeight ?? 0) + 16;\n    useScrollStick(hasSideBySideColumns ? scrollStickOptions.current : undefined);\n    const renderSingleRegion = regions?.length === 1;\n    const [minContentHeight, setMinContentHeight] = useState();\n    useEffect(() => {\n        if (consolidatedRegionRef && consolidatedRegionRef.current) {\n            const refElement = consolidatedRegionRef.current;\n            const regionsPaddingBottomPixels = Number.parseInt(window.getComputedStyle(refElement).getPropertyValue('padding-bottom'), 10);\n            const resizeObserver = new ResizeObserver(() => {\n                const headerOffset = headerEl?.offsetHeight ?? 0;\n                const emptyHeight = document.documentElement.offsetHeight -\n                    (headerOffset + refElement?.offsetTop) -\n                    regionsPaddingBottomPixels;\n                setMinContentHeight(emptyHeight);\n            });\n            resizeObserver.observe(refElement);\n            return () => {\n                resizeObserver.disconnect();\n            };\n        }\n    }, [consolidatedRegionRef, headerEl]);\n    return (_jsxs(Flex, { ...restProps, container: {\n            direction: 'column',\n            alignItems: 'stretch',\n            gap: 2\n        }, scrollContent: scrollContent, as: StyledPageLayout, forwardedAs: as, ref: ref, minContentHeight: minContentHeight, children: [_jsxs(Flex, { container: { direction: 'column', pad: [2, 2, 0] }, item: { grow: 0, shrink: 0 }, as: StyledPageHeader, children: [path && path.length > 0 && _jsx(Breadcrumbs, { path: path }), header || (_jsx(SummaryItem, { visual: icon && (_jsx(StyledPageIcon, { container: { alignItems: 'center', justify: 'center' }, children: _jsx(Icon, { name: icon }) })), primary: _jsx(Text, { variant: 'h1', children: title }), actions: actions })), banners, tabs] }), _jsxs(Flex, { container: true, item: { grow: 1 }, as: StyledContent, ref: scrollContent ? setContentEl : undefined, children: [renderSingleRegion && (_jsx(StyledRegions, { ref: consolidatedRegionRef, pad: true, children: _jsx(Flex, { container: {\n                                direction: 'column',\n                                gap: 2\n                            }, as: StyledRegion, ref: (el) => {\n                                if (el) {\n                                    scrollStickOptions.current.elements[0] = el;\n                                }\n                            }, children: regions[0] }) })), !renderSingleRegion && (_jsx(Grid, { container: {\n                            cols: 'minmax(0, 1fr)',\n                            alignItems: 'start',\n                            gap: 2,\n                            pad: [0, 2, 2]\n                        }, md: { container: { cols } }, as: StyledRegions, ref: consolidatedRegionRef, children: regions.map((colItems, i) => {\n                            return (_jsx(Flex, { container: {\n                                    direction: 'column',\n                                    gap: 2\n                                }, as: StyledRegion, ref: (el) => {\n                                    if (el) {\n                                        scrollStickOptions.current.elements[i] = el;\n                                    }\n                                }, children: colItems }, i));\n                        }) }))] })] }));\n});\nexport const TabbedPage = forwardRef(({ tabs, ...restProps }, ref) => {\n    const [tabId, setTabId] = useState(tabs.defaultTabId || tabs.tabs[0]?.id);\n    const tabPanels = tabs.tabs.map(tab => {\n        return (_jsx(Flex, { container: { direction: 'column', gap: 2 }, as: TabPanel, tabId: tab.id, currentTabId: tabId, children: tab.content }, tab.id));\n    });\n    return (_jsx(PageLayout, { ...restProps, tabs: _jsx(Tabs, { ...tabs, onTabClick: (id, e) => {\n                setTabId(id);\n                tabs.onTabClick?.(id, e);\n            }, currentTabId: tabId }), regions: [_jsx(_Fragment, { children: tabPanels })], ref: ref }));\n});\nexport const OneColumnPage = forwardRef(({ a, ...restProps }, ref) => {\n    return _jsx(PageLayout, { regions: [a], ref: ref, ...restProps, cols: 'minmax(0, 1fr)' });\n});\nexport const TwoColumnPage = forwardRef(({ a, b, ...restProps }, ref) => {\n    return (_jsx(PageLayout, { regions: [a, b], ref: ref, ...restProps, cols: 'repeat(2, minmax(0, 1fr))' }));\n});\nexport const ThreeColumnPage = forwardRef(({ a, b, c, ...restProps }, ref) => {\n    return (_jsx(PageLayout, { regions: [a, b, c], ref: ref, ...restProps, cols: 'repeat(3, minmax(0, 1fr))' }));\n});\nexport const FourColumnPage = forwardRef(({ a, b, c, d, ...restProps }, ref) => {\n    return (_jsx(PageLayout, { regions: [a, b, c, d], ref: ref, ...restProps, cols: 'repeat(4, minmax(0, 1fr))' }));\n});\nexport const WideNarrowPage = forwardRef(({ a, b, ...restProps }, ref) => {\n    return (_jsx(PageLayout, { regions: [a, b], ref: ref, ...restProps, cols: 'minmax(0, 2fr) minmax(0, 1fr)' }));\n});\nexport const NarrowWidePage = forwardRef(({ a, b, ...restProps }, ref) => {\n    return (_jsx(PageLayout, { regions: [a, b], ref: ref, ...restProps, cols: 'minmax(0, 1fr) minmax(0, 2fr)' }));\n});\nexport const WideWideNarrowPage = forwardRef(({ a, b, c, ...restProps }, ref) => {\n    return (_jsx(PageLayout, { regions: [a, b, c], ref: ref, ...restProps, cols: 'repeat(2, minmax(0, 2fr)) minmax(0, 1fr)' }));\n});\nexport const NarrowWideWidePage = forwardRef(({ a, b, c, ...restProps }, ref) => {\n    return (_jsx(PageLayout, { regions: [a, b, c], ref: ref, ...restProps, cols: 'minmax(0, 1fr) repeat(2, minmax(0, 2fr))' }));\n});\nexport const NarrowWideNarrowPage = forwardRef(({ a, b, c, ...restProps }, ref) => {\n    return (_jsx(PageLayout, { regions: [a, b, c], ref: ref, ...restProps, cols: 'minmax(0, 1fr) minmax(0, 3fr) minmax(0, 1fr)' }));\n});\n//# sourceMappingURL=PageTemplates.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled from 'styled-components';\nconst StyledParagraphDisplay = styled.p `\n  white-space: break-spaces;\n`;\nconst ParagraphDisplay = forwardRef(({ value, ...restProps }, ref) => {\n    return (_jsx(StyledParagraphDisplay, { ref: ref, ...restProps, children: value !== undefined ? value : _jsx(\"span\", { \"aria-hidden\": 'true', children: \"\\u2013\\u2013\" }) }));\n});\nexport default ParagraphDisplay;\n//# sourceMappingURL=ParagraphDisplay.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useConsolidatedRef, useFocusWithin, useI18n, useInputFormatter } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport FormField from '../FormField';\nimport { StyledFormControl } from '../FormControl';\nimport StyledInput from '../Input/Input.styles';\nimport Select, { Option } from '../Select';\nimport Input from '../Input';\nimport { StyledSelect } from '../Select/Select';\nimport Flex from '../Flex';\nimport callingCodes from './callingCodes';\nimport { convertToCallbackParameter, formatPhoneNumber, getPhoneNumberParts } from './utils';\nconst StyledPhoneInput = styled.div(() => {\n    return css `\n    border: 0;\n    > ${StyledSelect} {\n      max-width: max-content;\n      border-inline-end: none;\n      border-start-end-radius: 0;\n      border-end-end-radius: 0;\n    }\n\n    > ${StyledSelect} + ${StyledInput} {\n      border-start-start-radius: 0;\n      border-end-start-radius: 0;\n    }\n  `;\n});\nStyledPhoneInput.defaultProps = defaultThemeProp;\nconst PhoneInput = forwardRef((props, ref) => {\n    const { value, id, label, labelHidden, info, status, required, readOnly, disabled, showCountryCode = false, callingCodesList = callingCodes, onChange, onBlur, onFocus, onResolveSuggestion, additionalInfo, ...restProps } = props;\n    const t = useI18n();\n    const [countryCode = callingCodesList[0], subscriberNumber = ''] = value\n        ? getPhoneNumberParts(value, callingCodesList)\n        : [];\n    const onFocusChange = (focused) => {\n        const callbackParam = convertToCallbackParameter(countryCode, subscriberNumber);\n        if (focused)\n            onFocus?.(callbackParam);\n        else\n            onBlur?.(callbackParam);\n    };\n    const onInputChange = (e) => {\n        onChange?.(convertToCallbackParameter(countryCode, e.target.value));\n    };\n    const onSelectChange = (e) => {\n        onChange?.(convertToCallbackParameter(e.target.value, subscriberNumber));\n    };\n    const inputRef = useConsolidatedRef(ref);\n    const containerRef = useRef(null);\n    useFocusWithin([containerRef], onFocusChange);\n    const formatter = useCallback(number => {\n        return formatPhoneNumber(number.replace(/\\D+/g, ''), countryCode);\n    }, [countryCode]);\n    const formatted = useInputFormatter(inputRef, subscriberNumber, formatter);\n    const codesOptions = (_jsx(_Fragment, { children: callingCodesList.map(code => (_jsx(Option, { value: code, children: code }, code))) }));\n    const Comp = (_jsxs(StyledPhoneInput, { as: StyledFormControl, forwardedAs: Flex, container: { alignItems: 'center', wrap: 'nowrap' }, ref: containerRef, status: status, readOnly: readOnly, disabled: disabled, children: [showCountryCode && (_jsx(Select, { value: countryCode, \"aria-label\": t('select_country_code'), onChange: onSelectChange, required: required, status: status, readOnly: readOnly, disabled: disabled, autoComplete: 'tel-country-code', hasSuggestion: status === 'pending' && !!onResolveSuggestion, children: codesOptions })), _jsx(Input, { ...restProps, inputMode: 'tel', ref: inputRef, value: formatted, \"aria-label\": t('enter_a_number'), onChange: onInputChange, required: required, status: status, readOnly: readOnly, disabled: disabled, autoComplete: 'tel-national', hasSuggestion: status === 'pending' && !!onResolveSuggestion })] }));\n    return label ? (_jsx(FormField, { as: 'fieldset', labelAs: 'legend', ...{\n            additionalInfo,\n            label,\n            labelHidden,\n            id,\n            info,\n            status,\n            required,\n            disabled,\n            onResolveSuggestion\n        }, children: Comp })) : (Comp);\n});\nexport default PhoneInput;\n//# sourceMappingURL=PhoneInput.js.map","import styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledPopoverArrow = styled.div `\n  background-color: inherit;\n\n  ::before {\n    content: '';\n    display: block;\n    position: absolute;\n    inset: -0.25rem;\n    background-color: inherit;\n    transform: rotate(45deg);\n  }\n`;\nStyledPopoverArrow.defaultProps = defaultThemeProp;\nexport const StyledPopoverContent = styled.div `\n  max-width: inherit;\n  max-height: inherit;\n  border-radius: inherit;\n  overflow: auto;\n`;\nexport const StyledPopover = styled.div(({ theme: { base: { 'border-radius': borderRadius, 'z-index': { popover: popoverZIndex, backdrop: backdropZIndex }, shadow: { low } }, components: { card: { background }, 'form-control': { 'border-radius': formControlBorderRadius } } }, portal, offset }) => {\n    return css `\n      /*\n        Margin should never be used with Popper.\n        https://popper.js.org/docs/v2/migration-guide/#4-remove-all-css-margins\n      */\n      margin: 0 !important;\n      z-index: ${portal ? backdropZIndex - 1 : popoverZIndex};\n      background-color: ${background};\n      border-radius: calc(${formControlBorderRadius} * ${borderRadius});\n      box-shadow: ${low};\n\n      &[data-popper-reference-hidden='true'] {\n        visibility: hidden;\n        pointer-events: none;\n      }\n\n      &[data-popper-placement^='top'] {\n        > ${StyledPopoverArrow} {\n          top: calc(100%);\n\n          ::before {\n            border-bottom-right-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          height: ${offset}px;\n          bottom: -${offset}px;\n          left: 0;\n          right: 0;\n        }\n      }\n\n      &[data-popper-placement^='bottom'] {\n        > ${StyledPopoverArrow} {\n          bottom: calc(100%);\n\n          ::before {\n            border-top-left-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          height: ${offset}px;\n          top: -${offset}px;\n          left: 0;\n          right: 0;\n        }\n      }\n\n      &[data-popper-placement^='right'] {\n        > ${StyledPopoverArrow} {\n          right: calc(100%);\n\n          ::before {\n            border-bottom-left-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          width: ${offset}px;\n          left: -${offset}px;\n          top: 0;\n          bottom: 0;\n        }\n      }\n\n      &[data-popper-placement^='left'] {\n        > ${StyledPopoverArrow} {\n          left: calc(100%);\n\n          ::before {\n            border-top-right-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          width: ${offset}px;\n          right: -${offset}px;\n          top: 0;\n          bottom: 0;\n        }\n      }\n    `;\n});\nStyledPopover.defaultProps = defaultThemeProp;\n//# sourceMappingURL=Popover.styles.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledProgressBar = styled.div(({ theme, placement, determinate }) => {\n    return css `\n      height: 0.375rem;\n      background-color: ${theme.base.colors.gray['extra-light']};\n      border-radius: ${theme.base['border-radius']};\n      min-width: 2rem;\n      overflow: hidden;\n\n      @keyframes LoadingBar {\n        0% {\n          transform: translateX(-100%);\n        }\n\n        100% {\n          transform: translateX(200%);\n        }\n      }\n\n      ::before {\n        content: '';\n        display: block;\n        height: 100%;\n        width: 100%;\n        left: 0;\n        border-radius: ${theme.base['border-radius']};\n        background-color: ${theme.components.progress['progress-color']};\n        ${determinate &&\n        css `\n          transform: translateX(var(--progress, 0));\n          transform-origin: 0 50%;\n          transition: transform calc(0.5 * ${theme.base.animation.speed})\n            ${theme.base.animation.timing.ease};\n        `}\n\n        ${!determinate &&\n        css `\n          animation: LoadingBar calc(8 * ${theme.base.animation.speed}) linear infinite;\n          width: 50%;\n        `}\n      }\n\n      ${placement === 'inline'\n        ? css `\n            display: inline-block;\n            position: relative;\n          `\n        : css `\n            width: 50%;\n          `}\n    `;\n});\nStyledProgressBar.defaultProps = defaultThemeProp;\nconst Bar = forwardRef(({ value, minValue = 0, maxValue = 100, message, placement, style, ...restProps }, ref) => {\n    let percentage = value;\n    if (typeof value === 'number') {\n        if (value > maxValue || minValue > maxValue)\n            percentage = 0;\n        else if (value < minValue)\n            percentage = 100;\n        else\n            percentage = (1 - (value - minValue) / (maxValue - minValue)) * -100;\n    }\n    return (_jsx(StyledProgressBar, { ref: ref, role: 'progressbar', \"aria-valuemin\": minValue, \"aria-valuemax\": maxValue, \"aria-valuenow\": value, placement: placement, determinate: typeof value === 'number', style: { ...style, '--progress': percentage ? `${percentage}%` : '' }, ...restProps }));\n});\nexport default Bar;\n//# sourceMappingURL=Bar.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledProgressEllipsis = styled.div(({ theme, placement }) => {\n    return css `\n      line-height: 1;\n      display: ${placement === 'inline' ? 'inline-flex' : 'block'};\n\n      @keyframes LoadingEllipsis {\n        0% {\n          transform: scale(0);\n          opacity: 0;\n        }\n\n        50% {\n          transform: scale(1);\n          opacity: 1;\n        }\n\n        100% {\n          transform: scale(0);\n          opacity: 0;\n        }\n      }\n\n      > span {\n        display: flex;\n        mix-blend-mode: multiply;\n\n        ${placement === 'inline' &&\n        css `\n          display: inline-flex;\n          margin-left: 0.1875rem;\n        `}\n      }\n\n      > span span {\n        margin: 0 0.3125rem;\n        background: ${theme.components.progress['progress-color']};\n        border-radius: 50%;\n        animation: LoadingEllipsis calc(4 * ${theme.base.animation.speed}) infinite;\n\n        ${placement === 'global' &&\n        css `\n          width: 1.25rem;\n          height: 1.25rem;\n        `}\n\n        ${placement === 'local' &&\n        css `\n          width: 0.625rem;\n          height: 0.625rem;\n        `}\n\n      ${placement === 'inline' &&\n        css `\n          width: 0.1875rem;\n          height: 0.1875rem;\n          margin: 0 0.1875rem;\n          animation-duration: calc(4 * ${theme.base.animation.speed});\n        `}\n\n      &:nth-child(2) {\n          animation-delay: 0.1667s;\n        }\n\n        &:nth-child(3) {\n          animation-delay: ${0.1667 * 2}s;\n        }\n      }\n    `;\n});\nStyledProgressEllipsis.defaultProps = defaultThemeProp;\nconst Ellipsis = forwardRef(({ message, placement, ...restProps }, ref) => {\n    return (_jsx(StyledProgressEllipsis, { ref: ref, role: 'progressbar', placement: placement, ...restProps, children: _jsxs(\"span\", { children: [_jsx(\"span\", {}), _jsx(\"span\", {}), _jsx(\"span\", {})] }) }));\n});\nexport default Ellipsis;\n//# sourceMappingURL=Ellipsis.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled, { css } from 'styled-components';\nimport { readableColor, rgba } from 'polished';\nimport Backdrop from '../Backdrop';\nimport Text from '../Text';\nimport { calculateFontSize } from '../../styles';\nimport { tryCatch } from '../../utils';\nimport { useConfiguration } from '../../hooks';\nimport Bar from './Bar';\nimport Ellipsis from './Ellipsis';\nimport Ring from './Ring';\nconst StyledMessage = styled.span(({ theme }) => {\n    const color = tryCatch(() => {\n        return rgba(readableColor(theme.base.palette['primary-background']), theme.base.transparency['transparent-3']);\n    });\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    margin-top: 0.5rem;\n    font-size: ${fontSize[theme.components.label['font-size']]};\n    font-weight: ${theme.base['font-weight']['semi-bold']};\n    color: ${color};\n  `;\n});\nconst Progress = forwardRef(({ variant = 'ring', placement = 'global', visible = true, onTransitionEndIn, onTransitionEndOut, value, message, ...restProps }, ref) => {\n    const [isVisible, setIsVisible] = useState(visible);\n    const [isNull, setIsNull] = useState(!visible);\n    const { portalTarget } = useConfiguration();\n    const showTime = useRef();\n    const showTimeout = useRef();\n    const hideTimeout = useRef();\n    let Comp = Ring;\n    if (variant === 'bar')\n        Comp = Bar;\n    else if (variant === 'ellipsis')\n        Comp = Ellipsis;\n    const onBackdropTransitionEnd = () => {\n        setIsNull(true);\n        onTransitionEndOut?.();\n    };\n    useEffect(() => {\n        if (visible) {\n            clearTimeout(hideTimeout.current);\n            showTime.current = Date.now();\n            showTimeout.current = window.setTimeout(() => {\n                setIsVisible(true);\n                setIsNull(false);\n            }, 100);\n        }\n        else {\n            clearTimeout(showTimeout.current);\n            if (typeof showTime.current === 'number') {\n                const minimumDuration = 1000;\n                const timeElapsed = Date.now() - showTime.current;\n                if (timeElapsed > minimumDuration)\n                    setIsVisible(false);\n                else {\n                    hideTimeout.current = window.setTimeout(() => {\n                        setIsVisible(false);\n                    }, minimumDuration - timeElapsed);\n                }\n            }\n            else\n                setIsVisible(false);\n        }\n    }, [visible]);\n    useEffect(() => {\n        return () => {\n            clearTimeout(showTimeout.current);\n            clearTimeout(hideTimeout.current);\n        };\n    }, []);\n    if (isNull)\n        return null;\n    const comp = (_jsx(Comp, { ...restProps, placement: placement, value: value, \"aria-valuetext\": message && typeof value === 'number' ? `${message} - ${value}` : message, ref: ref }));\n    const content = placement === 'inline' ? (comp) : (_jsxs(Backdrop, { open: isVisible, container: { direction: 'column' }, position: placement === 'global' ? 'fixed' : 'absolute', variant: 'light', alpha: 0.5, onAfterTransitionIn: onTransitionEndIn, onAfterTransitionOut: onBackdropTransitionEnd, children: [comp, !!message && (_jsx(Text, { as: StyledMessage, variant: 'secondary', \"aria-hidden\": 'true', children: message }))] }));\n    return placement === 'global' && portalTarget ? createPortal(content, portalTarget) : content;\n});\nexport default Progress;\n//# sourceMappingURL=Progress.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledProgressRing = styled.div(({ theme, placement, determinate }) => {\n    return css `\n    position: relative;\n    min-width: 1em;\n    min-height: 1em;\n\n    @keyframes LoadingRing {\n      0% {\n        transform: rotate(0deg);\n      }\n\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    svg {\n      display: block;\n      position: absolute;\n      height: 100%;\n\n      circle {\n        fill: transparent;\n        stroke: ${theme.base.colors.gray['extra-light']};\n        stroke-width: 2;\n        r: 45%;\n        cx: 50%;\n        cy: 50%;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n\n        &:nth-child(2) {\n          stroke: ${theme.components.progress['progress-color']};\n          transition: stroke-dashoffset calc(0.5 * ${theme.base.animation.speed})\n            ${theme.base.animation.timing.ease};\n\n          ${!determinate &&\n        css `\n            animation: LoadingRing calc(4 * ${theme.base.animation.speed}) linear infinite;\n          `}\n        }\n      }\n    }\n\n    ${placement === 'inline'\n        ? css `\n          display: inline-flex;\n          vertical-align: top;\n        `\n        : css `\n          width: 2rem;\n          height: 2rem;\n        `}\n  `;\n});\nStyledProgressRing.defaultProps = defaultThemeProp;\nconst Ring = forwardRef(({ value, minValue = 0, maxValue = 100, placement, ...restProps }, ref) => {\n    let strokeDashoffset;\n    const circumference = 18 * Math.PI;\n    if (typeof value !== 'number')\n        strokeDashoffset = (1 - 33 / 100) * circumference;\n    else if (value > maxValue || minValue > maxValue)\n        strokeDashoffset = 0;\n    else if (value < minValue)\n        strokeDashoffset = circumference;\n    else\n        strokeDashoffset = (1 - (value - minValue) / (maxValue - minValue)) * circumference;\n    return (_jsx(StyledProgressRing, { ref: ref, role: 'progressbar', \"aria-valuemin\": minValue, \"aria-valuemax\": maxValue, \"aria-valuenow\": value, placement: placement, determinate: typeof value === 'number', ...restProps, children: _jsxs(\"svg\", { viewBox: '0 0 20 20', children: [_jsx(\"circle\", {}), _jsx(\"circle\", { strokeDasharray: circumference, style: { strokeDashoffset } })] }) }));\n});\nexport default Ring;\n//# sourceMappingURL=Ring.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, Children, cloneElement, useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport FormField from '../FormField';\nimport { StyledFormField } from '../FormField/FormField';\nimport Grid from '../Grid';\nimport { useElement, useUID } from '../../hooks';\nconst defaultProps = {\n    required: false,\n    disabled: false\n};\nexport const StyledRadioCheckGroup = styled.fieldset `\n  &[disabled] {\n    > ${StyledFormField} {\n      opacity: unset;\n    }\n  }\n`;\nconst RadioCheckGroup = forwardRef((props, ref) => {\n    const uid = useUID();\n    const { children, name = uid, disabled, onChange, readOnly, inline = false, autoStack = true, variant = 'simple', ...restProps } = props;\n    const [optionsEl, setOptionsEl] = useElement();\n    const [renderInline, setRenderInline] = useState(inline);\n    const renderInlineRef = useRef(inline);\n    const minInlineWidth = useRef(0);\n    useEffect(() => {\n        if (inline && optionsEl && optionsEl.lastChild && autoStack) {\n            const intersectionObserver = new IntersectionObserver(entries => {\n                if (entries[0].intersectionRatio < 1) {\n                    if (entries[0].rootBounds)\n                        minInlineWidth.current = entries[0].rootBounds.width + 1;\n                    renderInlineRef.current = false;\n                    setRenderInline(false);\n                }\n            }, { root: optionsEl, threshold: 1 });\n            const resizeObserver = new ResizeObserver(entries => {\n                if (!renderInlineRef.current && entries[0].contentRect.width > minInlineWidth.current) {\n                    renderInlineRef.current = true;\n                    setRenderInline(true);\n                }\n            });\n            intersectionObserver.observe(optionsEl.lastChild);\n            resizeObserver.observe(optionsEl);\n            return () => {\n                intersectionObserver.disconnect();\n                resizeObserver.disconnect();\n            };\n        }\n    }, [optionsEl, inline, autoStack]);\n    return (_jsx(FormField, { ...{\n            as: StyledRadioCheckGroup,\n            labelAs: 'legend',\n            ref,\n            name,\n            disabled,\n            ...restProps\n        }, children: _jsx(Grid, { ref: setOptionsEl, container: {\n                colGap: 2,\n                rowGap: variant === 'card' ? 1 : 0,\n                cols: renderInline ? 'repeat(auto-fit, minmax(1ch, max-content))' : '1fr'\n            }, children: Children.map(children, child => cloneElement(child, {\n                name,\n                disabled: disabled || child.props.disabled,\n                readOnly: readOnly || child.props.readOnly,\n                variant,\n                onChange: onChange\n                    ? (e) => {\n                        if (!(readOnly || child.props.readOnly)) {\n                            child.props.onChange?.(e);\n                            onChange(e);\n                        }\n                    }\n                    : child.props.onChange\n            })) }) }));\n});\nRadioCheckGroup.defaultProps = defaultProps;\nexport default RadioCheckGroup;\n//# sourceMappingURL=RadioCheckGroup.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport FormField from '../FormField';\nimport { StyledFormControl } from '../FormControl';\nimport { useDirection, useI18n, useUID } from '../../hooks';\nimport VisuallyHiddenText from '../VisuallyHiddenText';\nexport const StyledSelect = styled.select(props => {\n    const { readOnly } = props;\n    const { base, components: { 'form-control': { 'foreground-color': fg }, select } } = props.theme;\n    const foreground = encodeURIComponent(fg);\n    const { rtl } = useDirection();\n    return css `\n    appearance: none;\n    -webkit-appearance: none;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n    width: 100%;\n    height: ${select.height};\n    min-height: ${base['hit-area']['mouse-min']};\n    padding-inline-start: ${select.padding};\n    padding-inline-end: calc(4 * ${base.spacing});\n\n    /* cSpell:disable-next-line */\n    background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 25 25' fill='${foreground}'%3E%3Cpath d='M12.1476563,16.5726562 C12.1476563,16.5726562 3.2875,9.72421875 3.2875,9.72421875 C3.2875,9.72421875 3.14375,9.58046875 3.14375,9.58046875 C3.04765625,9.3890625 3,9.19765625 3,9.00546875 C3,9.00546875 3,9.00546875 3,9.00546875 C3,8.33515625 3.33515625,8 3.9578125,8 C3.9578125,8 3.9578125,8 3.9578125,8 C4.1015625,8 4.29296875,8.09609375 4.628125,8.2390625 C4.628125,8.2390625 4.628125,8.2390625 4.628125,8.2390625 C4.628125,8.2390625 12.8179688,14.2257813 12.8179688,14.2257813 C12.8179688,14.2257813 21.103125,8.19140625 21.103125,8.19140625 C21.3421875,8.04765625 21.534375,8 21.678125,8 C21.678125,8 21.678125,8 21.678125,8 C22.3007813,8 22.6359375,8.33515625 22.6359375,9.00546875 C22.6359375,9.00546875 22.6359375,9.00546875 22.6359375,9.00546875 C22.6359375,9.196875 22.5882813,9.38828125 22.4921875,9.58046875 C22.4921875,9.58046875 22.4921875,9.58046875 22.4921875,9.58046875 C22.4921875,9.58046875 22.3484375,9.72421875 22.3484375,9.72421875 C22.3484375,9.72421875 13.4882812,16.525 13.4882812,16.525 C13.296875,16.7164063 13.0570312,16.8125 12.8179688,16.8125 C12.8179688,16.8125 12.8179688,16.8125 12.8179688,16.8125 C12.5789062,16.8125 12.3867188,16.7164062 12.1476563,16.5734375 C12.1476563,16.5734375 12.1476563,16.5734375 12.1476563,16.5734375 L12.1476563,16.5726562 Z'/%3E%3C/svg%3E\");\n    background-repeat: no-repeat;\n    background-size: calc(2 * ${base.spacing}) auto;\n    background-position: ${rtl ? base.spacing : `calc(100% - ${base.spacing}) `} 60%;\n    border-width: ${select['border-width']};\n    border-radius: calc(${base['border-radius']} * ${select['border-radius']});\n\n    ${readOnly &&\n        css `\n      background-image: none;\n    `}\n\n    ${!props.status &&\n        css `\n      border-color: ${select['border-color']};\n    `}\n\n    &::-ms-expand {\n      display: none;\n    }\n\n    @media (pointer: coarse) {\n      min-height: ${base['hit-area']['finger-min']};\n    }\n  `;\n});\nStyledSelect.defaultProps = defaultThemeProp;\nconst Select = forwardRef((props, ref) => {\n    const uid = useUID();\n    const t = useI18n();\n    const { additionalInfo, children, id = uid, label, labelHidden, info, status, required = false, disabled = false, readOnly = false, actions, onResolveSuggestion, ...restProps } = props;\n    const Comp = (_jsx(StyledFormControl, { ...restProps, as: StyledSelect, hasSuggestion: status === 'pending' && !!onResolveSuggestion, id: id, status: status, required: required, disabled: disabled, label: label, readOnly: readOnly, ref: ref, onMouseDown: readOnly\n            ? (e) => {\n                e.preventDefault();\n            }\n            : undefined, onKeyDown: readOnly\n            ? (e) => {\n                // TODO: Consideration is needed for key modifiers, e.g. \"ctrl p\"\n                if (!['Escape', 'Tab', 'Space'].includes(e.key))\n                    e.preventDefault();\n            }\n            : undefined, children: children }));\n    return label ? (_jsx(FormField, { ...{\n            label: (_jsxs(_Fragment, { children: [label, readOnly && _jsx(VisuallyHiddenText, { children: ` ${t('read_only')}` })] })),\n            labelHidden,\n            id,\n            info,\n            status,\n            required,\n            disabled,\n            readOnly,\n            actions,\n            onResolveSuggestion,\n            additionalInfo\n        }, children: Comp })) : (Comp);\n});\nexport default Select;\n//# sourceMappingURL=Select.js.map","import { mix } from 'polished';\nimport styled, { css } from 'styled-components';\nimport { useDirection } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { StyledGrid } from '../Grid';\nimport { NumberDisplay } from '../Number';\nimport StyledNumberInput from '../Number/NumberInput.styles';\nexport const StyledThumb = styled.div(({ theme: { base: { palette: { 'primary-background': bgColor, 'border-line': borderColor }, spacing, 'border-radius': borderRadius }, components: { progress: { 'progress-color': fgColor }, button } } }) => {\n    const hoverBgColor = tryCatch(() => mix(0.2, fgColor, bgColor));\n    return css `\n      border: ${button['border-width']} solid ${borderColor};\n      border-radius: calc(${borderRadius} * 3);\n      outline: none;\n      background-color: ${bgColor};\n      width: calc(${spacing} * 3);\n      height: calc(${spacing} * 3);\n      cursor: pointer;\n\n      &:focus {\n        box-shadow: ${button['focus-shadow']};\n      }\n\n      &:hover,\n      &:active {\n        background-color: ${hoverBgColor};\n        border-color: ${fgColor};\n      }\n    `;\n});\nStyledThumb.defaultProps = defaultThemeProp;\nexport const StyledBar = styled.div(({ theme, showProgress }) => {\n    const { base: { spacing, colors, 'border-radius': borderRadius }, components: { progress: { 'progress-color': progressColor } } } = theme;\n    const { ltr } = useDirection();\n    return css `\n    border-radius: ${borderRadius};\n    height: ${spacing};\n    width: 100%;\n    overflow: hidden;\n    position: relative;\n    background-color: ${colors.gray.light};\n\n    ${showProgress &&\n        css `\n      ::before {\n        position: absolute;\n        left: 0;\n        top: 0;\n        content: '';\n        display: block;\n        width: 100%;\n        height: 100%;\n        background-color: ${progressColor};\n        ${ltr\n            ? css `\n              transform: translateX(calc(-100% + var(--slider-value, 0)));\n            `\n            : css `\n              transform: translateX(calc(100% - var(--slider-value, 0)));\n            `}\n      }\n    `}\n  `;\n});\nStyledBar.defaultProps = defaultThemeProp;\nexport const StyledTrack = styled.div(({ theme: { base: { spacing } } }) => {\n    const { ltr } = useDirection();\n    return css `\n      height: calc(${spacing} * 4);\n      width: 100%;\n      cursor: pointer;\n      position: relative;\n\n      > ${StyledThumb} {\n        z-index: 1;\n        position: absolute;\n        top: calc(${spacing} / 2);\n        left: var(--slider-value);\n        right: var(--slider-value);\n        ${ltr\n        ? css `\n              transform: translate(-50%, 0);\n            `\n        : css `\n              transform: translate(50%, 0);\n            `}\n      }\n    `;\n});\nStyledTrack.defaultProps = defaultThemeProp;\nexport const StyledTicksContainer = styled.div `\n  width: 100%;\n\n  div {\n    &::before {\n      content: '';\n      display: table;\n      background: ${p => p.theme.base.palette['foreground-color']};\n    }\n  }\n`;\nStyledTicksContainer.defaultProps = defaultThemeProp;\nexport const StyledSliderTrackWrapper = styled.div `\n  width: 100%;\n`;\nStyledSliderTrackWrapper.defaultProps = defaultThemeProp;\nexport const StyledPreview = styled(NumberDisplay) `\n  width: ${props => props.size}ch;\n  flex-shrink: 0;\n`;\nStyledPreview.defaultProps = defaultThemeProp;\nexport const StyledSlider = styled.div(props => {\n    const { theme: { base: { spacing, palette }, components: { 'form-field': formField } }, status, orientation } = props;\n    const statusColor = status && formField[status] ? formField[status]['status-color'] : 'transparent';\n    const thumbBgColor = tryCatch(() => mix(0.2, statusColor, palette['primary-background']));\n    const borderColor = status && formField[status] ? formField[status]['status-color'] : palette['border-line'];\n    return css `\n    > span {\n      line-height: calc(${spacing} * 4);\n    }\n\n    ${status &&\n        css `\n      ${StyledBar}::before {\n        background-color: ${statusColor};\n      }\n\n      ${StyledThumb} {\n        border-color: ${borderColor};\n        :hover,\n        :active {\n          background-color: ${thumbBgColor};\n        }\n      }\n    `}\n\n    ${orientation === 'horizontal' &&\n        css `\n      ${StyledSliderTrackWrapper} {\n        margin-inline: calc(1.5 * ${spacing});\n\n        ${StyledTrack},\n        ${StyledThumb} {\n          grid-row: 1;\n        }\n\n        ${StyledBar} {\n          /* extend by thumb width */\n          min-width: calc(100% + ${spacing} * 3);\n        }\n\n        ${StyledTicksContainer} {\n          grid-row: 2;\n        }\n\n        & + ${StyledNumberInput}, & + ${StyledPreview} {\n          margin-inline-start: calc(2 * ${spacing});\n        }\n      }\n    `}\n\n    /* disabling 'duplicate selectors' rule to keep the css rules grouped by orientation prop */\n\n    /* stylelint-disable no-duplicate-selectors */\n    ${orientation === 'vertical' &&\n        css `\n      ${StyledSliderTrackWrapper} {\n        grid-template-columns: calc(${spacing} * 4) minmax(0, 1fr);\n        grid-template-rows: 0.5em [track-start] minmax(calc(${spacing} * 20), max-content) [track-end] 0.5em;\n        margin-top: ${spacing};\n\n        ${StyledTrack} {\n          grid-row: track-start / track-end;\n          height: 100%;\n          transform: scale(-1);\n\n          ${StyledBar} {\n            height: 100%;\n            width: ${spacing};\n\n            ::before {\n              transform: translateY(calc(-100% + var(--slider-value, 0)));\n            }\n          }\n        }\n\n        ${StyledThumb} {\n          grid-row: track-start / track-end;\n          top: auto;\n          bottom: calc(100% - var(--slider-value));\n          left: calc(${spacing} / 2);\n          right: calc(${spacing} / 2);\n          transform: translate(0, 50%);\n        }\n\n        ${StyledTicksContainer} {\n          grid-row: 1 / -1;\n          height: 100%;\n        }\n\n        & + ${StyledNumberInput}, & + ${StyledPreview} {\n          margin-top: calc(2 * ${spacing});\n          width: calc(${spacing} * 4);\n          text-align: center;\n\n          /* fix NumberInput double padding issue */\n          &,\n          & > input {\n            padding: 0;\n          }\n        }\n      }\n    `}\n\n    /* stylelint-enable no-duplicate-selectors */\n\n\n    &[disabled],\n    &[readonly] {\n      ${StyledTrack} {\n        cursor: default;\n      }\n\n      ${StyledThumb} {\n        cursor: default;\n        border-color: ${palette['border-line']};\n        :hover,\n        :active {\n          background-color: ${palette['background-color']};\n        }\n      }\n    }\n  `;\n});\nStyledSlider.defaultProps = defaultThemeProp;\nexport const StyledTickItem = styled(StyledGrid)(({ lowerBoundaryItem, upperBoundaryItem, orientation, theme }) => {\n    const spacing = theme.base.spacing;\n    const { ltr } = useDirection();\n    return css `\n    /* disabling 'duplicate selectors' rule to keep the css rules grouped by orientation prop */\n\n    /* stylelint-disable no-duplicate-selectors */\n    ${orientation === 'horizontal' &&\n        css `\n      text-align: center;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      &::before {\n        width: 0.0625rem;\n        height: ${spacing};\n        transform: translateY(-50%);\n        margin: 0 auto;\n      }\n\n      ${lowerBoundaryItem &&\n            css `\n        text-align: start;\n        transform: translate(-0.5ch, 0);\n        &::before {\n          margin-inline-start: 0.5ch;\n        }\n      `}\n\n      ${upperBoundaryItem &&\n            css `\n        text-align: end;\n        transform: translate(0.5ch, 0);\n        &::before {\n          margin-inline-end: 0.5ch;\n        }\n      `}\n    `}\n\n    ${orientation === 'vertical' &&\n        css `\n      display: flex;\n      align-items: center;\n\n      &::before {\n        width: ${spacing};\n        height: calc(${spacing} / 8);\n        ${ltr\n            ? css `\n              transform: translateX(-50%);\n            `\n            : css `\n              transform: translateX(50%);\n            `}\n      }\n    `}\n\n    /* stylelint-enable no-duplicate-selectors */\n    overflow: hidden;\n  `;\n});\nStyledTickItem.defaultProps = defaultThemeProp;\nexport const StyledTickButton = styled.span `\n  cursor: pointer;\n  line-height: 1em;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  outline: 0;\n`;\nStyledTickButton.defaultProps = defaultThemeProp;\n//# sourceMappingURL=Slider.styles.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Grid from '../Grid';\nimport { defaultThemeProp } from '../../theme';\nimport { StyledProgressRing } from '../Progress';\nexport const StyledVisual = styled.div `\n  > ${StyledProgressRing}, img {\n    display: block;\n    object-fit: cover;\n    width: 2rem;\n    height: 2rem;\n  }\n`;\nStyledVisual.defaultProps = defaultThemeProp;\nexport const StyledPrimary = styled(Grid)(({ theme, isString, overflowStrategy }) => {\n    return css `\n    ${overflowStrategy === 'ellipsis'\n        ? css `\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        `\n        : css `\n          word-break: break-word;\n        `}\n\n    ${isString &&\n        css `\n      font-weight: ${theme.base['font-weight']['semi-bold']};\n    `}\n  `;\n});\nStyledPrimary.defaultProps = defaultThemeProp;\nexport const StyledSecondary = styled(Grid)(({ overflowStrategy }) => {\n    return css `\n    ${overflowStrategy === 'ellipsis'\n        ? css `\n          overflow: hidden;\n          text-overflow: ellipsis;\n        `\n        : css `\n          word-break: break-word;\n        `}\n  `;\n});\nexport const StyledSummaryItemActions = styled.div `\n  white-space: nowrap;\n`;\nexport const StyledSummaryItem = styled.div ``;\nconst getColumns = ({ visual, actions }) => {\n    return `${visual ? 'auto ' : ''}minmax(0, 1fr)${actions ? ' auto' : ''}`;\n};\nconst getAreas = ({ secondary, visual, actions }) => {\n    return `\"${visual ? 'visual ' : ''}primary${actions ? ' actions' : ''}\"${secondary ? `\\n\"${visual ? 'visual ' : ''}secondary${actions ? ' actions' : ''}\"` : ''}`;\n};\nconst SummaryItem = forwardRef(({ visual, primary, secondary, actions, container, overflowStrategy = 'wrap', as, ...restProps }, ref) => {\n    return (_jsxs(Grid, { ...restProps, ref: ref, container: {\n            cols: getColumns({ visual, actions }),\n            colGap: 2,\n            areas: getAreas({ secondary, visual, actions }),\n            ...container\n        }, as: StyledSummaryItem, forwardedAs: as, children: [visual && (_jsx(Grid, { as: StyledVisual, item: { area: 'visual', alignSelf: 'center' }, children: visual })), _jsx(StyledPrimary, { item: { area: 'primary', alignSelf: secondary ? 'end' : 'center' }, isString: typeof primary === 'string', overflowStrategy: overflowStrategy, children: primary }), secondary && (_jsx(StyledSecondary, { item: { area: 'secondary', alignSelf: 'start' }, overflowStrategy: overflowStrategy, children: secondary })), actions && (_jsx(Grid, { as: StyledSummaryItemActions, item: { area: 'actions', alignSelf: 'center' }, children: actions }))] }));\n});\nexport default SummaryItem;\n//# sourceMappingURL=SummaryItem.js.map","import { createElement as _createElement } from \"react\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { hideVisually } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { calculateFontSize } from '../../styles';\nimport Progress from '../Progress';\nimport Text from '../Text';\nimport EmptyState from '../EmptyState';\nimport Card, { CardContent } from '../Card';\nconst StyledTable = styled.table(props => {\n    const { hoverHighlight, theme: { base: { palette: { 'secondary-background': hoverBg }, spacing }, components: { table } } } = props;\n    const verticalSpacingHeader = `calc(${table.header['vertical-spacing']} * ${spacing})`;\n    const verticalSpacingBody = `calc(${table.body['vertical-spacing']} * ${spacing})`;\n    const horizontalSpacing = `calc(max(${table.header['horizontal-spacing']}, ${table.body['horizontal-spacing']}) * ${spacing})`;\n    const borderHeader = `${table.header['border-width']} solid ${table.header['border-color']}`;\n    const borderBody = `${table.body['border-width']} solid ${table.body['border-color']}`;\n    return css `\n    border-collapse: collapse;\n    width: 100%;\n    background-color: transparent;\n\n    thead {\n      tr th {\n        padding: ${`${table.spacing['vertical-inner'] ? verticalSpacingHeader : '0'} ${table.spacing['horizontal-inner'] ? horizontalSpacing : '0'}`};\n        border-bottom: ${table.border['horizontal-inner'] ? borderHeader : 'none'};\n        border-inline-end: ${table.border['vertical-inner'] ? borderHeader : 'none'};\n      }\n\n      tr:first-of-type th {\n        padding-top: ${table.spacing['vertical-outer'] ? verticalSpacingHeader : '0'};\n        border-top: ${table.border['horizontal-outer'] ? borderHeader : 'none'};\n      }\n\n      tr th:first-of-type {\n        padding-inline-start: ${table.spacing['horizontal-outer'] ? horizontalSpacing : '0'};\n        border-inline-start: ${table.border['vertical-outer'] ? borderHeader : 'none'};\n      }\n\n      tr th:last-of-type {\n        padding-inline-end: ${table.spacing['horizontal-outer'] ? horizontalSpacing : '0'};\n        border-inline-end: ${table.border['vertical-outer'] ? borderHeader : 'none'};\n      }\n    }\n\n    tbody {\n      tr td {\n        padding: ${`${table.spacing['vertical-inner'] ? verticalSpacingBody : '0'} ${table.spacing['horizontal-inner'] ? horizontalSpacing : '0'}`};\n        border-bottom: ${table.border['horizontal-inner'] ? borderBody : 'none'};\n        border-inline-end: ${table.border['vertical-inner'] ? borderBody : 'none'};\n      }\n\n      tr:last-of-type td {\n        padding-bottom: ${table.spacing['vertical-outer'] ? verticalSpacingBody : '0'};\n        border-bottom: ${table.border['horizontal-outer'] ? borderBody : 'none'};\n      }\n\n      tr td:first-of-type {\n        padding-inline-start: ${table.spacing['horizontal-outer'] ? horizontalSpacing : '0'};\n        border-inline-start: ${table.border['vertical-outer'] ? borderBody : 'none'};\n      }\n\n      tr td:last-of-type {\n        padding-inline-end: ${table.spacing['horizontal-outer'] ? horizontalSpacing : '0'};\n        border-inline-end: ${table.border['vertical-outer'] ? borderBody : 'none'};\n      }\n    }\n\n    ${hoverHighlight &&\n        css `\n      tbody tr:hover td,\n      tbody tr:focus-within td {\n        background-color: ${hoverBg};\n      }\n    `}\n  `;\n});\nStyledTable.defaultProps = defaultThemeProp;\nconst StyledCell = styled.td(({ align, noWrap = false }) => css `\n    text-align: ${align || 'left'};\n    white-space: ${noWrap ? 'nowrap' : null};\n  `);\nStyledCell.defaultProps = defaultThemeProp;\nconst StyledHeaderCell = styled.th(({ theme: { base: { 'font-size': fontSize, 'font-scale': fontScale }, components: { table: { header } } } }) => {\n    const fontSizes = calculateFontSize(fontSize, fontScale);\n    return css `\n      font-size: ${fontSizes[header['font-size']]};\n      font-weight: ${header['font-weight']};\n      color: ${header['foreground-color']};\n      background-color: ${header['background-color']};\n    `;\n});\nStyledHeaderCell.defaultProps = defaultThemeProp;\nconst StyledBodyCell = styled.td(({ theme: { components: { table: { body } } } }) => css `\n    color: ${body['foreground-color']};\n    background-color: ${body['background-color']};\n  `);\nStyledBodyCell.defaultProps = defaultThemeProp;\nconst StyledEmptyCell = styled.td `\n  padding: calc(2 * ${props => props.theme.base.spacing});\n`;\nStyledEmptyCell.defaultProps = defaultThemeProp;\nconst StyledLoadingCell = styled.td `\n  position: relative;\n  height: 6rem;\n`;\nexport const StyledTableWrapper = styled.div `\n  /* Setting it on a table element requires 'display: block' which breaks a11y. */\n  overflow-x: auto;\n`;\nStyledTableWrapper.defaultProps = defaultThemeProp;\nconst StyledTableCaption = styled.caption `\n  ${hideVisually}\n`;\nStyledTableCaption.defaultProps = defaultThemeProp;\nconst Table = forwardRef((props, ref) => {\n    const { columns, data = [], hoverHighlight = false, loading = false, loadingMessage = '', title, ...restProps } = props;\n    return (_jsx(Card, { children: _jsxs(CardContent, { container: { rowGap: 1 }, children: [title && (_jsx(Text, { variant: 'h2', as: 'span', \"aria-hidden\": true, children: title })), _jsx(StyledTableWrapper, { children: _jsxs(StyledTable, { ref: ref, hoverHighlight: hoverHighlight, ...restProps, children: [title && _jsx(StyledTableCaption, { children: title }), _jsx(\"thead\", { children: _jsx(\"tr\", { children: columns.map(col => (_createElement(StyledCell, { as: StyledHeaderCell, ...col, scope: 'col', key: col.label }, col.label))) }) }), _jsxs(\"tbody\", { children: [loading && (_jsx(\"tr\", { children: _jsx(StyledLoadingCell, { colSpan: columns.length, children: _jsx(Progress, { placement: 'local', message: loadingMessage }) }) })), data.length > 0 &&\n                                        !loading &&\n                                        data.map(row => (_jsx(\"tr\", { children: columns.map(({ renderer: Renderer, ...col }) => (_createElement(StyledCell, { as: StyledBodyCell, ...col, key: `${col.label}-${row.id}` }, typeof Renderer === 'function' ? _jsx(Renderer, { ...row }) : row[Renderer]))) }, row.id))), data.length === 0 && !loading && (_jsx(\"tr\", { children: _jsx(StyledEmptyCell, { colSpan: columns.length, children: _jsx(EmptyState, {}) }) }))] })] }) })] }) }));\n});\nexport default Table;\n//# sourceMappingURL=Table.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nexport const StyledText = styled.span(props => {\n    const { variant, status, theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, palette: { 'foreground-color': foregroundColor, urgent: error, warn: warning, success }, transparency: { 'transparent-2': secondaryAlpha } }, components: { text } } } = props;\n    let color;\n    if (status) {\n        color = {\n            error,\n            warning,\n            success\n        }[status];\n    }\n    if (variant === 'secondary') {\n        color = tryCatch(() => rgba(color ?? foregroundColor, secondaryAlpha));\n    }\n    const fontSizes = calculateFontSize(fontSize, fontScale);\n    return css `\n    font-size: ${fontSizes[text[variant]['font-size']]};\n    font-weight: ${text[variant]['font-weight']};\n    color: ${color};\n  `;\n});\nStyledText.defaultProps = defaultThemeProp;\nconst Text = forwardRef(({ variant = 'primary', as, ...restProps }, ref) => {\n    // If variant is for a heading, and no as is passed, set as to heading tag.\n    if (!as && /h\\d/i.test(variant))\n        as = variant;\n    return _jsx(StyledText, { ref: ref, variant: variant, as: as, ...restProps });\n});\nexport default Text;\n//# sourceMappingURL=Text.js.map","import styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nconst StyledTextArea = styled.textarea(({ resizable }) => {\n    return css `\n    width: 100%;\n    min-height: ${props => props.theme.components['text-area']['min-height']};\n    padding: ${props => props.theme.components['text-area'].padding};\n    -webkit-appearance: none;\n    ${!resizable &&\n        css `\n      resize: none;\n    `}\n  `;\n});\nStyledTextArea.defaultProps = defaultThemeProp;\nexport default StyledTextArea;\n//# sourceMappingURL=TextArea.styles.js.map","import { createElement as _createElement } from \"react\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useContext, useReducer, useMemo, useLayoutEffect, useRef, useState, forwardRef, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled, { css } from 'styled-components';\nimport Button from '../Button';\nimport Icon, { registerIcon } from '../Icon';\nimport * as timesIcon from '../Icon/icons/times.icon';\nimport { createUID, windowIsAvailable } from '../../utils';\nimport { useConfiguration, useI18n } from '../../hooks';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport '../../init';\nimport { ToasterContext } from './Context';\nregisterIcon(timesIcon);\nconst StyledToastButton = styled.button(({ theme }) => css `\n    border: none;\n    color: inherit;\n    padding: 0;\n    font-size: 1rem;\n\n    &:enabled:hover {\n      background: #ffffff19;\n    }\n\n    &:enabled:focus {\n      box-shadow: ${theme.base.shadow['focus-inverted']};\n    }\n  `);\nStyledToastButton.defaultProps = defaultThemeProp;\nconst StyledToastContent = styled.div(({ theme }) => {\n    return css `\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    font-size: ${theme.base['font-size']};\n    margin-inline-start: calc(${theme.base['border-radius']} / 2);\n  `;\n});\nStyledToastContent.defaultProps = defaultThemeProp;\nconst StyledToast = styled.div(({ theme }) => {\n    return css `\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-start: 0;\n    width: 100%;\n    padding: calc(${theme.base.spacing} / 2);\n    background: ${theme.base.colors.slate['extra-dark']};\n    color: ${theme.base.colors.white};\n    border-radius: calc(${theme.base['border-radius']} / 2);\n    opacity: var(--opacity);\n    transform: translateY(var(--translateY)) scale(var(--scale));\n    transition-property: transform, opacity;\n    transition-duration: ${theme.base.animation.speed};\n    transition-timing-function: ${theme.base.animation.timing.ease};\n  `;\n});\nStyledToast.defaultProps = defaultThemeProp;\nconst StyledToaster = styled.div `\n  position: fixed;\n  z-index: ${({ theme }) => theme.base['z-index'].toast};\n  width: min(40ch, calc(100% - 1rem));\n  inset-inline-start: 50%;\n  transform: translateX(-50%);\n  top: 100%;\n`;\nStyledToaster.defaultProps = defaultThemeProp;\nfunction reducer(current, action) {\n    switch (action.type) {\n        case 'push':\n            return [\n                ...current,\n                {\n                    ...action.payload\n                }\n            ];\n        case 'unmount':\n            return current.filter(m => m.id !== action.payload);\n        default:\n            return current;\n    }\n}\nconst Toast = forwardRef(({ dispatch, topLevelDismiss, dismissAfter, ...message }, ref) => {\n    const { content, translateY } = message;\n    const [dismissed, setDismissed] = useState(false);\n    const timeoutRef = useRef(NaN);\n    const t = useI18n();\n    const onTransitionEnd = (e) => {\n        if (dismissed && e.propertyName === 'opacity' && e.target === e.currentTarget) {\n            dispatch({ type: 'unmount', payload: message.id });\n        }\n    };\n    const dismiss = () => {\n        clearTimeout(timeoutRef.current);\n        if (dismissed)\n            return;\n        setDismissed(true);\n        topLevelDismiss?.({ id: message.id, timeout: false });\n    };\n    useEffect(() => {\n        if (Number.isFinite(dismissAfter)) {\n            timeoutRef.current = setTimeout(dismiss, dismissAfter);\n        }\n        return () => {\n            clearTimeout(timeoutRef.current);\n        };\n    }, []);\n    return (_jsxs(Flex, { container: { alignItems: 'center', gap: 0.25 }, as: StyledToast, ref: ref, style: {\n            '--translateY': `${-translateY}px`,\n            '--opacity': dismissed ? '0' : '1',\n            '--scale': dismissed ? '0' : '1'\n        }, onTransitionEnd: onTransitionEnd, children: [_jsx(Flex, { item: { grow: 1 }, as: StyledToastContent, children: content }), _jsx(Button, { as: StyledToastButton, variant: 'simple', onClick: dismiss, icon: true, \"aria-label\": t('dismiss_label'), children: _jsx(Icon, { name: 'times' }) })] }));\n});\nconst Toaster = ({ children, dismissAfter = Infinity, onDismiss }) => {\n    const { portalTarget } = useConfiguration();\n    const [messages, dispatch] = useReducer(reducer, []);\n    const [yOffsets, setYOffsets] = useState([]);\n    const heightHashRef = useRef({});\n    // This effect will cause a re-render with a translateY value set for each toast.\n    useLayoutEffect(() => {\n        const heights = [...messages].reverse().map(({ id }) => heightHashRef.current[id]);\n        setYOffsets(heights\n            .map((_, i) => heights.slice(0, i + 1).reduce((sum, cur) => sum + cur + 4, 0))\n            .reverse());\n    }, [messages.length]);\n    const providerValue = useMemo(() => ({\n        push(incoming) {\n            const message = {\n                ...incoming,\n                id: incoming.id ?? createUID()\n            };\n            dispatch({\n                type: 'push',\n                payload: message\n            });\n        },\n        initialized: true\n    }), [onDismiss, dismissAfter]);\n    // Don't create additional ToasterContext.Providers.\n    const context = windowIsAvailable\n        ? window.cosmos.toasterContext ?? ToasterContext\n        : ToasterContext;\n    const priorCtx = useContext(context);\n    if (priorCtx.initialized) {\n        return _jsx(context.Provider, { value: priorCtx, children: children });\n    }\n    return (_jsxs(_Fragment, { children: [_jsx(context.Provider, { value: providerValue, children: children }), !!messages.length &&\n                portalTarget &&\n                createPortal(_jsx(StyledToaster, { children: messages.map((message, i) => {\n                        return (_createElement(Toast, { ...message, translateY: yOffsets[i] ?? 0, topLevelDismiss: onDismiss, dismissAfter: message.dismissAfter ?? dismissAfter, key: message.id, dispatch: dispatch, ref: el => {\n                                if (el) {\n                                    heightHashRef.current[message.id] = el.offsetHeight;\n                                }\n                                else {\n                                    delete heightHashRef.current[message.id];\n                                }\n                            } }));\n                    }) }), portalTarget)] }));\n};\nexport default Toaster;\n//# sourceMappingURL=Toaster.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Popover from '../Popover';\nimport { useConsolidatedRef, useUID } from '../../hooks';\nimport { calculateFontSize } from '../../styles';\nexport const StyledTooltip = styled.div(({ theme }) => {\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    background-color: ${theme.components.tooltip['background-color']};\n    color: ${theme.components.tooltip['foreground-color']};\n    font-size: ${fontSize.xxs};\n    max-width: 40ch;\n    padding: ${theme.base.spacing};\n    white-space: pre-line;\n    word-break: break-word;\n    pointer-events: none;\n    z-index: ${theme.base['z-index'].tooltip};\n  `;\n});\nStyledTooltip.defaultProps = defaultThemeProp;\nconst Tooltip = forwardRef(({ children, target, showDelay = 'short', hideDelay = 'long', placement = 'bottom', describeTarget = true, ...restProps }, ref) => {\n    const id = useUID();\n    const [show, setShow] = useState(false);\n    const tooltipRef = useConsolidatedRef(ref);\n    const lastClickedRef = useRef(null);\n    const showTooltip = useCallback(() => {\n        setShow(true);\n    }, []);\n    const onMouseDown = useCallback(({ target: eTarget }) => {\n        lastClickedRef.current = eTarget;\n        if (eTarget === tooltipRef.current || eTarget === target)\n            return;\n        setShow(false);\n    }, [target]);\n    const onFocusOut = useCallback(() => {\n        if (lastClickedRef.current !== tooltipRef.current) {\n            setShow(false);\n        }\n        lastClickedRef.current = null;\n    }, []);\n    const onMouseEnter = useCallback(() => {\n        setShow(true);\n    }, [target]);\n    const onMouseLeave = useCallback(() => {\n        if (document.activeElement !== target) {\n            setShow(false);\n        }\n    }, [target]);\n    const onKeyDown = useCallback(({ key }) => {\n        if (key === 'Escape' && document.activeElement === target) {\n            setShow(false);\n        }\n    }, [target]);\n    useEffect(() => {\n        if (!target)\n            return;\n        document.addEventListener('keydown', onKeyDown);\n        document.addEventListener('mousedown', onMouseDown);\n        target.addEventListener('focusin', showTooltip);\n        target.addEventListener('focusout', onFocusOut);\n        target.addEventListener('mouseenter', onMouseEnter);\n        target.addEventListener('mouseleave', onMouseLeave);\n        return () => {\n            document.removeEventListener('keydown', onKeyDown);\n            document.removeEventListener('mousedown', onMouseDown);\n            target.removeEventListener('focusin', showTooltip);\n            target.removeEventListener('focusout', onFocusOut);\n            target.removeEventListener('mouseenter', onMouseEnter);\n            target.removeEventListener('mouseleave', onMouseLeave);\n        };\n    }, [target, showTooltip, onMouseDown, onFocusOut, onMouseLeave, onKeyDown]);\n    useEffect(() => {\n        if (target && describeTarget && show) {\n            const describedBy = target.getAttribute('aria-describedby');\n            // Set the attribute to the old attribute plus the id\n            target.setAttribute('aria-describedby', describedBy ? `${describedBy} ${id}` : id);\n        }\n        else if (target) {\n            // Get the old attribute\n            const describedBy = target.getAttribute('aria-describedby');\n            if (describedBy) {\n                // If the old attribute matches the id just remove it entirely\n                if (describedBy === id) {\n                    target.removeAttribute('aria-describedby');\n                }\n                else {\n                    // Otherwise we want to just remove the id that was added and reset the attribute to what it was before\n                    const oldDescribedBy = describedBy.replace(new RegExp(`(?:^|\\\\s+)${id}`), '');\n                    target.setAttribute('aria-describedby', oldDescribedBy);\n                }\n            }\n        }\n    }, [describeTarget, target, show]);\n    return (_jsx(Popover, { id: id, ...restProps, show: show, showDelay: showDelay, hideDelay: hideDelay, groupId: 'tooltip', strategy: 'fixed', as: StyledTooltip, role: 'tooltip', target: target, arrow: true, placement: placement, onMouseDown: onMouseDown, hideOnTargetHidden: true, ref: tooltipRef, children: children }));\n});\nexport default Tooltip;\n//# sourceMappingURL=Tooltip.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { hideVisually } from 'polished';\nexport const StyledVisuallyHiddenText = styled.span `\n  ${hideVisually}\n  -webkit-user-select: none;\n  user-select: none;\n`;\nconst VisuallyHiddenText = forwardRef((props, ref) => (_jsx(StyledVisuallyHiddenText, { ...props, ref: ref })));\nexport default VisuallyHiddenText;\n//# sourceMappingURL=VisuallyHiddenText.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { readableColor } from 'polished';\nimport { Button, StyledButton, Text, Icon, registerIcon, useI18n, tryCatch, defaultThemeProp, useDirection } from '@pega/cosmos-react-core';\nimport * as timesIcon from '@pega/cosmos-react-core/lib/components/Icon/icons/times.icon';\nregisterIcon(timesIcon);\nconst StyledDismissButton = styled.button `\n  font-size: 1.25rem;\n  border: none;\n`;\nexport const StyledAppAnnouncement = styled.article(props => {\n    const { theme: { base: { palette: { 'brand-primary': brandBackground }, shadow, spacing }, components: { card: { 'border-radius': borderRadius } } }, image } = props;\n    const { end } = useDirection();\n    const color = tryCatch(() => readableColor(brandBackground));\n    return css `\n    padding: calc(2 * ${spacing});\n    background: ${brandBackground};\n    border-radius: ${borderRadius};\n    color: ${color};\n    position: relative;\n\n    &::after {\n      background: url('${image}') no-repeat;\n      background-position: ${end} bottom;\n      background-size: contain;\n      background-origin: content-box;\n      opacity: 0.2;\n      content: '';\n      display: block;\n      position: absolute;\n      width: 50%;\n      height: 100%;\n      inset-inline-end: 0;\n      bottom: 0;\n      padding: calc(2 * ${spacing});\n    }\n\n    h2 {\n      position: relative;\n      z-index: 2;\n      margin-bottom: ${spacing};\n    }\n\n    ${StyledDismissButton} {\n      position: absolute;\n      top: 0.75rem;\n      inset-inline-end: 0.75rem;\n      color: inherit;\n      z-index: 3;\n      &:enabled:hover {\n        background: #ffffff19;\n      }\n      &:enabled:focus {\n        box-shadow: ${shadow['focus-inverted']};\n      }\n    }\n\n    > div {\n      width: 75%;\n      position: relative;\n      z-index: 2;\n\n      p,\n      ul {\n        padding-top: calc(2 * ${spacing});\n      }\n\n      ul {\n        padding-inline-start: calc(2 * ${spacing});\n      }\n\n      ${StyledButton} {\n        margin-top: calc(2 * ${spacing});\n        &:enabled:focus,\n        &:not([disabled]):focus {\n          box-shadow: ${shadow['focus-inverted']};\n        }\n      }\n    }\n  `;\n});\nStyledAppAnnouncement.defaultProps = defaultThemeProp;\nconst AppAnnouncement = forwardRef((props, ref) => {\n    const t = useI18n();\n    const { heading, description, details, whatsNewLink, whatsNewText = t('app_announcement_whats_new_button_label'), image, onDismiss, ...restProps } = props;\n    return (_jsxs(StyledAppAnnouncement, { ...restProps, ref: ref, image: image, children: [onDismiss && (_jsx(Button, { as: StyledDismissButton, variant: 'simple', icon: true, onClick: onDismiss, \"aria-label\": t('app_announcement_dismiss_button_label_a11y'), children: _jsx(Icon, { name: 'times' }) })), _jsx(Text, { variant: 'h2', children: heading || t('app_announcement_details_list_header') }), _jsxs(\"div\", { children: [description && _jsx(\"p\", { children: description }), details && (_jsx(\"ul\", { children: details.map((item, index) => {\n                            return _jsx(\"li\", { children: item }, index.toString());\n                        }) })), whatsNewLink && (_jsx(Button, { variant: 'secondary', href: whatsNewLink, target: '_blank', children: whatsNewText }))] })] }));\n});\nexport default AppAnnouncement;\n//# sourceMappingURL=AppAnnouncement.js.map","export const cellGap = 1;\nexport const containerMinWidth = '450px';\nexport const itemMinWidth = '225px';\n//# sourceMappingURL=defaults.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Flex, defaultThemeProp } from '@pega/cosmos-react-core';\nimport { StyledAppAnnouncement } from '../AppAnnouncement/AppAnnouncement';\nimport widthConfigOptions from './options';\nimport { itemMinWidth, cellGap } from './defaults';\nconst StyledCell = styled.div(({ fillAvailable = true, percentageWidth, minWidth, theme }) => {\n    return css `\n      /* variables */\n      --marginGap: calc(${cellGap} * ${theme.base.spacing});\n      --totalMargin: calc(2 * var(--marginGap));\n      --percentageBasis: calc(${percentageWidth} - var(--totalMargin));\n      --maxWidth: calc(100% - var(--totalMargin));\n\n      /* styles */\n      flex-wrap: wrap;\n      flex-basis: var(--percentageBasis);\n      min-width: min(var(--maxWidth), ${minWidth || itemMinWidth});\n      max-width: var(--maxWidth);\n      margin-block-end: var(--totalMargin);\n      margin-inline: var(--marginGap);\n\n      ${!fillAvailable &&\n        css `\n        flex-grow: 0;\n      `}\n\n      ${StyledAppAnnouncement} {\n        align-self: stretch;\n      }\n\n      > * {\n        width: 100%;\n        height: auto;\n        overflow-x: auto;\n      }\n    `;\n});\nStyledCell.defaultProps = defaultThemeProp;\nconst validWidthUnits = ['px', 'ch', 'rem', 'em'];\nconst LayoutCell = ({ config }) => {\n    const layoutConfig = useMemo(() => config.layoutConfig, [config]);\n    const percentageWidth = useMemo(() => {\n        return widthConfigOptions[layoutConfig.width] || '100%';\n    }, [layoutConfig.width]);\n    const minWidth = useMemo(() => {\n        const value = layoutConfig.minWidth;\n        if (typeof value === 'number') {\n            return `${value}px`;\n        }\n        if (Array.isArray(value) &&\n            value.length >= 2 &&\n            typeof value[0] === 'number' &&\n            validWidthUnits.includes(value[1])) {\n            return `${value[0]}${value[1]}`;\n        }\n    }, [layoutConfig.minWidth]);\n    return config?.content ? (_jsx(Flex, { as: StyledCell, item: {\n            grow: 1\n        }, container: { justify: 'stretch', alignItems: 'start' }, fillAvailable: layoutConfig.fillAvailable, percentageWidth: percentageWidth, minWidth: minWidth, children: config.content })) : null;\n};\nexport default LayoutCell;\n//# sourceMappingURL=LayoutCell.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useRef, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Flex, defaultThemeProp } from '@pega/cosmos-react-core';\nimport { containerMinWidth, cellGap } from './defaults';\nimport LayoutCell from './LayoutCell';\nconst StyledConfigurableLayout = styled.div(() => {\n    return css `\n    overflow: hidden;\n  `;\n});\nconst StyledCellGrid = styled.div(({ theme }) => {\n    return css `\n    /* Note: inset position used to negate \"column\" inline margin on items */\n    position: relative;\n    width: calc(100% + ${cellGap * 2} * ${theme.base.spacing});\n    max-width: calc(100% + ${cellGap * 2} * ${theme.base.spacing});\n    inset-inline: calc(-${cellGap} * ${theme.base.spacing});\n    margin-block-end: calc(-2 * ${cellGap} * ${theme.base.spacing});\n  `;\n});\nStyledCellGrid.defaultProps = defaultThemeProp;\nconst StyledContainerRuler = styled.div(({ theme }) => {\n    return css `\n    margin-inline: calc(${cellGap} * ${theme.base.spacing});\n    width: calc(100% - ${cellGap * 2} * ${theme.base.spacing});\n  `;\n});\nStyledContainerRuler.defaultProps = defaultThemeProp;\nconst ConfigurableLayout = forwardRef(({ items, arrangement }, ref) => {\n    const containerRulerRef = useRef(null);\n    const renderMode = useMemo(() => {\n        const activeArrangement = arrangement?.hasWrapped !== undefined && !arrangement.hasWrapped;\n        if (activeArrangement) {\n            switch (arrangement.size) {\n                case 'main':\n                    return 'direct';\n                case 'half':\n                    return 'double';\n                case 'narrow':\n                    return 'full';\n                default:\n                    return 'direct';\n            }\n        }\n        // Use direct by default\n        return 'direct';\n    }, [arrangement]);\n    const content = useMemo(() => {\n        if (items && !!items.length) {\n            return items.map(itemConfig => {\n                const config = {\n                    ...itemConfig,\n                    layoutConfig: { ...itemConfig.layoutConfig }\n                };\n                if (renderMode !== 'direct') {\n                    switch (renderMode) {\n                        case 'double': {\n                            const doubleWidth = {\n                                '1/4': '1/2',\n                                '1/3': '2/3',\n                                '1/2': 'full',\n                                '2/3': 'full',\n                                '3/4': 'full',\n                                full: 'full'\n                            };\n                            config.layoutConfig.width = doubleWidth[config.layoutConfig.width];\n                            break;\n                        }\n                        case 'full':\n                            config.layoutConfig.width = 'full';\n                            break;\n                        default:\n                            config.layoutConfig.width = 'full';\n                            break;\n                    }\n                }\n                return _jsx(LayoutCell, { config: config }, `${itemConfig.id}`);\n            });\n        }\n        return null;\n    }, [items, renderMode]);\n    return (_jsx(StyledConfigurableLayout, { children: _jsxs(Flex, { as: StyledCellGrid, container: { wrap: 'wrap', justify: 'stretch', alignItems: 'stretch' }, item: { basis: containerMinWidth, grow: 1 }, ref: ref, children: [_jsx(StyledContainerRuler, { ref: containerRulerRef }), content] }) }));\n});\nexport default ConfigurableLayout;\n//# sourceMappingURL=ConfigurableLayout.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCardMedia } from './CardMedia';\nconst defaultProps = {\n    interactive: false,\n    role: 'region'\n};\nexport const StyledCard = styled.article(props => {\n    const { 'border-radius': borderRadius, 'border-color': borderColor, background } = props.theme.components.card;\n    const interactive = props.interactive\n        ? css `\n        &:hover {\n          border: 0;\n          box-shadow: 0 0 0 0.0625rem ${borderColor};\n        }\n        &:focus {\n          border: 0;\n          box-shadow: 0 0 0 0.125rem ${borderColor};\n        }\n      `\n        : undefined;\n    return css `\n    ${StyledPopover} &, &:not(& &) {\n      background-color: ${background};\n      border-radius: ${borderRadius};\n\n      &:focus {\n        outline: none;\n      }\n\n      ${interactive}\n\n      ${StyledCardMedia} {\n        &:first-child img {\n          border-radius: ${borderRadius} ${borderRadius} 0 0;\n        }\n      }\n    }\n  `;\n});\nStyledCard.defaultProps = defaultThemeProp;\nconst Card = forwardRef((props, ref) => {\n    const { children, as, onClick, interactive, role, ...restProps } = props;\n    const interactiveProps = {\n        ...(onClick && {\n            onClick,\n            tabIndex: 0,\n            role: 'button'\n        }),\n        ...(interactive && {\n            tabIndex: 0\n        }),\n        ...(role && { role }),\n        interactive\n    };\n    return (_jsx(Flex, { container: { direction: 'column' }, as: StyledCard, forwardedAs: as, ref: ref, ...interactiveProps, ...restProps, children: children }));\n});\nCard.defaultProps = defaultProps;\nexport default Card;\n//# sourceMappingURL=Card.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nconst prefix = (value) => {\n    if (['between', 'around', 'evenly'].includes(value))\n        return `space-${value}`;\n    return value;\n};\nconst getContainerStyles = (gridProps) => {\n    if (!gridProps)\n        return;\n    if (gridProps === true) {\n        return css `\n      display: grid;\n    `;\n    }\n    const { inline, pad, cols, autoCols, rows, autoRows, autoFlow, areas, template, colGap, rowGap, gap, justifyItems, justifyContent, alignItems, alignContent } = gridProps;\n    return css `\n    display: ${inline ? 'inline-grid' : 'grid'};\n\n    ${pad !== undefined &&\n        css `\n      /* stylelint-disable function-name-case, function-whitespace-after */\n      padding: ${({ theme: { base: { spacing } } }) => (Array.isArray(pad) ? pad : [pad]).map(p => `calc(${p} * ${spacing})`).join(' ')};\n\n      /* stylelint-enable function-name-case, function-whitespace-after */\n    `}\n\n    ${cols &&\n        css `\n      grid-template-columns: ${cols};\n    `}\n\n    ${autoCols &&\n        css `\n      grid-auto-columns: ${autoCols};\n    `}\n\n    ${rows &&\n        css `\n      grid-template-rows: ${rows};\n    `}\n\n    ${autoRows &&\n        css `\n      grid-auto-rows: ${autoRows};\n    `}\n\n    ${autoFlow &&\n        css `\n      grid-auto-flow: ${autoFlow};\n    `}\n\n    ${areas &&\n        css `\n      grid-template-areas: ${areas};\n    `}\n\n    ${template &&\n        css `\n      grid-template: ${template};\n    `}\n\n    ${gap !== undefined &&\n        css `\n      gap: calc(${gap} * ${props => props.theme.base.spacing});\n    `}\n\n    ${colGap !== undefined &&\n        css `\n      column-gap: calc(${colGap} * ${props => props.theme.base.spacing});\n    `}\n\n    ${rowGap !== undefined &&\n        css `\n      row-gap: calc(${rowGap} * ${props => props.theme.base.spacing});\n    `}\n\n    ${justifyItems &&\n        css `\n      justify-items: ${justifyItems};\n    `}\n\n    ${justifyContent &&\n        css `\n      justify-content: ${prefix(justifyContent)};\n    `}\n\n    ${alignItems &&\n        css `\n      align-items: ${alignItems};\n    `}\n\n    ${alignContent &&\n        css `\n      align-content: ${prefix(alignContent)};\n    `}\n  `;\n};\nconst getItemStyles = (props) => {\n    if (!props)\n        return;\n    const { colStart, colEnd, colStartEnd, rowStart, rowEnd, rowStartEnd, area, justifySelf, alignSelf } = props;\n    return css `\n    ${colStart &&\n        css `\n      grid-column-start: ${colStart};\n    `}\n\n    ${colEnd &&\n        css `\n      grid-column-end: ${colEnd};\n    `}\n\n    ${colStartEnd &&\n        css `\n      grid-column: ${colStartEnd};\n    `}\n\n    ${rowStart &&\n        css `\n      grid-row-start: ${rowStart};\n    `}\n\n    ${rowEnd &&\n        css `\n      grid-row-end: ${rowEnd};\n    `}\n\n    ${rowStartEnd &&\n        css `\n      grid-row: ${rowStartEnd};\n    `}\n\n    ${area &&\n        css `\n      grid-area: ${area};\n    `}\n\n    ${justifySelf &&\n        css `\n      justify-self: ${justifySelf};\n    `}\n\n    ${alignSelf &&\n        css `\n      align-self: ${alignSelf};\n    `}\n  `;\n};\nconst breakpointOrder = ['xs', 'sm', 'md', 'lg', 'xl'];\nexport const StyledGrid = styled.div(({ container, item, theme: { base: { breakpoints: themeBreakpoints } }, xs, sm, md, lg, xl }) => {\n    const breakpoints = {\n        xs,\n        sm,\n        md,\n        lg,\n        xl\n    };\n    return css `\n      ${getContainerStyles(container)}\n      ${getItemStyles(item)}\n\n    ${breakpointOrder.map(breakpoint => breakpoints[breakpoint] &&\n        css `\n            @media screen and (min-width: ${themeBreakpoints[breakpoint]}) {\n              ${getContainerStyles(breakpoints[breakpoint]?.container)}\n              ${getItemStyles(breakpoints[breakpoint]?.item)}\n            }\n          `)}\n    `;\n});\nStyledGrid.defaultProps = defaultThemeProp;\nconst Grid = forwardRef((props, ref) => {\n    return _jsx(StyledGrid, { ...props, ref: ref });\n});\nexport default Grid;\n//# sourceMappingURL=Grid.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { hideVisually, readableColor, rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nexport const StyledLabel = styled.label(({ theme, labelHidden }) => {\n    const color = tryCatch(() => {\n        return rgba(readableColor(theme.base.palette['primary-background']), theme.base.transparency['transparent-3']);\n    });\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return labelHidden\n        ? hideVisually\n        : css `\n          max-width: max-content;\n          font-size: ${fontSize[theme.components.label['font-size']]};\n          font-weight: ${theme.base['font-weight']['semi-bold']};\n          color: ${color};\n        `;\n});\nStyledLabel.defaultProps = defaultThemeProp;\nconst Label = forwardRef(({ children, labelHidden = false, htmlFor, ...restProps }, ref) => {\n    return (_jsx(StyledLabel, { ref: ref, labelHidden: labelHidden, htmlFor: htmlFor === '' ? undefined : htmlFor, ...restProps, children: children }));\n});\nexport default Label;\n//# sourceMappingURL=Label.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment, useState, useLayoutEffect, useRef, useMemo, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Button from '../Button';\nimport ExpandCollapse from '../ExpandCollapse';\nimport Grid from '../Grid';\nimport { StyledLabel } from '../Label';\nimport { useBreakpoint, useConsolidatedRef, useI18n } from '../../hooks';\nimport { windowIsAvailable } from '../../utils';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledFieldName = styled.dt `\n  word-break: break-word;\n`;\nexport const StyledFieldValue = styled.dd `\n  word-break: break-word;\n`;\nexport const StyledFieldValueList = styled.dl(({ variant, theme }) => {\n    return css `\n    width: 100%;\n\n    ${variant === 'value-comparison' &&\n        css `\n      dt {\n        width: 100%;\n      }\n      dd {\n        text-align: end;\n        padding-inline-start: calc(2 * ${theme.base.spacing});\n      }\n      ${StyledLabel} {\n        max-width: unset;\n      }\n      dd:not(:last-of-type),\n      dt:not(:last-of-type) {\n        border-bottom: 0.0625rem solid ${theme.base.palette['border-line']};\n        padding-bottom: calc(0.5 * ${theme.base.spacing});\n      }\n    `}\n  `;\n});\nStyledFieldValueList.defaultProps = defaultThemeProp;\nexport const StyledStackedFieldValue = styled.div ``;\nconst DynamicHeightValue = ({ children }) => {\n    const [collapsed, setCollapsed] = useState(true);\n    const [exceedsMaxHeight, setExceedsMaxHeight] = useState(false);\n    const textRef = useRef(null);\n    const t = useI18n();\n    const maxTextHeight = useMemo(() => {\n        if (!windowIsAvailable)\n            return Infinity;\n        const computedLineHeight = Number.parseInt(window.getComputedStyle(document.documentElement).getPropertyValue('font-size'), 10) * 1.25;\n        return 3 * computedLineHeight;\n    }, []);\n    useLayoutEffect(() => {\n        if (!textRef.current)\n            return;\n        const observer = new ResizeObserver(entries => {\n            const exceedsHeight = entries.some(({ target, contentRect }) => {\n                if (target !== textRef.current)\n                    return;\n                return contentRect.height > maxTextHeight;\n            });\n            setExceedsMaxHeight(exceedsHeight);\n        });\n        observer.observe(textRef.current);\n        return () => {\n            observer.disconnect();\n        };\n    }, [textRef.current, maxTextHeight]);\n    return (_jsxs(_Fragment, { children: [_jsx(ExpandCollapse, { collapsed: collapsed, min: exceedsMaxHeight ? `${maxTextHeight}px` : 'max-content', children: _jsx(\"div\", { ref: textRef, children: _jsx(\"span\", { children: children }) }) }), exceedsMaxHeight && (_jsx(Button, { variant: 'link', onClick: () => setCollapsed(current => !current), children: collapsed ? t('show_more') : t('show_less') }))] }));\n};\nexport const FieldValueItem = ({ name, value, variant = 'inline' }) => {\n    const Wrapper = variant === 'stacked' ? StyledStackedFieldValue : Fragment;\n    const displayValue = typeof value === 'string' ? _jsx(DynamicHeightValue, { children: value }) : value;\n    return (_jsxs(Wrapper, { children: [_jsx(StyledLabel, { as: StyledFieldName, children: name }), _jsx(StyledFieldValue, { children: value ? displayValue : _jsx(\"span\", { \"aria-hidden\": 'true', children: \"\\u2013\\u2013\" }) })] }));\n};\nconst FieldValueList = forwardRef((props, ref) => {\n    const { fields, variant = 'inline', ...restProps } = props;\n    const fieldValueListRef = useConsolidatedRef(ref);\n    const isXSContentWidthOrAbove = useBreakpoint('xs', {\n        breakpointRef: fieldValueListRef,\n        themeProp: 'content-width'\n    });\n    return (_jsx(Grid, { ...restProps, ref: fieldValueListRef, container: {\n            cols: ['inline', 'value-comparison'].includes(variant) && isXSContentWidthOrAbove\n                ? '16ch minmax(0, 1fr)'\n                : 'minmax(0, 1fr)',\n            colGap: variant !== 'value-comparison' ? 2 : 0,\n            rowGap: variant !== 'value-comparison' ? 1 : 0.5\n        }, as: StyledFieldValueList, variant: variant, children: fields.map(({ id, name, value, variant: fieldVariant }) => {\n            return (_jsx(FieldValueItem, { name: name, value: value, variant: (fieldVariant ?? variant) === 'stacked' || !isXSContentWidthOrAbove\n                    ? 'stacked'\n                    : 'inline' }, id ?? name));\n        }) }));\n});\nexport default FieldValueList;\n//# sourceMappingURL=FieldValueList.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCard } from './Card';\nexport const StyledCardFooter = styled.footer(({ theme }) => {\n    return css `\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n    }\n  `;\n});\nStyledCardFooter.defaultProps = defaultThemeProp;\nconst CardFooter = (props) => {\n    const { children, justify, ...restProps } = props;\n    return (_jsx(Flex, { as: StyledCardFooter, container: {\n            wrap: 'wrap',\n            alignItems: 'center',\n            justify\n        }, ...restProps, children: children }));\n};\nexport default CardFooter;\n//# sourceMappingURL=CardFooter.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCard } from './Card';\nimport { StyledCardFooter } from './CardFooter';\nexport const StyledCardContent = styled.div(({ theme }) => {\n    return css `\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      position: relative;\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      & + &,\n      & + ${StyledCardFooter} {\n        padding-block-start: 0;\n      }\n    }\n  `;\n});\nStyledCardContent.defaultProps = defaultThemeProp;\nconst CardContent = ({ children, container, ...restProps }) => {\n    return (_jsx(Flex, { ...restProps, container: { direction: 'column', ...container }, as: StyledCardContent, children: children }));\n};\nexport default CardContent;\n//# sourceMappingURL=CardContent.js.map","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Flex from '../Flex';\nimport { StyledPopover } from '../Popover';\nimport { StyledCard } from './Card';\nimport { StyledCardContent } from './CardContent';\nexport const StyledCardHeader = styled.header(({ theme, onClick }) => {\n    return css `\n    ${StyledPopover} &, &:not(${StyledCard} ${StyledCard} > &) {\n      padding: calc(1.5 * ${theme.base.spacing}) calc(${theme.components.card.padding} * 2);\n\n      + ${StyledCardContent} {\n        padding-block-start: 0;\n      }\n\n      &:hover {\n        ${onClick ? 'cursor: pointer;' : undefined}\n      }\n    }\n  `;\n});\nStyledCardHeader.defaultProps = defaultThemeProp;\nconst CardHeader = forwardRef(({ children, actions, ...restProps }, ref) => {\n    return (_jsx(Flex, { container: { alignItems: 'center', justify: 'between' }, as: StyledCardHeader, ...restProps, ref: ref, children: actions ? (_jsxs(_Fragment, { children: [_jsx(Flex, { container: { alignItems: 'center' }, item: { grow: 1 }, children: children }), _jsx(\"div\", { children: actions })] })) : (children) }));\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;\n//# sourceMappingURL=CardHeader.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Grid from '../Grid';\nimport { defaultThemeProp } from '../../theme';\nimport { StyledProgressRing } from '../Progress';\nexport const StyledVisual = styled.div `\n  > ${StyledProgressRing}, img {\n    display: block;\n    object-fit: cover;\n    width: 2rem;\n    height: 2rem;\n  }\n`;\nStyledVisual.defaultProps = defaultThemeProp;\nexport const StyledPrimary = styled(Grid)(({ theme, isString, overflowStrategy }) => {\n    return css `\n    ${overflowStrategy === 'ellipsis'\n        ? css `\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        `\n        : css `\n          word-break: break-word;\n        `}\n\n    ${isString &&\n        css `\n      font-weight: ${theme.base['font-weight']['semi-bold']};\n    `}\n  `;\n});\nStyledPrimary.defaultProps = defaultThemeProp;\nexport const StyledSecondary = styled(Grid)(({ overflowStrategy }) => {\n    return css `\n    ${overflowStrategy === 'ellipsis'\n        ? css `\n          overflow: hidden;\n          text-overflow: ellipsis;\n        `\n        : css `\n          word-break: break-word;\n        `}\n  `;\n});\nexport const StyledSummaryItemActions = styled.div `\n  white-space: nowrap;\n`;\nexport const StyledSummaryItem = styled.div ``;\nconst getColumns = ({ visual, actions }) => {\n    return `${visual ? 'auto ' : ''}minmax(0, 1fr)${actions ? ' auto' : ''}`;\n};\nconst getAreas = ({ secondary, visual, actions }) => {\n    return `\"${visual ? 'visual ' : ''}primary${actions ? ' actions' : ''}\"${secondary ? `\\n\"${visual ? 'visual ' : ''}secondary${actions ? ' actions' : ''}\"` : ''}`;\n};\nconst SummaryItem = forwardRef(({ visual, primary, secondary, actions, container, overflowStrategy = 'wrap', as, ...restProps }, ref) => {\n    return (_jsxs(Grid, { ...restProps, ref: ref, container: {\n            cols: getColumns({ visual, actions }),\n            colGap: 2,\n            areas: getAreas({ secondary, visual, actions }),\n            ...container\n        }, as: StyledSummaryItem, forwardedAs: as, children: [visual && (_jsx(Grid, { as: StyledVisual, item: { area: 'visual', alignSelf: 'center' }, children: visual })), _jsx(StyledPrimary, { item: { area: 'primary', alignSelf: secondary ? 'end' : 'center' }, isString: typeof primary === 'string', overflowStrategy: overflowStrategy, children: primary }), secondary && (_jsx(StyledSecondary, { item: { area: 'secondary', alignSelf: 'start' }, overflowStrategy: overflowStrategy, children: secondary })), actions && (_jsx(Grid, { as: StyledSummaryItemActions, item: { area: 'actions', alignSelf: 'center' }, children: actions }))] }));\n});\nexport default SummaryItem;\n//# sourceMappingURL=SummaryItem.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Text from '../Text';\nimport Flex from '../Flex';\nexport const StyledMetaList = styled.ul(({ wrapItems }) => {\n    return css `\n    list-style: none;\n    overflow: hidden;\n\n    ${!wrapItems &&\n        css `\n      white-space: nowrap;\n    `}\n  `;\n});\nexport const StyledMetaListItem = styled.li(({ wrapItems }) => {\n    return css `\n    min-width: 0;\n    display: inline-block;\n\n    ${wrapItems\n        ? css `\n          overflow-wrap: break-word;\n        `\n        : css `\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        `}\n\n    &[role='separator'] {\n      -webkit-user-select: none;\n      user-select: none;\n    }\n  `;\n});\nconst MetaList = forwardRef((props, ref) => {\n    const { items, wrapItems = true, ...restProps } = props;\n    return (_jsx(Flex, { as: StyledMetaList, container: { colGap: 0.5, alignItems: 'center', wrap: wrapItems ? 'wrap' : 'nowrap' }, wrapItems: wrapItems, ref: ref, ...restProps, children: items.flatMap((item, i, arr) => item\n            ? [\n                _jsx(Text, { as: StyledMetaListItem, variant: 'secondary', wrapItems: wrapItems, children: item }, `${i + 0}`)\n            ].concat(i !== arr.length - 1\n                ? [\n                    _jsx(Text, { as: StyledMetaListItem, role: 'separator', variant: 'secondary', children: \"\\u2022\" }, `${i + 0}-sep`)\n                ]\n                : [])\n            : []) }));\n});\nexport default MetaList;\n//# sourceMappingURL=MetaList.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Card, CardContent, CardHeader, defaultThemeProp, FieldValueList, MetaList, StyledFieldValueList, SummaryItem } from '@pega/cosmos-react-core';\nimport { StyledCardContent } from '@pega/cosmos-react-core/lib/components/Card/CardContent';\nexport const StyledGlimpse = styled(Card)(({ theme }) => {\n    return css `\n    ${StyledCardContent} {\n      border-top: solid 0.0625rem ${theme.base.palette['border-line']};\n    }\n\n    ${StyledFieldValueList} {\n      padding-top: calc(1.5 * ${theme.base.spacing});\n    }\n  `;\n});\nStyledGlimpse.defaultProps = defaultThemeProp;\nconst Glimpse = forwardRef(({ primary, visual, secondary = [], fields = [] }, ref) => {\n    return (_jsxs(StyledGlimpse, { ref: ref, children: [_jsx(CardHeader, { children: _jsx(SummaryItem, { primary: primary, secondary: _jsx(MetaList, { items: secondary }), visual: visual }) }), !!fields.length && (_jsx(CardContent, { children: _jsx(FieldValueList, { fields: fields }) }))] }));\n});\nexport default Glimpse;\n//# sourceMappingURL=Glimpse.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport Popover from '../Popover';\nimport { useConsolidatedRef, useUID } from '../../hooks';\nimport { calculateFontSize } from '../../styles';\nexport const StyledTooltip = styled.div(({ theme }) => {\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    background-color: ${theme.components.tooltip['background-color']};\n    color: ${theme.components.tooltip['foreground-color']};\n    font-size: ${fontSize.xxs};\n    max-width: 40ch;\n    padding: ${theme.base.spacing};\n    white-space: pre-line;\n    word-break: break-word;\n    pointer-events: none;\n    z-index: ${theme.base['z-index'].tooltip};\n  `;\n});\nStyledTooltip.defaultProps = defaultThemeProp;\nconst Tooltip = forwardRef(({ children, target, showDelay = 'short', hideDelay = 'long', portal = true, placement = 'bottom', describeTarget = true, ...restProps }, ref) => {\n    const id = useUID();\n    const [show, setShow] = useState(false);\n    const tooltipRef = useConsolidatedRef(ref);\n    const lastClickedRef = useRef(null);\n    const showTooltip = useCallback(() => {\n        setShow(true);\n    }, []);\n    const onMouseDown = useCallback(({ target: eTarget }) => {\n        lastClickedRef.current = eTarget;\n        if (eTarget === tooltipRef.current || eTarget === target)\n            return;\n        setShow(false);\n    }, [target]);\n    const onFocusOut = useCallback(() => {\n        if (lastClickedRef.current !== tooltipRef.current) {\n            setShow(false);\n        }\n        lastClickedRef.current = null;\n    }, []);\n    const onMouseEnter = useCallback(() => {\n        setShow(true);\n    }, [target]);\n    const onMouseLeave = useCallback(() => {\n        if (document.activeElement !== target) {\n            setShow(false);\n        }\n    }, [target]);\n    const onKeyDown = useCallback(({ key }) => {\n        if (key === 'Escape' && document.activeElement === target) {\n            setShow(false);\n        }\n    }, [target]);\n    useEffect(() => {\n        if (!target)\n            return;\n        document.addEventListener('keydown', onKeyDown);\n        document.addEventListener('mousedown', onMouseDown);\n        target.addEventListener('focusin', showTooltip);\n        target.addEventListener('focusout', onFocusOut);\n        target.addEventListener('mouseenter', onMouseEnter);\n        target.addEventListener('mouseleave', onMouseLeave);\n        return () => {\n            document.removeEventListener('keydown', onKeyDown);\n            document.removeEventListener('mousedown', onMouseDown);\n            target.removeEventListener('focusin', showTooltip);\n            target.removeEventListener('focusout', onFocusOut);\n            target.removeEventListener('mouseenter', onMouseEnter);\n            target.removeEventListener('mouseleave', onMouseLeave);\n        };\n    }, [target, showTooltip, onMouseDown, onFocusOut, onMouseLeave, onKeyDown]);\n    useEffect(() => {\n        if (target && describeTarget && show) {\n            const describedBy = target.getAttribute('aria-describedby');\n            // Set the attribute to the old attribute plus the id\n            target.setAttribute('aria-describedby', describedBy ? `${describedBy} ${id}` : id);\n        }\n        else if (target) {\n            // Get the old attribute\n            const describedBy = target.getAttribute('aria-describedby');\n            if (describedBy) {\n                // If the old attribute matches the id just remove it entirely\n                if (describedBy === id) {\n                    target.removeAttribute('aria-describedby');\n                }\n                else {\n                    // Otherwise we want to just remove the id that was added and reset the attribute to what it was before\n                    const oldDescribedBy = describedBy.replace(new RegExp(`(?:^|\\\\s+)${id}`), '');\n                    target.setAttribute('aria-describedby', oldDescribedBy);\n                }\n            }\n        }\n    }, [describeTarget, target, show]);\n    return (_jsx(Popover, { id: id, ...restProps, show: show, showDelay: showDelay, hideDelay: hideDelay, groupId: 'tooltip', strategy: 'fixed', portal: portal, as: StyledTooltip, role: 'tooltip', target: target, arrow: true, placement: placement, onMouseDown: onMouseDown, hideOnTargetHidden: true, ref: tooltipRef, children: children }));\n});\nexport default Tooltip;\n//# sourceMappingURL=Tooltip.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState, useCallback, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nimport { reflow } from '../../utils';\nimport Flex from '../Flex';\nconst transitionSpeedToTheme = {\n    slow: 2,\n    medium: 1,\n    fast: 0.5,\n    none: 0\n};\nexport const StyledBackdrop = styled.div(props => {\n    const { theme: { base } } = props;\n    const { opacity, alpha, variant, position } = props;\n    const transitionDuration = `max(calc(${transitionSpeedToTheme[props.transitionSpeed]} * ${base.animation.speed}), 1ms)`;\n    return css `\n    position: ${position};\n    z-index: ${position === 'fixed' ? base['z-index'].backdrop : base['z-index'].popover + 1};\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    border-radius: inherit;\n    opacity: ${opacity};\n    transition-property: opacity;\n    transition-timing-function: ${props.theme.base.animation.timing.ease};\n\n    /* stylelint-disable declaration-block-no-duplicate-properties */\n    transition-duration: 1ms;\n    transition-duration: ${transitionDuration};\n\n    /* stylelint-enable declaration-block-no-duplicate-properties */\n\n    ${variant === 'dark' &&\n        css `\n      background: rgba(0, 0, 0, ${alpha});\n    `}\n\n    ${variant === 'light' &&\n        css `\n      background: rgba(255, 255, 255, ${alpha});\n    `}\n  `;\n});\nStyledBackdrop.defaultProps = defaultThemeProp;\nconst Backdrop = forwardRef((props, ref) => {\n    const { children, container, open = false, variant = 'dark', transitionSpeed = 'medium', alpha = 0.6, position = 'fixed', onBeforeTransitionIn, onAfterTransitionIn, onBeforeTransitionOut, onAfterTransitionOut, ...restProps } = props;\n    const [state, setState] = useState('closed');\n    const onTransitionEnd = useCallback((e) => {\n        if (e.propertyName !== 'opacity' || e.target !== e.currentTarget)\n            return;\n        let nextState;\n        if (state === 'closing') {\n            nextState = 'closed';\n            onAfterTransitionOut?.();\n        }\n        else {\n            nextState = 'open';\n            onAfterTransitionIn?.();\n        }\n        setState(nextState);\n    }, [state, onAfterTransitionOut, onAfterTransitionIn]);\n    useEffect(() => {\n        if (open) {\n            if (state === 'closed' || state === 'closing') {\n                onBeforeTransitionIn?.();\n                reflow();\n                setState('opening');\n            }\n        }\n        else if (state === 'open' || state === 'opening') {\n            onBeforeTransitionOut?.();\n            setState('closing');\n        }\n    }, [open, onBeforeTransitionIn, onBeforeTransitionOut]);\n    return !open && state === 'closed' ? null : (_jsx(Flex, { container: { justify: 'center', alignItems: 'center', ...container }, as: StyledBackdrop, transitionSpeed: transitionSpeed, opacity: state === 'opening' || state === 'open' ? 1 : 0, alpha: alpha, variant: variant, position: position, onTransitionEnd: onTransitionEnd, ref: ref, ...restProps, children: children }));\n});\nexport default Backdrop;\n//# sourceMappingURL=Backdrop.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledProgressBar = styled.div(({ theme, placement, determinate }) => {\n    return css `\n      height: 0.375rem;\n      background-color: ${theme.base.colors.gray['extra-light']};\n      border-radius: ${theme.base['border-radius']};\n      min-width: 2rem;\n      overflow: hidden;\n\n      @keyframes LoadingBar {\n        0% {\n          transform: translateX(-100%);\n        }\n\n        100% {\n          transform: translateX(200%);\n        }\n      }\n\n      ::before {\n        content: '';\n        display: block;\n        height: 100%;\n        width: 100%;\n        left: 0;\n        border-radius: ${theme.base['border-radius']};\n        background-color: ${theme.components.progress['progress-color']};\n        ${determinate &&\n        css `\n          transform: translateX(var(--progress, 0));\n          transform-origin: 0 50%;\n          transition: transform calc(0.5 * ${theme.base.animation.speed})\n            ${theme.base.animation.timing.ease};\n        `}\n\n        ${!determinate &&\n        css `\n          animation: LoadingBar calc(8 * ${theme.base.animation.speed}) linear infinite;\n          width: 50%;\n        `}\n      }\n\n      ${placement === 'inline'\n        ? css `\n            display: inline-block;\n            position: relative;\n          `\n        : css `\n            width: 50%;\n          `}\n    `;\n});\nStyledProgressBar.defaultProps = defaultThemeProp;\nconst Bar = forwardRef(({ value, minValue = 0, maxValue = 100, message, placement, style, ...restProps }, ref) => {\n    let percentage = value;\n    if (typeof value === 'number') {\n        if (value > maxValue || minValue > maxValue)\n            percentage = 0;\n        else if (value < minValue)\n            percentage = 100;\n        else\n            percentage = (1 - (value - minValue) / (maxValue - minValue)) * -100;\n    }\n    return (_jsx(StyledProgressBar, { ref: ref, role: 'progressbar', \"aria-valuemin\": minValue, \"aria-valuemax\": maxValue, \"aria-valuenow\": value, placement: placement, determinate: typeof value === 'number', style: { ...style, '--progress': percentage ? `${percentage}%` : '' }, ...restProps }));\n});\nexport default Bar;\n//# sourceMappingURL=Bar.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledProgressEllipsis = styled.div(({ theme, placement }) => {\n    return css `\n      line-height: 1;\n      display: ${placement === 'inline' ? 'inline-flex' : 'block'};\n\n      @keyframes LoadingEllipsis {\n        0% {\n          transform: scale(0);\n          opacity: 0;\n        }\n\n        50% {\n          transform: scale(1);\n          opacity: 1;\n        }\n\n        100% {\n          transform: scale(0);\n          opacity: 0;\n        }\n      }\n\n      > span {\n        display: flex;\n        mix-blend-mode: multiply;\n\n        ${placement === 'inline' &&\n        css `\n          display: inline-flex;\n          margin-left: 0.1875rem;\n        `}\n      }\n\n      > span span {\n        margin: 0 0.3125rem;\n        background: ${theme.components.progress['progress-color']};\n        border-radius: 50%;\n        animation: LoadingEllipsis calc(4 * ${theme.base.animation.speed}) infinite;\n\n        ${placement === 'global' &&\n        css `\n          width: 1.25rem;\n          height: 1.25rem;\n        `}\n\n        ${placement === 'local' &&\n        css `\n          width: 0.625rem;\n          height: 0.625rem;\n        `}\n\n      ${placement === 'inline' &&\n        css `\n          width: 0.1875rem;\n          height: 0.1875rem;\n          margin: 0 0.1875rem;\n          animation-duration: calc(4 * ${theme.base.animation.speed});\n        `}\n\n      &:nth-child(2) {\n          animation-delay: 0.1667s;\n        }\n\n        &:nth-child(3) {\n          animation-delay: ${0.1667 * 2}s;\n        }\n      }\n    `;\n});\nStyledProgressEllipsis.defaultProps = defaultThemeProp;\nconst Ellipsis = forwardRef(({ message, placement, ...restProps }, ref) => {\n    return (_jsx(StyledProgressEllipsis, { ref: ref, role: 'progressbar', placement: placement, ...restProps, children: _jsxs(\"span\", { children: [_jsx(\"span\", {}), _jsx(\"span\", {}), _jsx(\"span\", {})] }) }));\n});\nexport default Ellipsis;\n//# sourceMappingURL=Ellipsis.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled, { css } from 'styled-components';\nimport { readableColor, rgba } from 'polished';\nimport Backdrop from '../Backdrop';\nimport Text from '../Text';\nimport { calculateFontSize } from '../../styles';\nimport { tryCatch } from '../../utils';\nimport { useConfiguration } from '../../hooks';\nimport Bar from './Bar';\nimport Ellipsis from './Ellipsis';\nimport Ring from './Ring';\nconst StyledMessage = styled.span(({ theme }) => {\n    const color = tryCatch(() => {\n        return rgba(readableColor(theme.base.palette['primary-background']), theme.base.transparency['transparent-3']);\n    });\n    const fontSize = calculateFontSize(theme.base['font-size'], theme.base['font-scale']);\n    return css `\n    margin-top: 0.5rem;\n    font-size: ${fontSize[theme.components.label['font-size']]};\n    font-weight: ${theme.base['font-weight']['semi-bold']};\n    color: ${color};\n  `;\n});\nconst Progress = forwardRef(({ variant = 'ring', placement = 'global', visible = true, onTransitionEndIn, onTransitionEndOut, value, message, ...restProps }, ref) => {\n    const [isVisible, setIsVisible] = useState(visible);\n    const [isNull, setIsNull] = useState(!visible);\n    const { portalTarget } = useConfiguration();\n    const showTime = useRef();\n    const showTimeout = useRef();\n    const hideTimeout = useRef();\n    let Comp = Ring;\n    if (variant === 'bar')\n        Comp = Bar;\n    else if (variant === 'ellipsis')\n        Comp = Ellipsis;\n    const onBackdropTransitionEnd = () => {\n        setIsNull(true);\n        onTransitionEndOut?.();\n    };\n    useEffect(() => {\n        if (visible) {\n            clearTimeout(hideTimeout.current);\n            showTime.current = Date.now();\n            showTimeout.current = window.setTimeout(() => {\n                setIsVisible(true);\n                setIsNull(false);\n            }, 100);\n        }\n        else {\n            clearTimeout(showTimeout.current);\n            if (typeof showTime.current === 'number') {\n                const minimumDuration = 1000;\n                const timeElapsed = Date.now() - showTime.current;\n                if (timeElapsed > minimumDuration)\n                    setIsVisible(false);\n                else {\n                    hideTimeout.current = window.setTimeout(() => {\n                        setIsVisible(false);\n                    }, minimumDuration - timeElapsed);\n                }\n            }\n            else\n                setIsVisible(false);\n        }\n    }, [visible]);\n    useEffect(() => {\n        return () => {\n            clearTimeout(showTimeout.current);\n            clearTimeout(hideTimeout.current);\n        };\n    }, []);\n    if (isNull)\n        return null;\n    const comp = (_jsx(Comp, { ...restProps, placement: placement, value: value, \"aria-valuetext\": message && typeof value === 'number' ? `${message} - ${value}` : message, ref: ref }));\n    const content = placement === 'inline' ? (comp) : (_jsxs(Backdrop, { open: isVisible, container: { direction: 'column' }, position: placement === 'global' ? 'fixed' : 'absolute', variant: 'light', alpha: 0.5, onAfterTransitionIn: onTransitionEndIn, onAfterTransitionOut: onBackdropTransitionEnd, children: [comp, !!message && (_jsx(Text, { as: StyledMessage, variant: 'secondary', \"aria-hidden\": 'true', children: message }))] }));\n    return placement === 'global' && portalTarget ? createPortal(content, portalTarget) : content;\n});\nexport default Progress;\n//# sourceMappingURL=Progress.js.map","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useRef, useEffect, forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { mix, readableColor } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { getHoverColors, omitProps } from '../../styles';\nimport { useElement, useConsolidatedRef } from '../../hooks';\nimport Tooltip from '../Tooltip';\nimport Progress, { StyledProgressRing } from '../Progress';\nimport { StyledBackdrop } from '../Backdrop';\nimport { StyledIcon } from '../Icon';\nimport { StyledPopover } from '../Popover';\nexport const StyledButton = styled.button.withConfig(omitProps('loading'))(({ variant, icon, loading, compact, theme: { base: { spacing, 'border-radius': baseBorderRadius, palette: { 'primary-background': backgroundColor, 'foreground-color': textColor }, 'hit-area': { 'mouse-min': hitAreaMouse, 'finger-min': hitAreaFinger, 'compact-min': hitAreaCompact }, animation: { speed, timing: { ease } }, 'disabled-opacity': disabledOpacity }, components: { button: { color, 'secondary-color': secondaryColor, padding, 'border-radius': borderRadius, 'border-width': borderWidth, 'focus-shadow': focusShadow, touch: { padding: touchPadding } }, link: { color: linkColor } } } }) => {\n    const borderColor = variant === 'secondary' ? color : 'transparent';\n    const contrastColor = tryCatch(() => readableColor(color));\n    const hoverColors = getHoverColors(color);\n    const hoverPrimaryColor = hoverColors.background;\n    const hoverContrastColor = hoverColors.foreground;\n    const secondaryHoverColor = tryCatch(() => mix(0.85, secondaryColor, color));\n    let buttonColor = contrastColor;\n    let buttonBackgroundColor = color;\n    if (variant === 'secondary') {\n        buttonColor = color;\n        buttonBackgroundColor = secondaryColor;\n    }\n    else if (variant === 'simple') {\n        if (icon) {\n            buttonColor = 'currentColor';\n            buttonBackgroundColor = 'transparent';\n        }\n        else {\n            buttonColor = color;\n            buttonBackgroundColor = backgroundColor;\n        }\n    }\n    else if (variant === 'link') {\n        buttonColor = linkColor;\n        buttonBackgroundColor = 'transparent';\n    }\n    else if (variant === 'text') {\n        buttonColor = textColor;\n        buttonBackgroundColor = 'transparent';\n    }\n    return css `\n      color: ${buttonColor};\n      background-color: ${buttonBackgroundColor};\n      display: ${variant === 'link' || variant === 'text' ? 'inline' : 'inline-flex'};\n      align-items: center;\n      outline: none;\n      text-decoration: none;\n      transition-property: background-color, color, box-shadow;\n      transition-duration: calc(0.5 * ${speed});\n      transition-timing-function: ${ease};\n      cursor: pointer;\n\n      ${variant !== 'link' && variant !== 'text'\n        ? css `\n            justify-content: center;\n            line-height: 1;\n            border: ${borderWidth} solid ${borderColor};\n            position: relative;\n          `\n        : css `\n            text-align: start;\n            border: none;\n\n            > ${StyledIcon} {\n              vertical-align: bottom;\n            }\n          `}\n\n      & + & {\n        margin-inline-start: ${spacing};\n      }\n\n      /* Not able to combine with selector above. Stylis bug? */\n      & + ${StyledPopover} + & {\n        margin-inline-start: ${spacing};\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          ${variant === 'primary' &&\n        css `\n            background-color: ${hoverPrimaryColor};\n            color: ${hoverContrastColor};\n            text-decoration: none;\n          `}\n\n          ${(variant === 'secondary' || (variant === 'simple' && !icon)) &&\n        css `\n            background-color: ${secondaryHoverColor};\n            text-decoration: none;\n          `}\n\n          ${variant === 'simple' &&\n        icon &&\n        css `\n            ::before {\n              content: '';\n              position: absolute;\n              top: calc(${borderWidth} * -1);\n              bottom: calc(${borderWidth} * -1);\n              left: calc(${borderWidth} * -1);\n              right: calc(${borderWidth} * -1);\n              border-radius: inherit;\n              background-color: currentColor;\n              opacity: 0.15;\n            }\n          `}\n\n          ${(variant === 'link' || variant === 'text') &&\n        css `\n            text-decoration: underline;\n          `}\n        }\n      }\n\n      ${variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        min-height: ${hitAreaMouse};\n        min-width: ${hitAreaMouse};\n        border-radius: calc(${baseBorderRadius} * ${borderRadius});\n        -webkit-user-select: none;\n        user-select: none;\n      `}\n\n      ${compact &&\n        css `\n        min-height: ${hitAreaCompact};\n        min-width: ${hitAreaCompact};\n      `}\n\n      ${!icon &&\n        variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        padding: ${padding};\n      `}\n\n      ${variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        @media (pointer: coarse) {\n          ${!compact &&\n            css `\n            min-height: ${hitAreaFinger};\n            min-width: ${hitAreaFinger};\n          `}\n          border-radius: calc(${baseBorderRadius} * ${borderRadius});\n          ${!icon &&\n            css `\n            padding: ${touchPadding};\n          `}\n        }\n      `}\n\n      &:disabled,\n      &[disabled] {\n        opacity: ${disabledOpacity};\n        cursor: not-allowed;\n        pointer-events: none;\n      }\n\n      &:enabled:focus,\n      &:not([disabled]):focus {\n        box-shadow: ${focusShadow};\n      }\n\n      ${icon &&\n        variant !== 'link' &&\n        variant !== 'text' &&\n        css `\n        border-radius: calc(${baseBorderRadius} * ${borderRadius});\n        > svg {\n          display: block;\n        }\n      `}\n\n      ${loading &&\n        css `\n        ${StyledBackdrop} {\n          background-color: ${buttonBackgroundColor};\n          border-radius: inherit;\n        }\n        ${StyledProgressRing} {\n          width: 1em;\n          height: 1em;\n          circle:nth-child(2) {\n            animation-duration: calc(${speed} * 2);\n          }\n        }\n      `}\n    `;\n});\nStyledButton.defaultProps = defaultThemeProp;\nconst Button = forwardRef(({ variant = 'secondary', type = 'button', disabled = false, icon = false, compact = false, href, as, forwardedAs, label, 'aria-label': ariaLabel, loading = false, children, ...restProps }, ref) => {\n    const [buttonEl, setButtonEl] = useElement();\n    const mouseDownEvent = useRef();\n    const buttonRef = useConsolidatedRef(ref, setButtonEl);\n    const showProgress = loading && variant !== 'link' && variant !== 'text';\n    useEffect(() => {\n        return () => {\n            mouseDownEvent.current = undefined;\n        };\n    }, []);\n    return (_jsxs(_Fragment, { children: [_jsxs(StyledButton, { ...restProps, ref: buttonRef, as: as || (href ? 'a' : 'button'), forwardedAs: forwardedAs || (href ? 'a' : 'button'), variant: variant, icon: icon, compact: compact, type: href ? undefined : type, href: href, disabled: disabled && !href, loading: showProgress, \"aria-label\": ariaLabel || label, onMouseDown: (e) => {\n                    restProps.onMouseDown?.(e);\n                    e.persist();\n                    mouseDownEvent.current = e;\n                }, onMouseUp: (e) => {\n                    const shouldFocus = mouseDownEvent.current && !mouseDownEvent.current.defaultPrevented;\n                    mouseDownEvent.current = undefined;\n                    if (shouldFocus && buttonRef.current !== document.activeElement) {\n                        buttonRef.current?.focus();\n                    }\n                    return restProps.onMouseUp?.(e);\n                }, children: [showProgress && _jsx(Progress, { variant: 'ring', placement: 'local' }), children] }), buttonEl && label && (_jsx(Tooltip, { target: buttonEl, showDelay: 'none', hideDelay: 'none', describeTarget: false, children: label }))] }));\n});\nexport default Button;\n//# sourceMappingURL=Button.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nconst prefix = (value) => {\n    if (['between', 'around', 'evenly'].includes(value))\n        return `space-${value}`;\n    if (['start', 'end'].includes(value))\n        return `flex-${value}`;\n    return value;\n};\nconst getContainerStyles = (container) => {\n    if (!container)\n        return '';\n    if (container === true) {\n        return css `\n      display: flex;\n    `;\n    }\n    if (container && typeof container === 'object') {\n        const isRow = !container.direction || container.direction.includes('row');\n        const isReverse = container.direction && container.direction.includes('reverse');\n        return css `\n      display: ${container.inline ? 'inline-flex' : 'flex'};\n\n      ${container.pad !== undefined &&\n            css `\n        /* stylelint-disable function-name-case, function-whitespace-after */\n        padding: ${({ theme: { base: { spacing } } }) => (Array.isArray(container.pad) ? container.pad : [container.pad])\n                .map(p => `calc(${p} * ${spacing})`)\n                .join(' ')};\n\n        /* stylelint-enable function-name-case, function-whitespace-after */\n      `}\n\n      ${container.direction &&\n            css `\n        flex-direction: ${container.direction};\n      `}\n\n      ${container.justify &&\n            css `\n        justify-content: ${prefix(container.justify)};\n      `}\n\n      ${container.wrap &&\n            css `\n        flex-wrap: ${container.wrap};\n      `}\n\n      ${container.alignItems &&\n            css `\n        align-items: ${prefix(container.alignItems)};\n      `}\n\n      ${container.alignContent &&\n            css `\n        align-content: ${prefix(container.alignContent)};\n      `}\n\n      ${container.itemGap &&\n            css `\n          > * {\n            margin-${isRow ? 'inline-start' : 'block-start'}: calc(${container.itemGap} * ${props => props.theme.base.spacing});\n            ${isReverse ? ':last-child' : ':first-child'} {\n              margin-${isRow ? 'inline-start' : 'block-start'}: 0;\n            }\n          }\n        `}\n\n      ${container.gap !== undefined &&\n            css `\n        gap: calc(${container.gap} * ${props => props.theme.base.spacing});\n      `}\n\n      ${container.colGap !== undefined &&\n            css `\n        column-gap: calc(${container.colGap} * ${props => props.theme.base.spacing});\n      `}\n\n      ${container.rowGap !== undefined &&\n            css `\n        row-gap: calc(${container.rowGap} * ${props => props.theme.base.spacing});\n      `}\n    `;\n    }\n};\nconst getItemStyles = (item) => {\n    return css `\n    ${item &&\n        css `\n      max-width: 100%;\n      min-width: 0;\n\n      ${item.grow !== undefined &&\n            css `\n        flex-grow: ${item.grow};\n      `}\n\n      ${item.shrink !== undefined &&\n            css `\n        flex-shrink: ${item.shrink};\n      `}\n\n      ${item.alignSelf &&\n            css `\n        align-self: ${prefix(item.alignSelf)};\n      `}\n\n      ${item.basis &&\n            css `\n        flex-basis: ${item.basis};\n      `}\n    `}\n  `;\n};\nconst breakpointOrder = ['xs', 'sm', 'md', 'lg', 'xl'];\nexport const StyledFlex = styled.div(({ container, item, theme: { base: { breakpoints: themeBreakpoints } }, xs, sm, md, lg, xl }) => {\n    const breakpoints = {\n        xs,\n        sm,\n        md,\n        lg,\n        xl\n    };\n    return css `\n      ${getContainerStyles(container)}\n      ${getItemStyles(item)}\n\n    ${breakpointOrder.map(breakpoint => breakpoints[breakpoint] &&\n        css `\n            @media screen and (min-width: ${themeBreakpoints[breakpoint]}) {\n              ${getContainerStyles(breakpoints[breakpoint]?.container)}\n              ${getItemStyles(breakpoints[breakpoint]?.item)}\n            }\n          `)}\n    `;\n});\nStyledFlex.defaultProps = defaultThemeProp;\nconst Flex = forwardRef((props, ref) => {\n    return _jsx(StyledFlex, { ...props, ref: ref });\n});\nexport default Flex;\n//# sourceMappingURL=Flex.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef, useState, useEffect } from 'react';\nimport styled from 'styled-components';\nconst iconRegistry = new Map();\nexport const registerIcon = (...icons) => {\n    icons.forEach(({ name, ...iconDef }) => {\n        if (!iconRegistry.has(name))\n            iconRegistry.set(name, iconDef);\n    });\n};\nexport const forceRegisterIcon = (...icons) => {\n    icons.forEach(({ name, ...iconDef }) => {\n        iconRegistry.set(name, iconDef);\n    });\n};\nexport const StyledIcon = styled.svg `\n  display: inline-block;\n  fill: currentColor;\n  height: 1.125rem;\n  width: 1.125rem;\n  vertical-align: middle;\n`;\nconst emptyIconDefinition = Object.freeze({ Component: () => null });\nconst Icon = forwardRef(({ name, ...restProps }, ref) => {\n    const [iconDef, setIconDef] = useState(iconRegistry.get(name) ?? emptyIconDefinition);\n    useEffect(() => {\n        if (iconRegistry.has(name)) {\n            setIconDef(iconRegistry.get(name));\n            return;\n        }\n        const controller = new AbortController();\n        (async () => {\n            try {\n                const module = await import(`./icons/${encodeURIComponent(name)}.icon`);\n                if (module.name !== name || !module.Component)\n                    throw new Error('Malformed icon definition');\n                registerIcon(module);\n            }\n            catch {\n                registerIcon({ name, ...emptyIconDefinition });\n            }\n            if (!controller.signal.aborted)\n                setIconDef(iconRegistry.get(name) ?? emptyIconDefinition);\n        })();\n        return () => controller.abort();\n    }, [name]);\n    return (_jsx(StyledIcon, { role: 'presentation', ...restProps, viewBox: iconDef.viewBox, ref: ref, children: _jsx(iconDef.Component, {}) }));\n});\nexport default Icon;\n//# sourceMappingURL=Icon.js.map","import styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledPopoverArrow = styled.div `\n  background-color: inherit;\n\n  ::before {\n    content: '';\n    display: block;\n    position: absolute;\n    inset: -0.25rem;\n    background-color: inherit;\n    transform: rotate(45deg);\n  }\n`;\nStyledPopoverArrow.defaultProps = defaultThemeProp;\nexport const StyledPopoverContent = styled.div `\n  max-width: inherit;\n  max-height: inherit;\n  border-radius: inherit;\n  overflow: auto;\n`;\nexport const StyledPopover = styled.div(({ theme: { base: { 'border-radius': borderRadius, 'z-index': { popover: zIndex }, shadow: { low } }, components: { card: { background }, 'form-control': { 'border-radius': formControlBorderRadius } } }, offset }) => {\n    return css `\n      /*\n        Margin should never be used with Popper.\n        https://popper.js.org/docs/v2/migration-guide/#4-remove-all-css-margins\n      */\n      margin: 0 !important;\n      z-index: ${zIndex};\n      background-color: ${background};\n      border-radius: calc(${formControlBorderRadius} * ${borderRadius});\n      box-shadow: ${low};\n\n      &[data-popper-reference-hidden='true'] {\n        visibility: hidden;\n        pointer-events: none;\n      }\n\n      &[data-popper-placement^='top'] {\n        > ${StyledPopoverArrow} {\n          top: calc(100%);\n\n          ::before {\n            border-bottom-right-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          height: ${offset}px;\n          bottom: -${offset}px;\n          left: 0;\n          right: 0;\n        }\n      }\n\n      &[data-popper-placement^='bottom'] {\n        > ${StyledPopoverArrow} {\n          bottom: calc(100%);\n\n          ::before {\n            border-top-left-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          height: ${offset}px;\n          top: -${offset}px;\n          left: 0;\n          right: 0;\n        }\n      }\n\n      &[data-popper-placement^='right'] {\n        > ${StyledPopoverArrow} {\n          right: calc(100%);\n\n          ::before {\n            border-bottom-left-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          width: ${offset}px;\n          left: -${offset}px;\n          top: 0;\n          bottom: 0;\n        }\n      }\n\n      &[data-popper-placement^='left'] {\n        > ${StyledPopoverArrow} {\n          left: calc(100%);\n\n          ::before {\n            border-top-right-radius: calc(${borderRadius} / 4);\n          }\n        }\n\n        ::before {\n          content: '';\n          position: absolute;\n          width: ${offset}px;\n          right: -${offset}px;\n          top: 0;\n          bottom: 0;\n        }\n      }\n    `;\n});\nStyledPopover.defaultProps = defaultThemeProp;\n//# sourceMappingURL=Popover.styles.js.map","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { defaultThemeProp } from '../../theme';\nexport const StyledProgressRing = styled.div(({ theme, placement, determinate }) => {\n    return css `\n    position: relative;\n    min-width: 1em;\n    min-height: 1em;\n\n    @keyframes LoadingRing {\n      0% {\n        transform: rotate(0deg);\n      }\n\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    svg {\n      display: block;\n      position: absolute;\n      height: 100%;\n\n      circle {\n        fill: transparent;\n        stroke: ${theme.base.colors.gray['extra-light']};\n        stroke-width: 2;\n        r: 45%;\n        cx: 50%;\n        cy: 50%;\n        transform: rotate(-90deg);\n        transform-origin: 50% 50%;\n\n        &:nth-child(2) {\n          stroke: ${theme.components.progress['progress-color']};\n          transition: stroke-dashoffset calc(0.5 * ${theme.base.animation.speed})\n            ${theme.base.animation.timing.ease};\n\n          ${!determinate &&\n        css `\n            animation: LoadingRing calc(4 * ${theme.base.animation.speed}) linear infinite;\n          `}\n        }\n      }\n    }\n\n    ${placement === 'inline'\n        ? css `\n          display: inline-flex;\n          vertical-align: top;\n        `\n        : css `\n          width: 2rem;\n          height: 2rem;\n        `}\n  `;\n});\nStyledProgressRing.defaultProps = defaultThemeProp;\nconst Ring = forwardRef(({ value, minValue = 0, maxValue = 100, placement, ...restProps }, ref) => {\n    let strokeDashoffset;\n    const circumference = 18 * Math.PI;\n    if (typeof value !== 'number')\n        strokeDashoffset = (1 - 33 / 100) * circumference;\n    else if (value > maxValue || minValue > maxValue)\n        strokeDashoffset = 0;\n    else if (value < minValue)\n        strokeDashoffset = circumference;\n    else\n        strokeDashoffset = (1 - (value - minValue) / (maxValue - minValue)) * circumference;\n    return (_jsx(StyledProgressRing, { ref: ref, role: 'progressbar', \"aria-valuemin\": minValue, \"aria-valuemax\": maxValue, \"aria-valuenow\": value, placement: placement, determinate: typeof value === 'number', ...restProps, children: _jsxs(\"svg\", { viewBox: '0 0 20 20', children: [_jsx(\"circle\", {}), _jsx(\"circle\", { strokeDasharray: circumference, style: { strokeDashoffset } })] }) }));\n});\nexport default Ring;\n//# sourceMappingURL=Ring.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { rgba } from 'polished';\nimport { defaultThemeProp } from '../../theme';\nimport { tryCatch } from '../../utils';\nimport { calculateFontSize } from '../../styles';\nexport const StyledText = styled.span(props => {\n    const { variant, status, theme: { base: { 'font-size': fontSize, 'font-scale': fontScale, palette: { 'foreground-color': foregroundColor, urgent: error, warn: warning, success }, transparency: { 'transparent-2': secondaryAlpha } }, components: { text } } } = props;\n    let color;\n    if (status) {\n        color = {\n            error,\n            warning,\n            success\n        }[status];\n    }\n    if (variant === 'secondary') {\n        color = tryCatch(() => rgba(color ?? foregroundColor, secondaryAlpha));\n    }\n    const fontSizes = calculateFontSize(fontSize, fontScale);\n    return css `\n    font-size: ${fontSizes[text[variant]['font-size']]};\n    font-weight: ${text[variant]['font-weight']};\n    color: ${color};\n  `;\n});\nStyledText.defaultProps = defaultThemeProp;\nconst Text = forwardRef(({ variant = 'primary', as, ...restProps }, ref) => {\n    // If variant is for a heading, and no as is passed, set as to heading tag.\n    if (!as && /h\\d/i.test(variant))\n        as = variant;\n    return _jsx(StyledText, { ref: ref, variant: variant, as: as, ...restProps });\n});\nexport default Text;\n//# sourceMappingURL=Text.js.map"],"names":[],"sourceRoot":""}